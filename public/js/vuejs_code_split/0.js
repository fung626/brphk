(window["webpackJsonp"] = window["webpackJsonp"] || []).push([[0],{

/***/ "./node_modules/@coreui/vue-chartjs/dist/coreui-vue-chartjs.common.js":
/*!****************************************************************************!*\
  !*** ./node_modules/@coreui/vue-chartjs/dist/coreui-vue-chartjs.common.js ***!
  \****************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("function _typeof2(obj){\"@babel/helpers - typeof\";if(typeof Symbol===\"function\"&&typeof Symbol.iterator===\"symbol\"){_typeof2=function _typeof2(obj){return typeof obj;};}else{_typeof2=function _typeof2(obj){return obj&&typeof Symbol===\"function\"&&obj.constructor===Symbol&&obj!==Symbol.prototype?\"symbol\":typeof obj;};}return _typeof2(obj);}module.exports=/******/function(modules){// webpackBootstrap\n/******/ // The module cache\n/******/var installedModules={};/******/ /******/ // The require function\n/******/function __webpack_require__(moduleId){/******/ /******/ // Check if module is in cache\n/******/if(installedModules[moduleId]){/******/return installedModules[moduleId].exports;/******/}/******/ // Create a new module (and put it into the cache)\n/******/var module=installedModules[moduleId]={/******/i:moduleId,/******/l:false,/******/exports:{}/******/};/******/ /******/ // Execute the module function\n/******/modules[moduleId].call(module.exports,module,module.exports,__webpack_require__);/******/ /******/ // Flag the module as loaded\n/******/module.l=true;/******/ /******/ // Return the exports of the module\n/******/return module.exports;/******/}/******/ /******/ /******/ // expose the modules object (__webpack_modules__)\n/******/__webpack_require__.m=modules;/******/ /******/ // expose the module cache\n/******/__webpack_require__.c=installedModules;/******/ /******/ // define getter function for harmony exports\n/******/__webpack_require__.d=function(exports,name,getter){/******/if(!__webpack_require__.o(exports,name)){/******/Object.defineProperty(exports,name,{enumerable:true,get:getter});/******/}/******/};/******/ /******/ // define __esModule on exports\n/******/__webpack_require__.r=function(exports){/******/if(typeof Symbol!=='undefined'&&Symbol.toStringTag){/******/Object.defineProperty(exports,Symbol.toStringTag,{value:'Module'});/******/}/******/Object.defineProperty(exports,'__esModule',{value:true});/******/};/******/ /******/ // create a fake namespace object\n/******/ // mode & 1: value is a module id, require it\n/******/ // mode & 2: merge all properties of value into the ns\n/******/ // mode & 4: return value when already ns object\n/******/ // mode & 8|1: behave like require\n/******/__webpack_require__.t=function(value,mode){/******/if(mode&1)value=__webpack_require__(value);/******/if(mode&8)return value;/******/if(mode&4&&_typeof2(value)==='object'&&value&&value.__esModule)return value;/******/var ns=Object.create(null);/******/__webpack_require__.r(ns);/******/Object.defineProperty(ns,'default',{enumerable:true,value:value});/******/if(mode&2&&typeof value!='string')for(var key in value){__webpack_require__.d(ns,key,function(key){return value[key];}.bind(null,key));}/******/return ns;/******/};/******/ /******/ // getDefaultExport function for compatibility with non-harmony modules\n/******/__webpack_require__.n=function(module){/******/var getter=module&&module.__esModule?/******/function getDefault(){return module['default'];}:/******/function getModuleExports(){return module;};/******/__webpack_require__.d(getter,'a',getter);/******/return getter;/******/};/******/ /******/ // Object.prototype.hasOwnProperty.call\n/******/__webpack_require__.o=function(object,property){return Object.prototype.hasOwnProperty.call(object,property);};/******/ /******/ // __webpack_public_path__\n/******/__webpack_require__.p=\"\";/******/ /******/ /******/ // Load entry module and return exports\n/******/return __webpack_require__(__webpack_require__.s=\"fb15\");/******/}(/************************************************************************/ /******/{/***/\"010e\":/***/function e(module,exports,__webpack_require__){//! moment.js locale configuration\n//! locale : Uzbek Latin [uz-latn]\n//! author : Rasulbek Mirzayev : github.com/Rasulbeeek\n;(function(global,factory){true?factory(__webpack_require__(\"c1df\")):undefined;})(this,function(moment){'use strict';//! moment.js locale configuration\nvar uzLatn=moment.defineLocale('uz-latn',{months:'Yanvar_Fevral_Mart_Aprel_May_Iyun_Iyul_Avgust_Sentabr_Oktabr_Noyabr_Dekabr'.split('_'),monthsShort:'Yan_Fev_Mar_Apr_May_Iyun_Iyul_Avg_Sen_Okt_Noy_Dek'.split('_'),weekdays:'Yakshanba_Dushanba_Seshanba_Chorshanba_Payshanba_Juma_Shanba'.split('_'),weekdaysShort:'Yak_Dush_Sesh_Chor_Pay_Jum_Shan'.split('_'),weekdaysMin:'Ya_Du_Se_Cho_Pa_Ju_Sha'.split('_'),longDateFormat:{LT:'HH:mm',LTS:'HH:mm:ss',L:'DD/MM/YYYY',LL:'D MMMM YYYY',LLL:'D MMMM YYYY HH:mm',LLLL:'D MMMM YYYY, dddd HH:mm'},calendar:{sameDay:'[Bugun soat] LT [da]',nextDay:'[Ertaga] LT [da]',nextWeek:'dddd [kuni soat] LT [da]',lastDay:'[Kecha soat] LT [da]',lastWeek:\"[O'tgan] dddd [kuni soat] LT [da]\",sameElse:'L'},relativeTime:{future:'Yaqin %s ichida',past:'Bir necha %s oldin',s:'soniya',ss:'%d soniya',m:'bir daqiqa',mm:'%d daqiqa',h:'bir soat',hh:'%d soat',d:'bir kun',dd:'%d kun',M:'bir oy',MM:'%d oy',y:'bir yil',yy:'%d yil'},week:{dow:1,// Monday is the first day of the week.\ndoy:7// The week that contains Jan 7th is the first week of the year.\n}});return uzLatn;});/***/},/***/\"02fb\":/***/function fb(module,exports,__webpack_require__){//! moment.js locale configuration\n//! locale : Malayalam [ml]\n//! author : Floyd Pink : https://github.com/floydpink\n;(function(global,factory){true?factory(__webpack_require__(\"c1df\")):undefined;})(this,function(moment){'use strict';//! moment.js locale configuration\nvar ml=moment.defineLocale('ml',{months:'ജനുവരി_ഫെബ്രുവരി_മാർച്ച്_ഏപ്രിൽ_മേയ്_ജൂൺ_ജൂലൈ_ഓഗസ്റ്റ്_സെപ്റ്റംബർ_ഒക്ടോബർ_നവംബർ_ഡിസംബർ'.split('_'),monthsShort:'ജനു._ഫെബ്രു._മാർ._ഏപ്രി._മേയ്_ജൂൺ_ജൂലൈ._ഓഗ._സെപ്റ്റ._ഒക്ടോ._നവം._ഡിസം.'.split('_'),monthsParseExact:true,weekdays:'ഞായറാഴ്ച_തിങ്കളാഴ്ച_ചൊവ്വാഴ്ച_ബുധനാഴ്ച_വ്യാഴാഴ്ച_വെള്ളിയാഴ്ച_ശനിയാഴ്ച'.split('_'),weekdaysShort:'ഞായർ_തിങ്കൾ_ചൊവ്വ_ബുധൻ_വ്യാഴം_വെള്ളി_ശനി'.split('_'),weekdaysMin:'ഞാ_തി_ചൊ_ബു_വ്യാ_വെ_ശ'.split('_'),longDateFormat:{LT:'A h:mm -നു',LTS:'A h:mm:ss -നു',L:'DD/MM/YYYY',LL:'D MMMM YYYY',LLL:'D MMMM YYYY, A h:mm -നു',LLLL:'dddd, D MMMM YYYY, A h:mm -നു'},calendar:{sameDay:'[ഇന്ന്] LT',nextDay:'[നാളെ] LT',nextWeek:'dddd, LT',lastDay:'[ഇന്നലെ] LT',lastWeek:'[കഴിഞ്ഞ] dddd, LT',sameElse:'L'},relativeTime:{future:'%s കഴിഞ്ഞ്',past:'%s മുൻപ്',s:'അൽപ നിമിഷങ്ങൾ',ss:'%d സെക്കൻഡ്',m:'ഒരു മിനിറ്റ്',mm:'%d മിനിറ്റ്',h:'ഒരു മണിക്കൂർ',hh:'%d മണിക്കൂർ',d:'ഒരു ദിവസം',dd:'%d ദിവസം',M:'ഒരു മാസം',MM:'%d മാസം',y:'ഒരു വർഷം',yy:'%d വർഷം'},meridiemParse:/രാത്രി|രാവിലെ|ഉച്ച കഴിഞ്ഞ്|വൈകുന്നേരം|രാത്രി/i,meridiemHour:function meridiemHour(hour,meridiem){if(hour===12){hour=0;}if(meridiem==='രാത്രി'&&hour>=4||meridiem==='ഉച്ച കഴിഞ്ഞ്'||meridiem==='വൈകുന്നേരം'){return hour+12;}else{return hour;}},meridiem:function meridiem(hour,minute,isLower){if(hour<4){return'രാത്രി';}else if(hour<12){return'രാവിലെ';}else if(hour<17){return'ഉച്ച കഴിഞ്ഞ്';}else if(hour<20){return'വൈകുന്നേരം';}else{return'രാത്രി';}}});return ml;});/***/},/***/\"03ec\":/***/function ec(module,exports,__webpack_require__){//! moment.js locale configuration\n//! locale : Chuvash [cv]\n//! author : Anatoly Mironov : https://github.com/mirontoli\n;(function(global,factory){true?factory(__webpack_require__(\"c1df\")):undefined;})(this,function(moment){'use strict';//! moment.js locale configuration\nvar cv=moment.defineLocale('cv',{months:'кӑрлач_нарӑс_пуш_ака_май_ҫӗртме_утӑ_ҫурла_авӑн_юпа_чӳк_раштав'.split('_'),monthsShort:'кӑр_нар_пуш_ака_май_ҫӗр_утӑ_ҫур_авн_юпа_чӳк_раш'.split('_'),weekdays:'вырсарникун_тунтикун_ытларикун_юнкун_кӗҫнерникун_эрнекун_шӑматкун'.split('_'),weekdaysShort:'выр_тун_ытл_юн_кӗҫ_эрн_шӑм'.split('_'),weekdaysMin:'вр_тн_ыт_юн_кҫ_эр_шм'.split('_'),longDateFormat:{LT:'HH:mm',LTS:'HH:mm:ss',L:'DD-MM-YYYY',LL:'YYYY [ҫулхи] MMMM [уйӑхӗн] D[-мӗшӗ]',LLL:'YYYY [ҫулхи] MMMM [уйӑхӗн] D[-мӗшӗ], HH:mm',LLLL:'dddd, YYYY [ҫулхи] MMMM [уйӑхӗн] D[-мӗшӗ], HH:mm'},calendar:{sameDay:'[Паян] LT [сехетре]',nextDay:'[Ыран] LT [сехетре]',lastDay:'[Ӗнер] LT [сехетре]',nextWeek:'[Ҫитес] dddd LT [сехетре]',lastWeek:'[Иртнӗ] dddd LT [сехетре]',sameElse:'L'},relativeTime:{future:function future(output){var affix=/сехет$/i.exec(output)?'рен':/ҫул$/i.exec(output)?'тан':'ран';return output+affix;},past:'%s каялла',s:'пӗр-ик ҫеккунт',ss:'%d ҫеккунт',m:'пӗр минут',mm:'%d минут',h:'пӗр сехет',hh:'%d сехет',d:'пӗр кун',dd:'%d кун',M:'пӗр уйӑх',MM:'%d уйӑх',y:'пӗр ҫул',yy:'%d ҫул'},dayOfMonthOrdinalParse:/\\d{1,2}-мӗш/,ordinal:'%d-мӗш',week:{dow:1,// Monday is the first day of the week.\ndoy:7// The week that contains Jan 7th is the first week of the year.\n}});return cv;});/***/},/***/\"0558\":/***/function _(module,exports,__webpack_require__){//! moment.js locale configuration\n//! locale : Icelandic [is]\n//! author : Hinrik Örn Sigurðsson : https://github.com/hinrik\n;(function(global,factory){true?factory(__webpack_require__(\"c1df\")):undefined;})(this,function(moment){'use strict';//! moment.js locale configuration\nfunction plural(n){if(n%100===11){return true;}else if(n%10===1){return false;}return true;}function translate(number,withoutSuffix,key,isFuture){var result=number+' ';switch(key){case's':return withoutSuffix||isFuture?'nokkrar sekúndur':'nokkrum sekúndum';case'ss':if(plural(number)){return result+(withoutSuffix||isFuture?'sekúndur':'sekúndum');}return result+'sekúnda';case'm':return withoutSuffix?'mínúta':'mínútu';case'mm':if(plural(number)){return result+(withoutSuffix||isFuture?'mínútur':'mínútum');}else if(withoutSuffix){return result+'mínúta';}return result+'mínútu';case'hh':if(plural(number)){return result+(withoutSuffix||isFuture?'klukkustundir':'klukkustundum');}return result+'klukkustund';case'd':if(withoutSuffix){return'dagur';}return isFuture?'dag':'degi';case'dd':if(plural(number)){if(withoutSuffix){return result+'dagar';}return result+(isFuture?'daga':'dögum');}else if(withoutSuffix){return result+'dagur';}return result+(isFuture?'dag':'degi');case'M':if(withoutSuffix){return'mánuður';}return isFuture?'mánuð':'mánuði';case'MM':if(plural(number)){if(withoutSuffix){return result+'mánuðir';}return result+(isFuture?'mánuði':'mánuðum');}else if(withoutSuffix){return result+'mánuður';}return result+(isFuture?'mánuð':'mánuði');case'y':return withoutSuffix||isFuture?'ár':'ári';case'yy':if(plural(number)){return result+(withoutSuffix||isFuture?'ár':'árum');}return result+(withoutSuffix||isFuture?'ár':'ári');}}var is=moment.defineLocale('is',{months:'janúar_febrúar_mars_apríl_maí_júní_júlí_ágúst_september_október_nóvember_desember'.split('_'),monthsShort:'jan_feb_mar_apr_maí_jún_júl_ágú_sep_okt_nóv_des'.split('_'),weekdays:'sunnudagur_mánudagur_þriðjudagur_miðvikudagur_fimmtudagur_föstudagur_laugardagur'.split('_'),weekdaysShort:'sun_mán_þri_mið_fim_fös_lau'.split('_'),weekdaysMin:'Su_Má_Þr_Mi_Fi_Fö_La'.split('_'),longDateFormat:{LT:'H:mm',LTS:'H:mm:ss',L:'DD.MM.YYYY',LL:'D. MMMM YYYY',LLL:'D. MMMM YYYY [kl.] H:mm',LLLL:'dddd, D. MMMM YYYY [kl.] H:mm'},calendar:{sameDay:'[í dag kl.] LT',nextDay:'[á morgun kl.] LT',nextWeek:'dddd [kl.] LT',lastDay:'[í gær kl.] LT',lastWeek:'[síðasta] dddd [kl.] LT',sameElse:'L'},relativeTime:{future:'eftir %s',past:'fyrir %s síðan',s:translate,ss:translate,m:translate,mm:translate,h:'klukkustund',hh:translate,d:translate,dd:translate,M:translate,MM:translate,y:translate,yy:translate},dayOfMonthOrdinalParse:/\\d{1,2}\\./,ordinal:'%d.',week:{dow:1,// Monday is the first day of the week.\ndoy:4// The week that contains Jan 4th is the first week of the year.\n}});return is;});/***/},/***/\"0721\":/***/function _(module,exports,__webpack_require__){//! moment.js locale configuration\n//! locale : Faroese [fo]\n//! author : Ragnar Johannesen : https://github.com/ragnar123\n//! author : Kristian Sakarisson : https://github.com/sakarisson\n;(function(global,factory){true?factory(__webpack_require__(\"c1df\")):undefined;})(this,function(moment){'use strict';//! moment.js locale configuration\nvar fo=moment.defineLocale('fo',{months:'januar_februar_mars_apríl_mai_juni_juli_august_september_oktober_november_desember'.split('_'),monthsShort:'jan_feb_mar_apr_mai_jun_jul_aug_sep_okt_nov_des'.split('_'),weekdays:'sunnudagur_mánadagur_týsdagur_mikudagur_hósdagur_fríggjadagur_leygardagur'.split('_'),weekdaysShort:'sun_mán_týs_mik_hós_frí_ley'.split('_'),weekdaysMin:'su_má_tý_mi_hó_fr_le'.split('_'),longDateFormat:{LT:'HH:mm',LTS:'HH:mm:ss',L:'DD/MM/YYYY',LL:'D MMMM YYYY',LLL:'D MMMM YYYY HH:mm',LLLL:'dddd D. MMMM, YYYY HH:mm'},calendar:{sameDay:'[Í dag kl.] LT',nextDay:'[Í morgin kl.] LT',nextWeek:'dddd [kl.] LT',lastDay:'[Í gjár kl.] LT',lastWeek:'[síðstu] dddd [kl] LT',sameElse:'L'},relativeTime:{future:'um %s',past:'%s síðani',s:'fá sekund',ss:'%d sekundir',m:'ein minuttur',mm:'%d minuttir',h:'ein tími',hh:'%d tímar',d:'ein dagur',dd:'%d dagar',M:'ein mánaður',MM:'%d mánaðir',y:'eitt ár',yy:'%d ár'},dayOfMonthOrdinalParse:/\\d{1,2}\\./,ordinal:'%d.',week:{dow:1,// Monday is the first day of the week.\ndoy:4// The week that contains Jan 4th is the first week of the year.\n}});return fo;});/***/},/***/\"079e\":/***/function e(module,exports,__webpack_require__){//! moment.js locale configuration\n//! locale : Japanese [ja]\n//! author : LI Long : https://github.com/baryon\n;(function(global,factory){true?factory(__webpack_require__(\"c1df\")):undefined;})(this,function(moment){'use strict';//! moment.js locale configuration\nvar ja=moment.defineLocale('ja',{eras:[{since:'2019-05-01',offset:1,name:'令和',narrow:'㋿',abbr:'R'},{since:'1989-01-08',until:'2019-04-30',offset:1,name:'平成',narrow:'㍻',abbr:'H'},{since:'1926-12-25',until:'1989-01-07',offset:1,name:'昭和',narrow:'㍼',abbr:'S'},{since:'1912-07-30',until:'1926-12-24',offset:1,name:'大正',narrow:'㍽',abbr:'T'},{since:'1873-01-01',until:'1912-07-29',offset:6,name:'明治',narrow:'㍾',abbr:'M'},{since:'0001-01-01',until:'1873-12-31',offset:1,name:'西暦',narrow:'AD',abbr:'AD'},{since:'0000-12-31',until:-Infinity,offset:1,name:'紀元前',narrow:'BC',abbr:'BC'}],eraYearOrdinalRegex:/(元|\\d+)年/,eraYearOrdinalParse:function eraYearOrdinalParse(input,match){return match[1]==='元'?1:parseInt(match[1]||input,10);},months:'1月_2月_3月_4月_5月_6月_7月_8月_9月_10月_11月_12月'.split('_'),monthsShort:'1月_2月_3月_4月_5月_6月_7月_8月_9月_10月_11月_12月'.split('_'),weekdays:'日曜日_月曜日_火曜日_水曜日_木曜日_金曜日_土曜日'.split('_'),weekdaysShort:'日_月_火_水_木_金_土'.split('_'),weekdaysMin:'日_月_火_水_木_金_土'.split('_'),longDateFormat:{LT:'HH:mm',LTS:'HH:mm:ss',L:'YYYY/MM/DD',LL:'YYYY年M月D日',LLL:'YYYY年M月D日 HH:mm',LLLL:'YYYY年M月D日 dddd HH:mm',l:'YYYY/MM/DD',ll:'YYYY年M月D日',lll:'YYYY年M月D日 HH:mm',llll:'YYYY年M月D日(ddd) HH:mm'},meridiemParse:/午前|午後/i,isPM:function isPM(input){return input==='午後';},meridiem:function meridiem(hour,minute,isLower){if(hour<12){return'午前';}else{return'午後';}},calendar:{sameDay:'[今日] LT',nextDay:'[明日] LT',nextWeek:function nextWeek(now){if(now.week()!==this.week()){return'[来週]dddd LT';}else{return'dddd LT';}},lastDay:'[昨日] LT',lastWeek:function lastWeek(now){if(this.week()!==now.week()){return'[先週]dddd LT';}else{return'dddd LT';}},sameElse:'L'},dayOfMonthOrdinalParse:/\\d{1,2}日/,ordinal:function ordinal(number,period){switch(period){case'y':return number===1?'元年':number+'年';case'd':case'D':case'DDD':return number+'日';default:return number;}},relativeTime:{future:'%s後',past:'%s前',s:'数秒',ss:'%d秒',m:'1分',mm:'%d分',h:'1時間',hh:'%d時間',d:'1日',dd:'%d日',M:'1ヶ月',MM:'%dヶ月',y:'1年',yy:'%d年'}});return ja;});/***/},/***/\"0a3c\":/***/function a3c(module,exports,__webpack_require__){//! moment.js locale configuration\n//! locale : Spanish (Dominican Republic) [es-do]\n;(function(global,factory){true?factory(__webpack_require__(\"c1df\")):undefined;})(this,function(moment){'use strict';//! moment.js locale configuration\nvar monthsShortDot='ene._feb._mar._abr._may._jun._jul._ago._sep._oct._nov._dic.'.split('_'),_monthsShort='ene_feb_mar_abr_may_jun_jul_ago_sep_oct_nov_dic'.split('_'),monthsParse=[/^ene/i,/^feb/i,/^mar/i,/^abr/i,/^may/i,/^jun/i,/^jul/i,/^ago/i,/^sep/i,/^oct/i,/^nov/i,/^dic/i],monthsRegex=/^(enero|febrero|marzo|abril|mayo|junio|julio|agosto|septiembre|octubre|noviembre|diciembre|ene\\.?|feb\\.?|mar\\.?|abr\\.?|may\\.?|jun\\.?|jul\\.?|ago\\.?|sep\\.?|oct\\.?|nov\\.?|dic\\.?)/i;var esDo=moment.defineLocale('es-do',{months:'enero_febrero_marzo_abril_mayo_junio_julio_agosto_septiembre_octubre_noviembre_diciembre'.split('_'),monthsShort:function monthsShort(m,format){if(!m){return monthsShortDot;}else if(/-MMM-/.test(format)){return _monthsShort[m.month()];}else{return monthsShortDot[m.month()];}},monthsRegex:monthsRegex,monthsShortRegex:monthsRegex,monthsStrictRegex:/^(enero|febrero|marzo|abril|mayo|junio|julio|agosto|septiembre|octubre|noviembre|diciembre)/i,monthsShortStrictRegex:/^(ene\\.?|feb\\.?|mar\\.?|abr\\.?|may\\.?|jun\\.?|jul\\.?|ago\\.?|sep\\.?|oct\\.?|nov\\.?|dic\\.?)/i,monthsParse:monthsParse,longMonthsParse:monthsParse,shortMonthsParse:monthsParse,weekdays:'domingo_lunes_martes_miércoles_jueves_viernes_sábado'.split('_'),weekdaysShort:'dom._lun._mar._mié._jue._vie._sáb.'.split('_'),weekdaysMin:'do_lu_ma_mi_ju_vi_sá'.split('_'),weekdaysParseExact:true,longDateFormat:{LT:'h:mm A',LTS:'h:mm:ss A',L:'DD/MM/YYYY',LL:'D [de] MMMM [de] YYYY',LLL:'D [de] MMMM [de] YYYY h:mm A',LLLL:'dddd, D [de] MMMM [de] YYYY h:mm A'},calendar:{sameDay:function sameDay(){return'[hoy a la'+(this.hours()!==1?'s':'')+'] LT';},nextDay:function nextDay(){return'[mañana a la'+(this.hours()!==1?'s':'')+'] LT';},nextWeek:function nextWeek(){return'dddd [a la'+(this.hours()!==1?'s':'')+'] LT';},lastDay:function lastDay(){return'[ayer a la'+(this.hours()!==1?'s':'')+'] LT';},lastWeek:function lastWeek(){return'[el] dddd [pasado a la'+(this.hours()!==1?'s':'')+'] LT';},sameElse:'L'},relativeTime:{future:'en %s',past:'hace %s',s:'unos segundos',ss:'%d segundos',m:'un minuto',mm:'%d minutos',h:'una hora',hh:'%d horas',d:'un día',dd:'%d días',M:'un mes',MM:'%d meses',y:'un año',yy:'%d años'},dayOfMonthOrdinalParse:/\\d{1,2}º/,ordinal:'%dº',week:{dow:1,// Monday is the first day of the week.\ndoy:4// The week that contains Jan 4th is the first week of the year.\n}});return esDo;});/***/},/***/\"0a84\":/***/function a84(module,exports,__webpack_require__){//! moment.js locale configuration\n//! locale : Arabic (Morocco) [ar-ma]\n//! author : ElFadili Yassine : https://github.com/ElFadiliY\n//! author : Abdel Said : https://github.com/abdelsaid\n;(function(global,factory){true?factory(__webpack_require__(\"c1df\")):undefined;})(this,function(moment){'use strict';//! moment.js locale configuration\nvar arMa=moment.defineLocale('ar-ma',{months:'يناير_فبراير_مارس_أبريل_ماي_يونيو_يوليوز_غشت_شتنبر_أكتوبر_نونبر_دجنبر'.split('_'),monthsShort:'يناير_فبراير_مارس_أبريل_ماي_يونيو_يوليوز_غشت_شتنبر_أكتوبر_نونبر_دجنبر'.split('_'),weekdays:'الأحد_الإثنين_الثلاثاء_الأربعاء_الخميس_الجمعة_السبت'.split('_'),weekdaysShort:'احد_اثنين_ثلاثاء_اربعاء_خميس_جمعة_سبت'.split('_'),weekdaysMin:'ح_ن_ث_ر_خ_ج_س'.split('_'),weekdaysParseExact:true,longDateFormat:{LT:'HH:mm',LTS:'HH:mm:ss',L:'DD/MM/YYYY',LL:'D MMMM YYYY',LLL:'D MMMM YYYY HH:mm',LLLL:'dddd D MMMM YYYY HH:mm'},calendar:{sameDay:'[اليوم على الساعة] LT',nextDay:'[غدا على الساعة] LT',nextWeek:'dddd [على الساعة] LT',lastDay:'[أمس على الساعة] LT',lastWeek:'dddd [على الساعة] LT',sameElse:'L'},relativeTime:{future:'في %s',past:'منذ %s',s:'ثوان',ss:'%d ثانية',m:'دقيقة',mm:'%d دقائق',h:'ساعة',hh:'%d ساعات',d:'يوم',dd:'%d أيام',M:'شهر',MM:'%d أشهر',y:'سنة',yy:'%d سنوات'},week:{dow:6,// Saturday is the first day of the week.\ndoy:12// The week that contains Jan 12th is the first week of the year.\n}});return arMa;});/***/},/***/\"0caa\":/***/function caa(module,exports,__webpack_require__){//! moment.js locale configuration\n//! locale : Konkani Latin script [gom-latn]\n//! author : The Discoverer : https://github.com/WikiDiscoverer\n;(function(global,factory){true?factory(__webpack_require__(\"c1df\")):undefined;})(this,function(moment){'use strict';//! moment.js locale configuration\nfunction processRelativeTime(number,withoutSuffix,key,isFuture){var format={s:['thoddea sekondamni','thodde sekond'],ss:[number+' sekondamni',number+' sekond'],m:['eka mintan','ek minut'],mm:[number+' mintamni',number+' mintam'],h:['eka voran','ek vor'],hh:[number+' voramni',number+' voram'],d:['eka disan','ek dis'],dd:[number+' disamni',number+' dis'],M:['eka mhoinean','ek mhoino'],MM:[number+' mhoineamni',number+' mhoine'],y:['eka vorsan','ek voros'],yy:[number+' vorsamni',number+' vorsam']};return isFuture?format[key][0]:format[key][1];}var gomLatn=moment.defineLocale('gom-latn',{months:{standalone:'Janer_Febrer_Mars_Abril_Mai_Jun_Julai_Agost_Setembr_Otubr_Novembr_Dezembr'.split('_'),format:'Janerachea_Febrerachea_Marsachea_Abrilachea_Maiachea_Junachea_Julaiachea_Agostachea_Setembrachea_Otubrachea_Novembrachea_Dezembrachea'.split('_'),isFormat:/MMMM(\\s)+D[oD]?/},monthsShort:'Jan._Feb._Mars_Abr._Mai_Jun_Jul._Ago._Set._Otu._Nov._Dez.'.split('_'),monthsParseExact:true,weekdays:\"Aitar_Somar_Mongllar_Budhvar_Birestar_Sukrar_Son'var\".split('_'),weekdaysShort:'Ait._Som._Mon._Bud._Bre._Suk._Son.'.split('_'),weekdaysMin:'Ai_Sm_Mo_Bu_Br_Su_Sn'.split('_'),weekdaysParseExact:true,longDateFormat:{LT:'A h:mm [vazta]',LTS:'A h:mm:ss [vazta]',L:'DD-MM-YYYY',LL:'D MMMM YYYY',LLL:'D MMMM YYYY A h:mm [vazta]',LLLL:'dddd, MMMM Do, YYYY, A h:mm [vazta]',llll:'ddd, D MMM YYYY, A h:mm [vazta]'},calendar:{sameDay:'[Aiz] LT',nextDay:'[Faleam] LT',nextWeek:'[Fuddlo] dddd[,] LT',lastDay:'[Kal] LT',lastWeek:'[Fattlo] dddd[,] LT',sameElse:'L'},relativeTime:{future:'%s',past:'%s adim',s:processRelativeTime,ss:processRelativeTime,m:processRelativeTime,mm:processRelativeTime,h:processRelativeTime,hh:processRelativeTime,d:processRelativeTime,dd:processRelativeTime,M:processRelativeTime,MM:processRelativeTime,y:processRelativeTime,yy:processRelativeTime},dayOfMonthOrdinalParse:/\\d{1,2}(er)/,ordinal:function ordinal(number,period){switch(period){// the ordinal 'er' only applies to day of the month\ncase'D':return number+'er';default:case'M':case'Q':case'DDD':case'd':case'w':case'W':return number;}},week:{dow:1,// Monday is the first day of the week.\ndoy:4// The week that contains Jan 4th is the first week of the year.\n},meridiemParse:/rati|sokallim|donparam|sanje/,meridiemHour:function meridiemHour(hour,meridiem){if(hour===12){hour=0;}if(meridiem==='rati'){return hour<4?hour:hour+12;}else if(meridiem==='sokallim'){return hour;}else if(meridiem==='donparam'){return hour>12?hour:hour+12;}else if(meridiem==='sanje'){return hour+12;}},meridiem:function meridiem(hour,minute,isLower){if(hour<4){return'rati';}else if(hour<12){return'sokallim';}else if(hour<16){return'donparam';}else if(hour<20){return'sanje';}else{return'rati';}}});return gomLatn;});/***/},/***/\"0e49\":/***/function e49(module,exports,__webpack_require__){//! moment.js locale configuration\n//! locale : French (Switzerland) [fr-ch]\n//! author : Gaspard Bucher : https://github.com/gaspard\n;(function(global,factory){true?factory(__webpack_require__(\"c1df\")):undefined;})(this,function(moment){'use strict';//! moment.js locale configuration\nvar frCh=moment.defineLocale('fr-ch',{months:'janvier_février_mars_avril_mai_juin_juillet_août_septembre_octobre_novembre_décembre'.split('_'),monthsShort:'janv._févr._mars_avr._mai_juin_juil._août_sept._oct._nov._déc.'.split('_'),monthsParseExact:true,weekdays:'dimanche_lundi_mardi_mercredi_jeudi_vendredi_samedi'.split('_'),weekdaysShort:'dim._lun._mar._mer._jeu._ven._sam.'.split('_'),weekdaysMin:'di_lu_ma_me_je_ve_sa'.split('_'),weekdaysParseExact:true,longDateFormat:{LT:'HH:mm',LTS:'HH:mm:ss',L:'DD.MM.YYYY',LL:'D MMMM YYYY',LLL:'D MMMM YYYY HH:mm',LLLL:'dddd D MMMM YYYY HH:mm'},calendar:{sameDay:'[Aujourd’hui à] LT',nextDay:'[Demain à] LT',nextWeek:'dddd [à] LT',lastDay:'[Hier à] LT',lastWeek:'dddd [dernier à] LT',sameElse:'L'},relativeTime:{future:'dans %s',past:'il y a %s',s:'quelques secondes',ss:'%d secondes',m:'une minute',mm:'%d minutes',h:'une heure',hh:'%d heures',d:'un jour',dd:'%d jours',M:'un mois',MM:'%d mois',y:'un an',yy:'%d ans'},dayOfMonthOrdinalParse:/\\d{1,2}(er|e)/,ordinal:function ordinal(number,period){switch(period){// Words with masculine grammatical gender: mois, trimestre, jour\ndefault:case'M':case'Q':case'D':case'DDD':case'd':return number+(number===1?'er':'e');// Words with feminine grammatical gender: semaine\ncase'w':case'W':return number+(number===1?'re':'e');}},week:{dow:1,// Monday is the first day of the week.\ndoy:4// The week that contains Jan 4th is the first week of the year.\n}});return frCh;});/***/},/***/\"0e6b\":/***/function e6b(module,exports,__webpack_require__){//! moment.js locale configuration\n//! locale : English (Australia) [en-au]\n//! author : Jared Morse : https://github.com/jarcoal\n;(function(global,factory){true?factory(__webpack_require__(\"c1df\")):undefined;})(this,function(moment){'use strict';//! moment.js locale configuration\nvar enAu=moment.defineLocale('en-au',{months:'January_February_March_April_May_June_July_August_September_October_November_December'.split('_'),monthsShort:'Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec'.split('_'),weekdays:'Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday'.split('_'),weekdaysShort:'Sun_Mon_Tue_Wed_Thu_Fri_Sat'.split('_'),weekdaysMin:'Su_Mo_Tu_We_Th_Fr_Sa'.split('_'),longDateFormat:{LT:'h:mm A',LTS:'h:mm:ss A',L:'DD/MM/YYYY',LL:'D MMMM YYYY',LLL:'D MMMM YYYY h:mm A',LLLL:'dddd, D MMMM YYYY h:mm A'},calendar:{sameDay:'[Today at] LT',nextDay:'[Tomorrow at] LT',nextWeek:'dddd [at] LT',lastDay:'[Yesterday at] LT',lastWeek:'[Last] dddd [at] LT',sameElse:'L'},relativeTime:{future:'in %s',past:'%s ago',s:'a few seconds',ss:'%d seconds',m:'a minute',mm:'%d minutes',h:'an hour',hh:'%d hours',d:'a day',dd:'%d days',M:'a month',MM:'%d months',y:'a year',yy:'%d years'},dayOfMonthOrdinalParse:/\\d{1,2}(st|nd|rd|th)/,ordinal:function ordinal(number){var b=number%10,output=~~(number%100/10)===1?'th':b===1?'st':b===2?'nd':b===3?'rd':'th';return number+output;},week:{dow:0,// Sunday is the first day of the week.\ndoy:4// The week that contains Jan 4th is the first week of the year.\n}});return enAu;});/***/},/***/\"0e81\":/***/function e81(module,exports,__webpack_require__){//! moment.js locale configuration\n//! locale : Turkish [tr]\n//! authors : Erhan Gundogan : https://github.com/erhangundogan,\n//!           Burak Yiğit Kaya: https://github.com/BYK\n;(function(global,factory){true?factory(__webpack_require__(\"c1df\")):undefined;})(this,function(moment){'use strict';//! moment.js locale configuration\nvar suffixes={1:\"'inci\",5:\"'inci\",8:\"'inci\",70:\"'inci\",80:\"'inci\",2:\"'nci\",7:\"'nci\",20:\"'nci\",50:\"'nci\",3:\"'üncü\",4:\"'üncü\",100:\"'üncü\",6:\"'ncı\",9:\"'uncu\",10:\"'uncu\",30:\"'uncu\",60:\"'ıncı\",90:\"'ıncı\"};var tr=moment.defineLocale('tr',{months:'Ocak_Şubat_Mart_Nisan_Mayıs_Haziran_Temmuz_Ağustos_Eylül_Ekim_Kasım_Aralık'.split('_'),monthsShort:'Oca_Şub_Mar_Nis_May_Haz_Tem_Ağu_Eyl_Eki_Kas_Ara'.split('_'),weekdays:'Pazar_Pazartesi_Salı_Çarşamba_Perşembe_Cuma_Cumartesi'.split('_'),weekdaysShort:'Paz_Pts_Sal_Çar_Per_Cum_Cts'.split('_'),weekdaysMin:'Pz_Pt_Sa_Ça_Pe_Cu_Ct'.split('_'),meridiem:function meridiem(hours,minutes,isLower){if(hours<12){return isLower?'öö':'ÖÖ';}else{return isLower?'ös':'ÖS';}},meridiemParse:/öö|ÖÖ|ös|ÖS/,isPM:function isPM(input){return input==='ös'||input==='ÖS';},longDateFormat:{LT:'HH:mm',LTS:'HH:mm:ss',L:'DD.MM.YYYY',LL:'D MMMM YYYY',LLL:'D MMMM YYYY HH:mm',LLLL:'dddd, D MMMM YYYY HH:mm'},calendar:{sameDay:'[bugün saat] LT',nextDay:'[yarın saat] LT',nextWeek:'[gelecek] dddd [saat] LT',lastDay:'[dün] LT',lastWeek:'[geçen] dddd [saat] LT',sameElse:'L'},relativeTime:{future:'%s sonra',past:'%s önce',s:'birkaç saniye',ss:'%d saniye',m:'bir dakika',mm:'%d dakika',h:'bir saat',hh:'%d saat',d:'bir gün',dd:'%d gün',M:'bir ay',MM:'%d ay',y:'bir yıl',yy:'%d yıl'},ordinal:function ordinal(number,period){switch(period){case'd':case'D':case'Do':case'DD':return number;default:if(number===0){// special case for zero\nreturn number+\"'ıncı\";}var a=number%10,b=number%100-a,c=number>=100?100:null;return number+(suffixes[a]||suffixes[b]||suffixes[c]);}},week:{dow:1,// Monday is the first day of the week.\ndoy:7// The week that contains Jan 7th is the first week of the year.\n}});return tr;});/***/},/***/\"0f14\":/***/function f14(module,exports,__webpack_require__){//! moment.js locale configuration\n//! locale : Danish [da]\n//! author : Ulrik Nielsen : https://github.com/mrbase\n;(function(global,factory){true?factory(__webpack_require__(\"c1df\")):undefined;})(this,function(moment){'use strict';//! moment.js locale configuration\nvar da=moment.defineLocale('da',{months:'januar_februar_marts_april_maj_juni_juli_august_september_oktober_november_december'.split('_'),monthsShort:'jan_feb_mar_apr_maj_jun_jul_aug_sep_okt_nov_dec'.split('_'),weekdays:'søndag_mandag_tirsdag_onsdag_torsdag_fredag_lørdag'.split('_'),weekdaysShort:'søn_man_tir_ons_tor_fre_lør'.split('_'),weekdaysMin:'sø_ma_ti_on_to_fr_lø'.split('_'),longDateFormat:{LT:'HH:mm',LTS:'HH:mm:ss',L:'DD.MM.YYYY',LL:'D. MMMM YYYY',LLL:'D. MMMM YYYY HH:mm',LLLL:'dddd [d.] D. MMMM YYYY [kl.] HH:mm'},calendar:{sameDay:'[i dag kl.] LT',nextDay:'[i morgen kl.] LT',nextWeek:'på dddd [kl.] LT',lastDay:'[i går kl.] LT',lastWeek:'[i] dddd[s kl.] LT',sameElse:'L'},relativeTime:{future:'om %s',past:'%s siden',s:'få sekunder',ss:'%d sekunder',m:'et minut',mm:'%d minutter',h:'en time',hh:'%d timer',d:'en dag',dd:'%d dage',M:'en måned',MM:'%d måneder',y:'et år',yy:'%d år'},dayOfMonthOrdinalParse:/\\d{1,2}\\./,ordinal:'%d.',week:{dow:1,// Monday is the first day of the week.\ndoy:4// The week that contains Jan 4th is the first week of the year.\n}});return da;});/***/},/***/\"0f38\":/***/function f38(module,exports,__webpack_require__){//! moment.js locale configuration\n//! locale : Tagalog (Philippines) [tl-ph]\n//! author : Dan Hagman : https://github.com/hagmandan\n;(function(global,factory){true?factory(__webpack_require__(\"c1df\")):undefined;})(this,function(moment){'use strict';//! moment.js locale configuration\nvar tlPh=moment.defineLocale('tl-ph',{months:'Enero_Pebrero_Marso_Abril_Mayo_Hunyo_Hulyo_Agosto_Setyembre_Oktubre_Nobyembre_Disyembre'.split('_'),monthsShort:'Ene_Peb_Mar_Abr_May_Hun_Hul_Ago_Set_Okt_Nob_Dis'.split('_'),weekdays:'Linggo_Lunes_Martes_Miyerkules_Huwebes_Biyernes_Sabado'.split('_'),weekdaysShort:'Lin_Lun_Mar_Miy_Huw_Biy_Sab'.split('_'),weekdaysMin:'Li_Lu_Ma_Mi_Hu_Bi_Sab'.split('_'),longDateFormat:{LT:'HH:mm',LTS:'HH:mm:ss',L:'MM/D/YYYY',LL:'MMMM D, YYYY',LLL:'MMMM D, YYYY HH:mm',LLLL:'dddd, MMMM DD, YYYY HH:mm'},calendar:{sameDay:'LT [ngayong araw]',nextDay:'[Bukas ng] LT',nextWeek:'LT [sa susunod na] dddd',lastDay:'LT [kahapon]',lastWeek:'LT [noong nakaraang] dddd',sameElse:'L'},relativeTime:{future:'sa loob ng %s',past:'%s ang nakalipas',s:'ilang segundo',ss:'%d segundo',m:'isang minuto',mm:'%d minuto',h:'isang oras',hh:'%d oras',d:'isang araw',dd:'%d araw',M:'isang buwan',MM:'%d buwan',y:'isang taon',yy:'%d taon'},dayOfMonthOrdinalParse:/\\d{1,2}/,ordinal:function ordinal(number){return number;},week:{dow:1,// Monday is the first day of the week.\ndoy:4// The week that contains Jan 4th is the first week of the year.\n}});return tlPh;});/***/},/***/\"0ff2\":/***/function ff2(module,exports,__webpack_require__){//! moment.js locale configuration\n//! locale : Basque [eu]\n//! author : Eneko Illarramendi : https://github.com/eillarra\n;(function(global,factory){true?factory(__webpack_require__(\"c1df\")):undefined;})(this,function(moment){'use strict';//! moment.js locale configuration\nvar eu=moment.defineLocale('eu',{months:'urtarrila_otsaila_martxoa_apirila_maiatza_ekaina_uztaila_abuztua_iraila_urria_azaroa_abendua'.split('_'),monthsShort:'urt._ots._mar._api._mai._eka._uzt._abu._ira._urr._aza._abe.'.split('_'),monthsParseExact:true,weekdays:'igandea_astelehena_asteartea_asteazkena_osteguna_ostirala_larunbata'.split('_'),weekdaysShort:'ig._al._ar._az._og._ol._lr.'.split('_'),weekdaysMin:'ig_al_ar_az_og_ol_lr'.split('_'),weekdaysParseExact:true,longDateFormat:{LT:'HH:mm',LTS:'HH:mm:ss',L:'YYYY-MM-DD',LL:'YYYY[ko] MMMM[ren] D[a]',LLL:'YYYY[ko] MMMM[ren] D[a] HH:mm',LLLL:'dddd, YYYY[ko] MMMM[ren] D[a] HH:mm',l:'YYYY-M-D',ll:'YYYY[ko] MMM D[a]',lll:'YYYY[ko] MMM D[a] HH:mm',llll:'ddd, YYYY[ko] MMM D[a] HH:mm'},calendar:{sameDay:'[gaur] LT[etan]',nextDay:'[bihar] LT[etan]',nextWeek:'dddd LT[etan]',lastDay:'[atzo] LT[etan]',lastWeek:'[aurreko] dddd LT[etan]',sameElse:'L'},relativeTime:{future:'%s barru',past:'duela %s',s:'segundo batzuk',ss:'%d segundo',m:'minutu bat',mm:'%d minutu',h:'ordu bat',hh:'%d ordu',d:'egun bat',dd:'%d egun',M:'hilabete bat',MM:'%d hilabete',y:'urte bat',yy:'%d urte'},dayOfMonthOrdinalParse:/\\d{1,2}\\./,ordinal:'%d.',week:{dow:1,// Monday is the first day of the week.\ndoy:7// The week that contains Jan 7th is the first week of the year.\n}});return eu;});/***/},/***/\"10e8\":/***/function e8(module,exports,__webpack_require__){//! moment.js locale configuration\n//! locale : Thai [th]\n//! author : Kridsada Thanabulpong : https://github.com/sirn\n;(function(global,factory){true?factory(__webpack_require__(\"c1df\")):undefined;})(this,function(moment){'use strict';//! moment.js locale configuration\nvar th=moment.defineLocale('th',{months:'มกราคม_กุมภาพันธ์_มีนาคม_เมษายน_พฤษภาคม_มิถุนายน_กรกฎาคม_สิงหาคม_กันยายน_ตุลาคม_พฤศจิกายน_ธันวาคม'.split('_'),monthsShort:'ม.ค._ก.พ._มี.ค._เม.ย._พ.ค._มิ.ย._ก.ค._ส.ค._ก.ย._ต.ค._พ.ย._ธ.ค.'.split('_'),monthsParseExact:true,weekdays:'อาทิตย์_จันทร์_อังคาร_พุธ_พฤหัสบดี_ศุกร์_เสาร์'.split('_'),weekdaysShort:'อาทิตย์_จันทร์_อังคาร_พุธ_พฤหัส_ศุกร์_เสาร์'.split('_'),// yes, three characters difference\nweekdaysMin:'อา._จ._อ._พ._พฤ._ศ._ส.'.split('_'),weekdaysParseExact:true,longDateFormat:{LT:'H:mm',LTS:'H:mm:ss',L:'DD/MM/YYYY',LL:'D MMMM YYYY',LLL:'D MMMM YYYY เวลา H:mm',LLLL:'วันddddที่ D MMMM YYYY เวลา H:mm'},meridiemParse:/ก่อนเที่ยง|หลังเที่ยง/,isPM:function isPM(input){return input==='หลังเที่ยง';},meridiem:function meridiem(hour,minute,isLower){if(hour<12){return'ก่อนเที่ยง';}else{return'หลังเที่ยง';}},calendar:{sameDay:'[วันนี้ เวลา] LT',nextDay:'[พรุ่งนี้ เวลา] LT',nextWeek:'dddd[หน้า เวลา] LT',lastDay:'[เมื่อวานนี้ เวลา] LT',lastWeek:'[วัน]dddd[ที่แล้ว เวลา] LT',sameElse:'L'},relativeTime:{future:'อีก %s',past:'%sที่แล้ว',s:'ไม่กี่วินาที',ss:'%d วินาที',m:'1 นาที',mm:'%d นาที',h:'1 ชั่วโมง',hh:'%d ชั่วโมง',d:'1 วัน',dd:'%d วัน',M:'1 เดือน',MM:'%d เดือน',y:'1 ปี',yy:'%d ปี'}});return th;});/***/},/***/\"13e9\":/***/function e9(module,exports,__webpack_require__){//! moment.js locale configuration\n//! locale : Serbian Cyrillic [sr-cyrl]\n//! author : Milan Janačković<milanjanackovic@gmail.com> : https://github.com/milan-j\n;(function(global,factory){true?factory(__webpack_require__(\"c1df\")):undefined;})(this,function(moment){'use strict';//! moment.js locale configuration\nvar translator={words:{//Different grammatical cases\nss:['секунда','секунде','секунди'],m:['један минут','једне минуте'],mm:['минут','минуте','минута'],h:['један сат','једног сата'],hh:['сат','сата','сати'],dd:['дан','дана','дана'],MM:['месец','месеца','месеци'],yy:['година','године','година']},correctGrammaticalCase:function correctGrammaticalCase(number,wordKey){return number===1?wordKey[0]:number>=2&&number<=4?wordKey[1]:wordKey[2];},translate:function translate(number,withoutSuffix,key){var wordKey=translator.words[key];if(key.length===1){return withoutSuffix?wordKey[0]:wordKey[1];}else{return number+' '+translator.correctGrammaticalCase(number,wordKey);}}};var srCyrl=moment.defineLocale('sr-cyrl',{months:'јануар_фебруар_март_април_мај_јун_јул_август_септембар_октобар_новембар_децембар'.split('_'),monthsShort:'јан._феб._мар._апр._мај_јун_јул_авг._сеп._окт._нов._дец.'.split('_'),monthsParseExact:true,weekdays:'недеља_понедељак_уторак_среда_четвртак_петак_субота'.split('_'),weekdaysShort:'нед._пон._уто._сре._чет._пет._суб.'.split('_'),weekdaysMin:'не_по_ут_ср_че_пе_су'.split('_'),weekdaysParseExact:true,longDateFormat:{LT:'H:mm',LTS:'H:mm:ss',L:'DD.MM.YYYY',LL:'D. MMMM YYYY',LLL:'D. MMMM YYYY H:mm',LLLL:'dddd, D. MMMM YYYY H:mm'},calendar:{sameDay:'[данас у] LT',nextDay:'[сутра у] LT',nextWeek:function nextWeek(){switch(this.day()){case 0:return'[у] [недељу] [у] LT';case 3:return'[у] [среду] [у] LT';case 6:return'[у] [суботу] [у] LT';case 1:case 2:case 4:case 5:return'[у] dddd [у] LT';}},lastDay:'[јуче у] LT',lastWeek:function lastWeek(){var lastWeekDays=['[прошле] [недеље] [у] LT','[прошлог] [понедељка] [у] LT','[прошлог] [уторка] [у] LT','[прошле] [среде] [у] LT','[прошлог] [четвртка] [у] LT','[прошлог] [петка] [у] LT','[прошле] [суботе] [у] LT'];return lastWeekDays[this.day()];},sameElse:'L'},relativeTime:{future:'за %s',past:'пре %s',s:'неколико секунди',ss:translator.translate,m:translator.translate,mm:translator.translate,h:translator.translate,hh:translator.translate,d:'дан',dd:translator.translate,M:'месец',MM:translator.translate,y:'годину',yy:translator.translate},dayOfMonthOrdinalParse:/\\d{1,2}\\./,ordinal:'%d.',week:{dow:1,// Monday is the first day of the week.\ndoy:7// The week that contains Jan 7th is the first week of the year.\n}});return srCyrl;});/***/},/***/\"167b\":/***/function b(module,exports,__webpack_require__){//! moment.js locale configuration\n//! locale : Occitan, lengadocian dialecte [oc-lnc]\n//! author : Quentin PAGÈS : https://github.com/Quenty31\n;(function(global,factory){true?factory(__webpack_require__(\"c1df\")):undefined;})(this,function(moment){'use strict';//! moment.js locale configuration\nvar ocLnc=moment.defineLocale('oc-lnc',{months:{standalone:'genièr_febrièr_març_abril_mai_junh_julhet_agost_setembre_octòbre_novembre_decembre'.split('_'),format:\"de genièr_de febrièr_de març_d'abril_de mai_de junh_de julhet_d'agost_de setembre_d'octòbre_de novembre_de decembre\".split('_'),isFormat:/D[oD]?(\\s)+MMMM/},monthsShort:'gen._febr._març_abr._mai_junh_julh._ago._set._oct._nov._dec.'.split('_'),monthsParseExact:true,weekdays:'dimenge_diluns_dimars_dimècres_dijòus_divendres_dissabte'.split('_'),weekdaysShort:'dg._dl._dm._dc._dj._dv._ds.'.split('_'),weekdaysMin:'dg_dl_dm_dc_dj_dv_ds'.split('_'),weekdaysParseExact:true,longDateFormat:{LT:'H:mm',LTS:'H:mm:ss',L:'DD/MM/YYYY',LL:'D MMMM [de] YYYY',ll:'D MMM YYYY',LLL:'D MMMM [de] YYYY [a] H:mm',lll:'D MMM YYYY, H:mm',LLLL:'dddd D MMMM [de] YYYY [a] H:mm',llll:'ddd D MMM YYYY, H:mm'},calendar:{sameDay:'[uèi a] LT',nextDay:'[deman a] LT',nextWeek:'dddd [a] LT',lastDay:'[ièr a] LT',lastWeek:'dddd [passat a] LT',sameElse:'L'},relativeTime:{future:\"d'aquí %s\",past:'fa %s',s:'unas segondas',ss:'%d segondas',m:'una minuta',mm:'%d minutas',h:'una ora',hh:'%d oras',d:'un jorn',dd:'%d jorns',M:'un mes',MM:'%d meses',y:'un an',yy:'%d ans'},dayOfMonthOrdinalParse:/\\d{1,2}(r|n|t|è|a)/,ordinal:function ordinal(number,period){var output=number===1?'r':number===2?'n':number===3?'r':number===4?'t':'è';if(period==='w'||period==='W'){output='a';}return number+output;},week:{dow:1,// Monday is the first day of the week.\ndoy:4}});return ocLnc;});/***/},/***/\"1b45\":/***/function b45(module,exports,__webpack_require__){//! moment.js locale configuration\n//! locale : Maltese (Malta) [mt]\n//! author : Alessandro Maruccia : https://github.com/alesma\n;(function(global,factory){true?factory(__webpack_require__(\"c1df\")):undefined;})(this,function(moment){'use strict';//! moment.js locale configuration\nvar mt=moment.defineLocale('mt',{months:'Jannar_Frar_Marzu_April_Mejju_Ġunju_Lulju_Awwissu_Settembru_Ottubru_Novembru_Diċembru'.split('_'),monthsShort:'Jan_Fra_Mar_Apr_Mej_Ġun_Lul_Aww_Set_Ott_Nov_Diċ'.split('_'),weekdays:'Il-Ħadd_It-Tnejn_It-Tlieta_L-Erbgħa_Il-Ħamis_Il-Ġimgħa_Is-Sibt'.split('_'),weekdaysShort:'Ħad_Tne_Tli_Erb_Ħam_Ġim_Sib'.split('_'),weekdaysMin:'Ħa_Tn_Tl_Er_Ħa_Ġi_Si'.split('_'),longDateFormat:{LT:'HH:mm',LTS:'HH:mm:ss',L:'DD/MM/YYYY',LL:'D MMMM YYYY',LLL:'D MMMM YYYY HH:mm',LLLL:'dddd, D MMMM YYYY HH:mm'},calendar:{sameDay:'[Illum fil-]LT',nextDay:'[Għada fil-]LT',nextWeek:'dddd [fil-]LT',lastDay:'[Il-bieraħ fil-]LT',lastWeek:'dddd [li għadda] [fil-]LT',sameElse:'L'},relativeTime:{future:'f’ %s',past:'%s ilu',s:'ftit sekondi',ss:'%d sekondi',m:'minuta',mm:'%d minuti',h:'siegħa',hh:'%d siegħat',d:'ġurnata',dd:'%d ġranet',M:'xahar',MM:'%d xhur',y:'sena',yy:'%d sni'},dayOfMonthOrdinalParse:/\\d{1,2}º/,ordinal:'%dº',week:{dow:1,// Monday is the first day of the week.\ndoy:4// The week that contains Jan 4th is the first week of the year.\n}});return mt;});/***/},/***/\"1cfd\":/***/function cfd(module,exports,__webpack_require__){//! moment.js locale configuration\n//! locale : Arabic (Lybia) [ar-ly]\n//! author : Ali Hmer: https://github.com/kikoanis\n;(function(global,factory){true?factory(__webpack_require__(\"c1df\")):undefined;})(this,function(moment){'use strict';//! moment.js locale configuration\nvar symbolMap={'1':'1','2':'2','3':'3','4':'4','5':'5','6':'6','7':'7','8':'8','9':'9','0':'0'},pluralForm=function pluralForm(n){return n===0?0:n===1?1:n===2?2:n%100>=3&&n%100<=10?3:n%100>=11?4:5;},plurals={s:['أقل من ثانية','ثانية واحدة',['ثانيتان','ثانيتين'],'%d ثوان','%d ثانية','%d ثانية'],m:['أقل من دقيقة','دقيقة واحدة',['دقيقتان','دقيقتين'],'%d دقائق','%d دقيقة','%d دقيقة'],h:['أقل من ساعة','ساعة واحدة',['ساعتان','ساعتين'],'%d ساعات','%d ساعة','%d ساعة'],d:['أقل من يوم','يوم واحد',['يومان','يومين'],'%d أيام','%d يومًا','%d يوم'],M:['أقل من شهر','شهر واحد',['شهران','شهرين'],'%d أشهر','%d شهرا','%d شهر'],y:['أقل من عام','عام واحد',['عامان','عامين'],'%d أعوام','%d عامًا','%d عام']},pluralize=function pluralize(u){return function(number,withoutSuffix,string,isFuture){var f=pluralForm(number),str=plurals[u][pluralForm(number)];if(f===2){str=str[withoutSuffix?0:1];}return str.replace(/%d/i,number);};},months=['يناير','فبراير','مارس','أبريل','مايو','يونيو','يوليو','أغسطس','سبتمبر','أكتوبر','نوفمبر','ديسمبر'];var arLy=moment.defineLocale('ar-ly',{months:months,monthsShort:months,weekdays:'الأحد_الإثنين_الثلاثاء_الأربعاء_الخميس_الجمعة_السبت'.split('_'),weekdaysShort:'أحد_إثنين_ثلاثاء_أربعاء_خميس_جمعة_سبت'.split('_'),weekdaysMin:'ح_ن_ث_ر_خ_ج_س'.split('_'),weekdaysParseExact:true,longDateFormat:{LT:'HH:mm',LTS:'HH:mm:ss',L:\"D/\\u200FM/\\u200FYYYY\",LL:'D MMMM YYYY',LLL:'D MMMM YYYY HH:mm',LLLL:'dddd D MMMM YYYY HH:mm'},meridiemParse:/ص|م/,isPM:function isPM(input){return'م'===input;},meridiem:function meridiem(hour,minute,isLower){if(hour<12){return'ص';}else{return'م';}},calendar:{sameDay:'[اليوم عند الساعة] LT',nextDay:'[غدًا عند الساعة] LT',nextWeek:'dddd [عند الساعة] LT',lastDay:'[أمس عند الساعة] LT',lastWeek:'dddd [عند الساعة] LT',sameElse:'L'},relativeTime:{future:'بعد %s',past:'منذ %s',s:pluralize('s'),ss:pluralize('s'),m:pluralize('m'),mm:pluralize('m'),h:pluralize('h'),hh:pluralize('h'),d:pluralize('d'),dd:pluralize('d'),M:pluralize('M'),MM:pluralize('M'),y:pluralize('y'),yy:pluralize('y')},preparse:function preparse(string){return string.replace(/،/g,',');},postformat:function postformat(string){return string.replace(/\\d/g,function(match){return symbolMap[match];}).replace(/,/g,'،');},week:{dow:6,// Saturday is the first day of the week.\ndoy:12// The week that contains Jan 12th is the first week of the year.\n}});return arLy;});/***/},/***/\"1fc1\":/***/function fc1(module,exports,__webpack_require__){//! moment.js locale configuration\n//! locale : Belarusian [be]\n//! author : Dmitry Demidov : https://github.com/demidov91\n//! author: Praleska: http://praleska.pro/\n//! Author : Menelion Elensúle : https://github.com/Oire\n;(function(global,factory){true?factory(__webpack_require__(\"c1df\")):undefined;})(this,function(moment){'use strict';//! moment.js locale configuration\nfunction plural(word,num){var forms=word.split('_');return num%10===1&&num%100!==11?forms[0]:num%10>=2&&num%10<=4&&(num%100<10||num%100>=20)?forms[1]:forms[2];}function relativeTimeWithPlural(number,withoutSuffix,key){var format={ss:withoutSuffix?'секунда_секунды_секунд':'секунду_секунды_секунд',mm:withoutSuffix?'хвіліна_хвіліны_хвілін':'хвіліну_хвіліны_хвілін',hh:withoutSuffix?'гадзіна_гадзіны_гадзін':'гадзіну_гадзіны_гадзін',dd:'дзень_дні_дзён',MM:'месяц_месяцы_месяцаў',yy:'год_гады_гадоў'};if(key==='m'){return withoutSuffix?'хвіліна':'хвіліну';}else if(key==='h'){return withoutSuffix?'гадзіна':'гадзіну';}else{return number+' '+plural(format[key],+number);}}var be=moment.defineLocale('be',{months:{format:'студзеня_лютага_сакавіка_красавіка_траўня_чэрвеня_ліпеня_жніўня_верасня_кастрычніка_лістапада_снежня'.split('_'),standalone:'студзень_люты_сакавік_красавік_травень_чэрвень_ліпень_жнівень_верасень_кастрычнік_лістапад_снежань'.split('_')},monthsShort:'студ_лют_сак_крас_трав_чэрв_ліп_жнів_вер_каст_ліст_снеж'.split('_'),weekdays:{format:'нядзелю_панядзелак_аўторак_сераду_чацвер_пятніцу_суботу'.split('_'),standalone:'нядзеля_панядзелак_аўторак_серада_чацвер_пятніца_субота'.split('_'),isFormat:/\\[ ?[Ууў] ?(?:мінулую|наступную)? ?\\] ?dddd/},weekdaysShort:'нд_пн_ат_ср_чц_пт_сб'.split('_'),weekdaysMin:'нд_пн_ат_ср_чц_пт_сб'.split('_'),longDateFormat:{LT:'HH:mm',LTS:'HH:mm:ss',L:'DD.MM.YYYY',LL:'D MMMM YYYY г.',LLL:'D MMMM YYYY г., HH:mm',LLLL:'dddd, D MMMM YYYY г., HH:mm'},calendar:{sameDay:'[Сёння ў] LT',nextDay:'[Заўтра ў] LT',lastDay:'[Учора ў] LT',nextWeek:function nextWeek(){return'[У] dddd [ў] LT';},lastWeek:function lastWeek(){switch(this.day()){case 0:case 3:case 5:case 6:return'[У мінулую] dddd [ў] LT';case 1:case 2:case 4:return'[У мінулы] dddd [ў] LT';}},sameElse:'L'},relativeTime:{future:'праз %s',past:'%s таму',s:'некалькі секунд',m:relativeTimeWithPlural,mm:relativeTimeWithPlural,h:relativeTimeWithPlural,hh:relativeTimeWithPlural,d:'дзень',dd:relativeTimeWithPlural,M:'месяц',MM:relativeTimeWithPlural,y:'год',yy:relativeTimeWithPlural},meridiemParse:/ночы|раніцы|дня|вечара/,isPM:function isPM(input){return /^(дня|вечара)$/.test(input);},meridiem:function meridiem(hour,minute,isLower){if(hour<4){return'ночы';}else if(hour<12){return'раніцы';}else if(hour<17){return'дня';}else{return'вечара';}},dayOfMonthOrdinalParse:/\\d{1,2}-(і|ы|га)/,ordinal:function ordinal(number,period){switch(period){case'M':case'd':case'DDD':case'w':case'W':return(number%10===2||number%10===3)&&number%100!==12&&number%100!==13?number+'-і':number+'-ы';case'D':return number+'-га';default:return number;}},week:{dow:1,// Monday is the first day of the week.\ndoy:7// The week that contains Jan 7th is the first week of the year.\n}});return be;});/***/},/***/\"201b\":/***/function b(module,exports,__webpack_require__){//! moment.js locale configuration\n//! locale : Georgian [ka]\n//! author : Irakli Janiashvili : https://github.com/IrakliJani\n;(function(global,factory){true?factory(__webpack_require__(\"c1df\")):undefined;})(this,function(moment){'use strict';//! moment.js locale configuration\nvar ka=moment.defineLocale('ka',{months:'იანვარი_თებერვალი_მარტი_აპრილი_მაისი_ივნისი_ივლისი_აგვისტო_სექტემბერი_ოქტომბერი_ნოემბერი_დეკემბერი'.split('_'),monthsShort:'იან_თებ_მარ_აპრ_მაი_ივნ_ივლ_აგვ_სექ_ოქტ_ნოე_დეკ'.split('_'),weekdays:{standalone:'კვირა_ორშაბათი_სამშაბათი_ოთხშაბათი_ხუთშაბათი_პარასკევი_შაბათი'.split('_'),format:'კვირას_ორშაბათს_სამშაბათს_ოთხშაბათს_ხუთშაბათს_პარასკევს_შაბათს'.split('_'),isFormat:/(წინა|შემდეგ)/},weekdaysShort:'კვი_ორშ_სამ_ოთხ_ხუთ_პარ_შაბ'.split('_'),weekdaysMin:'კვ_ორ_სა_ოთ_ხუ_პა_შა'.split('_'),longDateFormat:{LT:'HH:mm',LTS:'HH:mm:ss',L:'DD/MM/YYYY',LL:'D MMMM YYYY',LLL:'D MMMM YYYY HH:mm',LLLL:'dddd, D MMMM YYYY HH:mm'},calendar:{sameDay:'[დღეს] LT[-ზე]',nextDay:'[ხვალ] LT[-ზე]',lastDay:'[გუშინ] LT[-ზე]',nextWeek:'[შემდეგ] dddd LT[-ზე]',lastWeek:'[წინა] dddd LT-ზე',sameElse:'L'},relativeTime:{future:function future(s){return s.replace(/(წამ|წუთ|საათ|წელ|დღ|თვ)(ი|ე)/,function($0,$1,$2){return $2==='ი'?$1+'ში':$1+$2+'ში';});},past:function past(s){if(/(წამი|წუთი|საათი|დღე|თვე)/.test(s)){return s.replace(/(ი|ე)$/,'ის წინ');}if(/წელი/.test(s)){return s.replace(/წელი$/,'წლის წინ');}return s;},s:'რამდენიმე წამი',ss:'%d წამი',m:'წუთი',mm:'%d წუთი',h:'საათი',hh:'%d საათი',d:'დღე',dd:'%d დღე',M:'თვე',MM:'%d თვე',y:'წელი',yy:'%d წელი'},dayOfMonthOrdinalParse:/0|1-ლი|მე-\\d{1,2}|\\d{1,2}-ე/,ordinal:function ordinal(number){if(number===0){return number;}if(number===1){return number+'-ლი';}if(number<20||number<=100&&number%20===0||number%100===0){return'მე-'+number;}return number+'-ე';},week:{dow:1,doy:7}});return ka;});/***/},/***/\"22f8\":/***/function f8(module,exports,__webpack_require__){//! moment.js locale configuration\n//! locale : Korean [ko]\n//! author : Kyungwook, Park : https://github.com/kyungw00k\n//! author : Jeeeyul Lee <jeeeyul@gmail.com>\n;(function(global,factory){true?factory(__webpack_require__(\"c1df\")):undefined;})(this,function(moment){'use strict';//! moment.js locale configuration\nvar ko=moment.defineLocale('ko',{months:'1월_2월_3월_4월_5월_6월_7월_8월_9월_10월_11월_12월'.split('_'),monthsShort:'1월_2월_3월_4월_5월_6월_7월_8월_9월_10월_11월_12월'.split('_'),weekdays:'일요일_월요일_화요일_수요일_목요일_금요일_토요일'.split('_'),weekdaysShort:'일_월_화_수_목_금_토'.split('_'),weekdaysMin:'일_월_화_수_목_금_토'.split('_'),longDateFormat:{LT:'A h:mm',LTS:'A h:mm:ss',L:'YYYY.MM.DD.',LL:'YYYY년 MMMM D일',LLL:'YYYY년 MMMM D일 A h:mm',LLLL:'YYYY년 MMMM D일 dddd A h:mm',l:'YYYY.MM.DD.',ll:'YYYY년 MMMM D일',lll:'YYYY년 MMMM D일 A h:mm',llll:'YYYY년 MMMM D일 dddd A h:mm'},calendar:{sameDay:'오늘 LT',nextDay:'내일 LT',nextWeek:'dddd LT',lastDay:'어제 LT',lastWeek:'지난주 dddd LT',sameElse:'L'},relativeTime:{future:'%s 후',past:'%s 전',s:'몇 초',ss:'%d초',m:'1분',mm:'%d분',h:'한 시간',hh:'%d시간',d:'하루',dd:'%d일',M:'한 달',MM:'%d달',y:'일 년',yy:'%d년'},dayOfMonthOrdinalParse:/\\d{1,2}(일|월|주)/,ordinal:function ordinal(number,period){switch(period){case'd':case'D':case'DDD':return number+'일';case'M':return number+'월';case'w':case'W':return number+'주';default:return number;}},meridiemParse:/오전|오후/,isPM:function isPM(token){return token==='오후';},meridiem:function meridiem(hour,minute,isUpper){return hour<12?'오전':'오후';}});return ko;});/***/},/***/\"2421\":/***/function _(module,exports,__webpack_require__){//! moment.js locale configuration\n//! locale : Kurdish [ku]\n//! author : Shahram Mebashar : https://github.com/ShahramMebashar\n;(function(global,factory){true?factory(__webpack_require__(\"c1df\")):undefined;})(this,function(moment){'use strict';//! moment.js locale configuration\nvar symbolMap={'1':'١','2':'٢','3':'٣','4':'٤','5':'٥','6':'٦','7':'٧','8':'٨','9':'٩','0':'٠'},numberMap={'١':'1','٢':'2','٣':'3','٤':'4','٥':'5','٦':'6','٧':'7','٨':'8','٩':'9','٠':'0'},months=['کانونی دووەم','شوبات','ئازار','نیسان','ئایار','حوزەیران','تەمموز','ئاب','ئەیلوول','تشرینی یەكەم','تشرینی دووەم','كانونی یەکەم'];var ku=moment.defineLocale('ku',{months:months,monthsShort:months,weekdays:'یه‌كشه‌ممه‌_دووشه‌ممه‌_سێشه‌ممه‌_چوارشه‌ممه‌_پێنجشه‌ممه‌_هه‌ینی_شه‌ممه‌'.split('_'),weekdaysShort:'یه‌كشه‌م_دووشه‌م_سێشه‌م_چوارشه‌م_پێنجشه‌م_هه‌ینی_شه‌ممه‌'.split('_'),weekdaysMin:'ی_د_س_چ_پ_ه_ش'.split('_'),weekdaysParseExact:true,longDateFormat:{LT:'HH:mm',LTS:'HH:mm:ss',L:'DD/MM/YYYY',LL:'D MMMM YYYY',LLL:'D MMMM YYYY HH:mm',LLLL:'dddd, D MMMM YYYY HH:mm'},meridiemParse:/ئێواره‌|به‌یانی/,isPM:function isPM(input){return /ئێواره‌/.test(input);},meridiem:function meridiem(hour,minute,isLower){if(hour<12){return'به‌یانی';}else{return'ئێواره‌';}},calendar:{sameDay:'[ئه‌مرۆ كاتژمێر] LT',nextDay:'[به‌یانی كاتژمێر] LT',nextWeek:'dddd [كاتژمێر] LT',lastDay:'[دوێنێ كاتژمێر] LT',lastWeek:'dddd [كاتژمێر] LT',sameElse:'L'},relativeTime:{future:'له‌ %s',past:'%s',s:'چه‌ند چركه‌یه‌ك',ss:'چركه‌ %d',m:'یه‌ك خوله‌ك',mm:'%d خوله‌ك',h:'یه‌ك كاتژمێر',hh:'%d كاتژمێر',d:'یه‌ك ڕۆژ',dd:'%d ڕۆژ',M:'یه‌ك مانگ',MM:'%d مانگ',y:'یه‌ك ساڵ',yy:'%d ساڵ'},preparse:function preparse(string){return string.replace(/[١٢٣٤٥٦٧٨٩٠]/g,function(match){return numberMap[match];}).replace(/،/g,',');},postformat:function postformat(string){return string.replace(/\\d/g,function(match){return symbolMap[match];}).replace(/,/g,'،');},week:{dow:6,// Saturday is the first day of the week.\ndoy:12// The week that contains Jan 12th is the first week of the year.\n}});return ku;});/***/},/***/\"24fb\":/***/function fb(module,exports,__webpack_require__){\"use strict\";/*\n  MIT License http://www.opensource.org/licenses/mit-license.php\n  Author Tobias Koppers @sokra\n*/ // css base code, injected by the css-loader\n// eslint-disable-next-line func-names\nmodule.exports=function(useSourceMap){var list=[];// return the list of modules as css string\nlist.toString=function toString(){return this.map(function(item){var content=cssWithMappingToString(item,useSourceMap);if(item[2]){return\"@media \".concat(item[2],\" {\").concat(content,\"}\");}return content;}).join('');};// import a list of modules into the list\n// eslint-disable-next-line func-names\nlist.i=function(modules,mediaQuery,dedupe){if(typeof modules==='string'){// eslint-disable-next-line no-param-reassign\nmodules=[[null,modules,'']];}var alreadyImportedModules={};if(dedupe){for(var i=0;i<this.length;i++){// eslint-disable-next-line prefer-destructuring\nvar id=this[i][0];if(id!=null){alreadyImportedModules[id]=true;}}}for(var _i=0;_i<modules.length;_i++){var item=[].concat(modules[_i]);if(dedupe&&alreadyImportedModules[item[0]]){// eslint-disable-next-line no-continue\ncontinue;}if(mediaQuery){if(!item[2]){item[2]=mediaQuery;}else{item[2]=\"\".concat(mediaQuery,\" and \").concat(item[2]);}}list.push(item);}};return list;};function cssWithMappingToString(item,useSourceMap){var content=item[1]||'';// eslint-disable-next-line prefer-destructuring\nvar cssMapping=item[3];if(!cssMapping){return content;}if(useSourceMap&&typeof btoa==='function'){var sourceMapping=toComment(cssMapping);var sourceURLs=cssMapping.sources.map(function(source){return\"/*# sourceURL=\".concat(cssMapping.sourceRoot||'').concat(source,\" */\");});return[content].concat(sourceURLs).concat([sourceMapping]).join('\\n');}return[content].join('\\n');}// Adapted from convert-source-map (MIT)\nfunction toComment(sourceMap){// eslint-disable-next-line no-undef\nvar base64=btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap))));var data=\"sourceMappingURL=data:application/json;charset=utf-8;base64,\".concat(base64);return\"/*# \".concat(data,\" */\");}/***/},/***/\"2554\":/***/function _(module,exports,__webpack_require__){//! moment.js locale configuration\n//! locale : Bosnian [bs]\n//! author : Nedim Cholich : https://github.com/frontyard\n//! based on (hr) translation by Bojan Marković\n;(function(global,factory){true?factory(__webpack_require__(\"c1df\")):undefined;})(this,function(moment){'use strict';//! moment.js locale configuration\nfunction translate(number,withoutSuffix,key){var result=number+' ';switch(key){case'ss':if(number===1){result+='sekunda';}else if(number===2||number===3||number===4){result+='sekunde';}else{result+='sekundi';}return result;case'm':return withoutSuffix?'jedna minuta':'jedne minute';case'mm':if(number===1){result+='minuta';}else if(number===2||number===3||number===4){result+='minute';}else{result+='minuta';}return result;case'h':return withoutSuffix?'jedan sat':'jednog sata';case'hh':if(number===1){result+='sat';}else if(number===2||number===3||number===4){result+='sata';}else{result+='sati';}return result;case'dd':if(number===1){result+='dan';}else{result+='dana';}return result;case'MM':if(number===1){result+='mjesec';}else if(number===2||number===3||number===4){result+='mjeseca';}else{result+='mjeseci';}return result;case'yy':if(number===1){result+='godina';}else if(number===2||number===3||number===4){result+='godine';}else{result+='godina';}return result;}}var bs=moment.defineLocale('bs',{months:'januar_februar_mart_april_maj_juni_juli_august_septembar_oktobar_novembar_decembar'.split('_'),monthsShort:'jan._feb._mar._apr._maj._jun._jul._aug._sep._okt._nov._dec.'.split('_'),monthsParseExact:true,weekdays:'nedjelja_ponedjeljak_utorak_srijeda_četvrtak_petak_subota'.split('_'),weekdaysShort:'ned._pon._uto._sri._čet._pet._sub.'.split('_'),weekdaysMin:'ne_po_ut_sr_če_pe_su'.split('_'),weekdaysParseExact:true,longDateFormat:{LT:'H:mm',LTS:'H:mm:ss',L:'DD.MM.YYYY',LL:'D. MMMM YYYY',LLL:'D. MMMM YYYY H:mm',LLLL:'dddd, D. MMMM YYYY H:mm'},calendar:{sameDay:'[danas u] LT',nextDay:'[sutra u] LT',nextWeek:function nextWeek(){switch(this.day()){case 0:return'[u] [nedjelju] [u] LT';case 3:return'[u] [srijedu] [u] LT';case 6:return'[u] [subotu] [u] LT';case 1:case 2:case 4:case 5:return'[u] dddd [u] LT';}},lastDay:'[jučer u] LT',lastWeek:function lastWeek(){switch(this.day()){case 0:case 3:return'[prošlu] dddd [u] LT';case 6:return'[prošle] [subote] [u] LT';case 1:case 2:case 4:case 5:return'[prošli] dddd [u] LT';}},sameElse:'L'},relativeTime:{future:'za %s',past:'prije %s',s:'par sekundi',ss:translate,m:translate,mm:translate,h:translate,hh:translate,d:'dan',dd:translate,M:'mjesec',MM:translate,y:'godinu',yy:translate},dayOfMonthOrdinalParse:/\\d{1,2}\\./,ordinal:'%d.',week:{dow:1,// Monday is the first day of the week.\ndoy:7// The week that contains Jan 7th is the first week of the year.\n}});return bs;});/***/},/***/\"26f9\":/***/function f9(module,exports,__webpack_require__){//! moment.js locale configuration\n//! locale : Lithuanian [lt]\n//! author : Mindaugas Mozūras : https://github.com/mmozuras\n;(function(global,factory){true?factory(__webpack_require__(\"c1df\")):undefined;})(this,function(moment){'use strict';//! moment.js locale configuration\nvar units={ss:'sekundė_sekundžių_sekundes',m:'minutė_minutės_minutę',mm:'minutės_minučių_minutes',h:'valanda_valandos_valandą',hh:'valandos_valandų_valandas',d:'diena_dienos_dieną',dd:'dienos_dienų_dienas',M:'mėnuo_mėnesio_mėnesį',MM:'mėnesiai_mėnesių_mėnesius',y:'metai_metų_metus',yy:'metai_metų_metus'};function translateSeconds(number,withoutSuffix,key,isFuture){if(withoutSuffix){return'kelios sekundės';}else{return isFuture?'kelių sekundžių':'kelias sekundes';}}function translateSingular(number,withoutSuffix,key,isFuture){return withoutSuffix?forms(key)[0]:isFuture?forms(key)[1]:forms(key)[2];}function special(number){return number%10===0||number>10&&number<20;}function forms(key){return units[key].split('_');}function translate(number,withoutSuffix,key,isFuture){var result=number+' ';if(number===1){return result+translateSingular(number,withoutSuffix,key[0],isFuture);}else if(withoutSuffix){return result+(special(number)?forms(key)[1]:forms(key)[0]);}else{if(isFuture){return result+forms(key)[1];}else{return result+(special(number)?forms(key)[1]:forms(key)[2]);}}}var lt=moment.defineLocale('lt',{months:{format:'sausio_vasario_kovo_balandžio_gegužės_birželio_liepos_rugpjūčio_rugsėjo_spalio_lapkričio_gruodžio'.split('_'),standalone:'sausis_vasaris_kovas_balandis_gegužė_birželis_liepa_rugpjūtis_rugsėjis_spalis_lapkritis_gruodis'.split('_'),isFormat:/D[oD]?(\\[[^\\[\\]]*\\]|\\s)+MMMM?|MMMM?(\\[[^\\[\\]]*\\]|\\s)+D[oD]?/},monthsShort:'sau_vas_kov_bal_geg_bir_lie_rgp_rgs_spa_lap_grd'.split('_'),weekdays:{format:'sekmadienį_pirmadienį_antradienį_trečiadienį_ketvirtadienį_penktadienį_šeštadienį'.split('_'),standalone:'sekmadienis_pirmadienis_antradienis_trečiadienis_ketvirtadienis_penktadienis_šeštadienis'.split('_'),isFormat:/dddd HH:mm/},weekdaysShort:'Sek_Pir_Ant_Tre_Ket_Pen_Šeš'.split('_'),weekdaysMin:'S_P_A_T_K_Pn_Š'.split('_'),weekdaysParseExact:true,longDateFormat:{LT:'HH:mm',LTS:'HH:mm:ss',L:'YYYY-MM-DD',LL:'YYYY [m.] MMMM D [d.]',LLL:'YYYY [m.] MMMM D [d.], HH:mm [val.]',LLLL:'YYYY [m.] MMMM D [d.], dddd, HH:mm [val.]',l:'YYYY-MM-DD',ll:'YYYY [m.] MMMM D [d.]',lll:'YYYY [m.] MMMM D [d.], HH:mm [val.]',llll:'YYYY [m.] MMMM D [d.], ddd, HH:mm [val.]'},calendar:{sameDay:'[Šiandien] LT',nextDay:'[Rytoj] LT',nextWeek:'dddd LT',lastDay:'[Vakar] LT',lastWeek:'[Praėjusį] dddd LT',sameElse:'L'},relativeTime:{future:'po %s',past:'prieš %s',s:translateSeconds,ss:translate,m:translateSingular,mm:translate,h:translateSingular,hh:translate,d:translateSingular,dd:translate,M:translateSingular,MM:translate,y:translateSingular,yy:translate},dayOfMonthOrdinalParse:/\\d{1,2}-oji/,ordinal:function ordinal(number){return number+'-oji';},week:{dow:1,// Monday is the first day of the week.\ndoy:4// The week that contains Jan 4th is the first week of the year.\n}});return lt;});/***/},/***/\"2921\":/***/function _(module,exports,__webpack_require__){//! moment.js locale configuration\n//! locale : Vietnamese [vi]\n//! author : Bang Nguyen : https://github.com/bangnk\n//! author : Chien Kira : https://github.com/chienkira\n;(function(global,factory){true?factory(__webpack_require__(\"c1df\")):undefined;})(this,function(moment){'use strict';//! moment.js locale configuration\nvar vi=moment.defineLocale('vi',{months:'tháng 1_tháng 2_tháng 3_tháng 4_tháng 5_tháng 6_tháng 7_tháng 8_tháng 9_tháng 10_tháng 11_tháng 12'.split('_'),monthsShort:'Thg 01_Thg 02_Thg 03_Thg 04_Thg 05_Thg 06_Thg 07_Thg 08_Thg 09_Thg 10_Thg 11_Thg 12'.split('_'),monthsParseExact:true,weekdays:'chủ nhật_thứ hai_thứ ba_thứ tư_thứ năm_thứ sáu_thứ bảy'.split('_'),weekdaysShort:'CN_T2_T3_T4_T5_T6_T7'.split('_'),weekdaysMin:'CN_T2_T3_T4_T5_T6_T7'.split('_'),weekdaysParseExact:true,meridiemParse:/sa|ch/i,isPM:function isPM(input){return /^ch$/i.test(input);},meridiem:function meridiem(hours,minutes,isLower){if(hours<12){return isLower?'sa':'SA';}else{return isLower?'ch':'CH';}},longDateFormat:{LT:'HH:mm',LTS:'HH:mm:ss',L:'DD/MM/YYYY',LL:'D MMMM [năm] YYYY',LLL:'D MMMM [năm] YYYY HH:mm',LLLL:'dddd, D MMMM [năm] YYYY HH:mm',l:'DD/M/YYYY',ll:'D MMM YYYY',lll:'D MMM YYYY HH:mm',llll:'ddd, D MMM YYYY HH:mm'},calendar:{sameDay:'[Hôm nay lúc] LT',nextDay:'[Ngày mai lúc] LT',nextWeek:'dddd [tuần tới lúc] LT',lastDay:'[Hôm qua lúc] LT',lastWeek:'dddd [tuần trước lúc] LT',sameElse:'L'},relativeTime:{future:'%s tới',past:'%s trước',s:'vài giây',ss:'%d giây',m:'một phút',mm:'%d phút',h:'một giờ',hh:'%d giờ',d:'một ngày',dd:'%d ngày',M:'một tháng',MM:'%d tháng',y:'một năm',yy:'%d năm'},dayOfMonthOrdinalParse:/\\d{1,2}/,ordinal:function ordinal(number){return number;},week:{dow:1,// Monday is the first day of the week.\ndoy:4// The week that contains Jan 4th is the first week of the year.\n}});return vi;});/***/},/***/\"293c\":/***/function c(module,exports,__webpack_require__){//! moment.js locale configuration\n//! locale : Montenegrin [me]\n//! author : Miodrag Nikač <miodrag@restartit.me> : https://github.com/miodragnikac\n;(function(global,factory){true?factory(__webpack_require__(\"c1df\")):undefined;})(this,function(moment){'use strict';//! moment.js locale configuration\nvar translator={words:{//Different grammatical cases\nss:['sekund','sekunda','sekundi'],m:['jedan minut','jednog minuta'],mm:['minut','minuta','minuta'],h:['jedan sat','jednog sata'],hh:['sat','sata','sati'],dd:['dan','dana','dana'],MM:['mjesec','mjeseca','mjeseci'],yy:['godina','godine','godina']},correctGrammaticalCase:function correctGrammaticalCase(number,wordKey){return number===1?wordKey[0]:number>=2&&number<=4?wordKey[1]:wordKey[2];},translate:function translate(number,withoutSuffix,key){var wordKey=translator.words[key];if(key.length===1){return withoutSuffix?wordKey[0]:wordKey[1];}else{return number+' '+translator.correctGrammaticalCase(number,wordKey);}}};var me=moment.defineLocale('me',{months:'januar_februar_mart_april_maj_jun_jul_avgust_septembar_oktobar_novembar_decembar'.split('_'),monthsShort:'jan._feb._mar._apr._maj_jun_jul_avg._sep._okt._nov._dec.'.split('_'),monthsParseExact:true,weekdays:'nedjelja_ponedjeljak_utorak_srijeda_četvrtak_petak_subota'.split('_'),weekdaysShort:'ned._pon._uto._sri._čet._pet._sub.'.split('_'),weekdaysMin:'ne_po_ut_sr_če_pe_su'.split('_'),weekdaysParseExact:true,longDateFormat:{LT:'H:mm',LTS:'H:mm:ss',L:'DD.MM.YYYY',LL:'D. MMMM YYYY',LLL:'D. MMMM YYYY H:mm',LLLL:'dddd, D. MMMM YYYY H:mm'},calendar:{sameDay:'[danas u] LT',nextDay:'[sjutra u] LT',nextWeek:function nextWeek(){switch(this.day()){case 0:return'[u] [nedjelju] [u] LT';case 3:return'[u] [srijedu] [u] LT';case 6:return'[u] [subotu] [u] LT';case 1:case 2:case 4:case 5:return'[u] dddd [u] LT';}},lastDay:'[juče u] LT',lastWeek:function lastWeek(){var lastWeekDays=['[prošle] [nedjelje] [u] LT','[prošlog] [ponedjeljka] [u] LT','[prošlog] [utorka] [u] LT','[prošle] [srijede] [u] LT','[prošlog] [četvrtka] [u] LT','[prošlog] [petka] [u] LT','[prošle] [subote] [u] LT'];return lastWeekDays[this.day()];},sameElse:'L'},relativeTime:{future:'za %s',past:'prije %s',s:'nekoliko sekundi',ss:translator.translate,m:translator.translate,mm:translator.translate,h:translator.translate,hh:translator.translate,d:'dan',dd:translator.translate,M:'mjesec',MM:translator.translate,y:'godinu',yy:translator.translate},dayOfMonthOrdinalParse:/\\d{1,2}\\./,ordinal:'%d.',week:{dow:1,// Monday is the first day of the week.\ndoy:7// The week that contains Jan 7th is the first week of the year.\n}});return me;});/***/},/***/\"2bfb\":/***/function bfb(module,exports,__webpack_require__){//! moment.js locale configuration\n//! locale : Afrikaans [af]\n//! author : Werner Mollentze : https://github.com/wernerm\n;(function(global,factory){true?factory(__webpack_require__(\"c1df\")):undefined;})(this,function(moment){'use strict';//! moment.js locale configuration\nvar af=moment.defineLocale('af',{months:'Januarie_Februarie_Maart_April_Mei_Junie_Julie_Augustus_September_Oktober_November_Desember'.split('_'),monthsShort:'Jan_Feb_Mrt_Apr_Mei_Jun_Jul_Aug_Sep_Okt_Nov_Des'.split('_'),weekdays:'Sondag_Maandag_Dinsdag_Woensdag_Donderdag_Vrydag_Saterdag'.split('_'),weekdaysShort:'Son_Maa_Din_Woe_Don_Vry_Sat'.split('_'),weekdaysMin:'So_Ma_Di_Wo_Do_Vr_Sa'.split('_'),meridiemParse:/vm|nm/i,isPM:function isPM(input){return /^nm$/i.test(input);},meridiem:function meridiem(hours,minutes,isLower){if(hours<12){return isLower?'vm':'VM';}else{return isLower?'nm':'NM';}},longDateFormat:{LT:'HH:mm',LTS:'HH:mm:ss',L:'DD/MM/YYYY',LL:'D MMMM YYYY',LLL:'D MMMM YYYY HH:mm',LLLL:'dddd, D MMMM YYYY HH:mm'},calendar:{sameDay:'[Vandag om] LT',nextDay:'[Môre om] LT',nextWeek:'dddd [om] LT',lastDay:'[Gister om] LT',lastWeek:'[Laas] dddd [om] LT',sameElse:'L'},relativeTime:{future:'oor %s',past:'%s gelede',s:\"'n paar sekondes\",ss:'%d sekondes',m:\"'n minuut\",mm:'%d minute',h:\"'n uur\",hh:'%d ure',d:\"'n dag\",dd:'%d dae',M:\"'n maand\",MM:'%d maande',y:\"'n jaar\",yy:'%d jaar'},dayOfMonthOrdinalParse:/\\d{1,2}(ste|de)/,ordinal:function ordinal(number){return number+(number===1||number===8||number>=20?'ste':'de');// Thanks to Joris Röling : https://github.com/jjupiter\n},week:{dow:1,// Maandag is die eerste dag van die week.\ndoy:4// Die week wat die 4de Januarie bevat is die eerste week van die jaar.\n}});return af;});/***/},/***/\"2e8c\":/***/function e8c(module,exports,__webpack_require__){//! moment.js locale configuration\n//! locale : Uzbek [uz]\n//! author : Sardor Muminov : https://github.com/muminoff\n;(function(global,factory){true?factory(__webpack_require__(\"c1df\")):undefined;})(this,function(moment){'use strict';//! moment.js locale configuration\nvar uz=moment.defineLocale('uz',{months:'январ_феврал_март_апрел_май_июн_июл_август_сентябр_октябр_ноябр_декабр'.split('_'),monthsShort:'янв_фев_мар_апр_май_июн_июл_авг_сен_окт_ноя_дек'.split('_'),weekdays:'Якшанба_Душанба_Сешанба_Чоршанба_Пайшанба_Жума_Шанба'.split('_'),weekdaysShort:'Якш_Душ_Сеш_Чор_Пай_Жум_Шан'.split('_'),weekdaysMin:'Як_Ду_Се_Чо_Па_Жу_Ша'.split('_'),longDateFormat:{LT:'HH:mm',LTS:'HH:mm:ss',L:'DD/MM/YYYY',LL:'D MMMM YYYY',LLL:'D MMMM YYYY HH:mm',LLLL:'D MMMM YYYY, dddd HH:mm'},calendar:{sameDay:'[Бугун соат] LT [да]',nextDay:'[Эртага] LT [да]',nextWeek:'dddd [куни соат] LT [да]',lastDay:'[Кеча соат] LT [да]',lastWeek:'[Утган] dddd [куни соат] LT [да]',sameElse:'L'},relativeTime:{future:'Якин %s ичида',past:'Бир неча %s олдин',s:'фурсат',ss:'%d фурсат',m:'бир дакика',mm:'%d дакика',h:'бир соат',hh:'%d соат',d:'бир кун',dd:'%d кун',M:'бир ой',MM:'%d ой',y:'бир йил',yy:'%d йил'},week:{dow:1,// Monday is the first day of the week.\ndoy:7// The week that contains Jan 4th is the first week of the year.\n}});return uz;});/***/},/***/\"30ef\":/***/function ef(module,exports,__webpack_require__){/*!\n * Chart.js v2.9.3\n * https://www.chartjs.org\n * (c) 2019 Chart.js Contributors\n * Released under the MIT License\n */(function(global,factory){true?module.exports=factory(function(){try{return __webpack_require__(\"c1df\");}catch(e){}}()):undefined;})(this,function(moment){'use strict';moment=moment&&moment.hasOwnProperty('default')?moment['default']:moment;function createCommonjsModule(fn,module){return module={exports:{}},fn(module,module.exports),module.exports;}function getCjsExportFromNamespace(n){return n&&n['default']||n;}var colorName={\"aliceblue\":[240,248,255],\"antiquewhite\":[250,235,215],\"aqua\":[0,255,255],\"aquamarine\":[127,255,212],\"azure\":[240,255,255],\"beige\":[245,245,220],\"bisque\":[255,228,196],\"black\":[0,0,0],\"blanchedalmond\":[255,235,205],\"blue\":[0,0,255],\"blueviolet\":[138,43,226],\"brown\":[165,42,42],\"burlywood\":[222,184,135],\"cadetblue\":[95,158,160],\"chartreuse\":[127,255,0],\"chocolate\":[210,105,30],\"coral\":[255,127,80],\"cornflowerblue\":[100,149,237],\"cornsilk\":[255,248,220],\"crimson\":[220,20,60],\"cyan\":[0,255,255],\"darkblue\":[0,0,139],\"darkcyan\":[0,139,139],\"darkgoldenrod\":[184,134,11],\"darkgray\":[169,169,169],\"darkgreen\":[0,100,0],\"darkgrey\":[169,169,169],\"darkkhaki\":[189,183,107],\"darkmagenta\":[139,0,139],\"darkolivegreen\":[85,107,47],\"darkorange\":[255,140,0],\"darkorchid\":[153,50,204],\"darkred\":[139,0,0],\"darksalmon\":[233,150,122],\"darkseagreen\":[143,188,143],\"darkslateblue\":[72,61,139],\"darkslategray\":[47,79,79],\"darkslategrey\":[47,79,79],\"darkturquoise\":[0,206,209],\"darkviolet\":[148,0,211],\"deeppink\":[255,20,147],\"deepskyblue\":[0,191,255],\"dimgray\":[105,105,105],\"dimgrey\":[105,105,105],\"dodgerblue\":[30,144,255],\"firebrick\":[178,34,34],\"floralwhite\":[255,250,240],\"forestgreen\":[34,139,34],\"fuchsia\":[255,0,255],\"gainsboro\":[220,220,220],\"ghostwhite\":[248,248,255],\"gold\":[255,215,0],\"goldenrod\":[218,165,32],\"gray\":[128,128,128],\"green\":[0,128,0],\"greenyellow\":[173,255,47],\"grey\":[128,128,128],\"honeydew\":[240,255,240],\"hotpink\":[255,105,180],\"indianred\":[205,92,92],\"indigo\":[75,0,130],\"ivory\":[255,255,240],\"khaki\":[240,230,140],\"lavender\":[230,230,250],\"lavenderblush\":[255,240,245],\"lawngreen\":[124,252,0],\"lemonchiffon\":[255,250,205],\"lightblue\":[173,216,230],\"lightcoral\":[240,128,128],\"lightcyan\":[224,255,255],\"lightgoldenrodyellow\":[250,250,210],\"lightgray\":[211,211,211],\"lightgreen\":[144,238,144],\"lightgrey\":[211,211,211],\"lightpink\":[255,182,193],\"lightsalmon\":[255,160,122],\"lightseagreen\":[32,178,170],\"lightskyblue\":[135,206,250],\"lightslategray\":[119,136,153],\"lightslategrey\":[119,136,153],\"lightsteelblue\":[176,196,222],\"lightyellow\":[255,255,224],\"lime\":[0,255,0],\"limegreen\":[50,205,50],\"linen\":[250,240,230],\"magenta\":[255,0,255],\"maroon\":[128,0,0],\"mediumaquamarine\":[102,205,170],\"mediumblue\":[0,0,205],\"mediumorchid\":[186,85,211],\"mediumpurple\":[147,112,219],\"mediumseagreen\":[60,179,113],\"mediumslateblue\":[123,104,238],\"mediumspringgreen\":[0,250,154],\"mediumturquoise\":[72,209,204],\"mediumvioletred\":[199,21,133],\"midnightblue\":[25,25,112],\"mintcream\":[245,255,250],\"mistyrose\":[255,228,225],\"moccasin\":[255,228,181],\"navajowhite\":[255,222,173],\"navy\":[0,0,128],\"oldlace\":[253,245,230],\"olive\":[128,128,0],\"olivedrab\":[107,142,35],\"orange\":[255,165,0],\"orangered\":[255,69,0],\"orchid\":[218,112,214],\"palegoldenrod\":[238,232,170],\"palegreen\":[152,251,152],\"paleturquoise\":[175,238,238],\"palevioletred\":[219,112,147],\"papayawhip\":[255,239,213],\"peachpuff\":[255,218,185],\"peru\":[205,133,63],\"pink\":[255,192,203],\"plum\":[221,160,221],\"powderblue\":[176,224,230],\"purple\":[128,0,128],\"rebeccapurple\":[102,51,153],\"red\":[255,0,0],\"rosybrown\":[188,143,143],\"royalblue\":[65,105,225],\"saddlebrown\":[139,69,19],\"salmon\":[250,128,114],\"sandybrown\":[244,164,96],\"seagreen\":[46,139,87],\"seashell\":[255,245,238],\"sienna\":[160,82,45],\"silver\":[192,192,192],\"skyblue\":[135,206,235],\"slateblue\":[106,90,205],\"slategray\":[112,128,144],\"slategrey\":[112,128,144],\"snow\":[255,250,250],\"springgreen\":[0,255,127],\"steelblue\":[70,130,180],\"tan\":[210,180,140],\"teal\":[0,128,128],\"thistle\":[216,191,216],\"tomato\":[255,99,71],\"turquoise\":[64,224,208],\"violet\":[238,130,238],\"wheat\":[245,222,179],\"white\":[255,255,255],\"whitesmoke\":[245,245,245],\"yellow\":[255,255,0],\"yellowgreen\":[154,205,50]};var conversions=createCommonjsModule(function(module){/* MIT license */ // NOTE: conversions should only return primitive values (i.e. arrays, or\n//       values that give correct `typeof` results).\n//       do not use box values types (i.e. Number(), String(), etc.)\nvar reverseKeywords={};for(var key in colorName){if(colorName.hasOwnProperty(key)){reverseKeywords[colorName[key]]=key;}}var convert=module.exports={rgb:{channels:3,labels:'rgb'},hsl:{channels:3,labels:'hsl'},hsv:{channels:3,labels:'hsv'},hwb:{channels:3,labels:'hwb'},cmyk:{channels:4,labels:'cmyk'},xyz:{channels:3,labels:'xyz'},lab:{channels:3,labels:'lab'},lch:{channels:3,labels:'lch'},hex:{channels:1,labels:['hex']},keyword:{channels:1,labels:['keyword']},ansi16:{channels:1,labels:['ansi16']},ansi256:{channels:1,labels:['ansi256']},hcg:{channels:3,labels:['h','c','g']},apple:{channels:3,labels:['r16','g16','b16']},gray:{channels:1,labels:['gray']}};// hide .channels and .labels properties\nfor(var model in convert){if(convert.hasOwnProperty(model)){if(!('channels'in convert[model])){throw new Error('missing channels property: '+model);}if(!('labels'in convert[model])){throw new Error('missing channel labels property: '+model);}if(convert[model].labels.length!==convert[model].channels){throw new Error('channel and label counts mismatch: '+model);}var channels=convert[model].channels;var labels=convert[model].labels;delete convert[model].channels;delete convert[model].labels;Object.defineProperty(convert[model],'channels',{value:channels});Object.defineProperty(convert[model],'labels',{value:labels});}}convert.rgb.hsl=function(rgb){var r=rgb[0]/255;var g=rgb[1]/255;var b=rgb[2]/255;var min=Math.min(r,g,b);var max=Math.max(r,g,b);var delta=max-min;var h;var s;var l;if(max===min){h=0;}else if(r===max){h=(g-b)/delta;}else if(g===max){h=2+(b-r)/delta;}else if(b===max){h=4+(r-g)/delta;}h=Math.min(h*60,360);if(h<0){h+=360;}l=(min+max)/2;if(max===min){s=0;}else if(l<=0.5){s=delta/(max+min);}else{s=delta/(2-max-min);}return[h,s*100,l*100];};convert.rgb.hsv=function(rgb){var rdif;var gdif;var bdif;var h;var s;var r=rgb[0]/255;var g=rgb[1]/255;var b=rgb[2]/255;var v=Math.max(r,g,b);var diff=v-Math.min(r,g,b);var diffc=function diffc(c){return(v-c)/6/diff+1/2;};if(diff===0){h=s=0;}else{s=diff/v;rdif=diffc(r);gdif=diffc(g);bdif=diffc(b);if(r===v){h=bdif-gdif;}else if(g===v){h=1/3+rdif-bdif;}else if(b===v){h=2/3+gdif-rdif;}if(h<0){h+=1;}else if(h>1){h-=1;}}return[h*360,s*100,v*100];};convert.rgb.hwb=function(rgb){var r=rgb[0];var g=rgb[1];var b=rgb[2];var h=convert.rgb.hsl(rgb)[0];var w=1/255*Math.min(r,Math.min(g,b));b=1-1/255*Math.max(r,Math.max(g,b));return[h,w*100,b*100];};convert.rgb.cmyk=function(rgb){var r=rgb[0]/255;var g=rgb[1]/255;var b=rgb[2]/255;var c;var m;var y;var k;k=Math.min(1-r,1-g,1-b);c=(1-r-k)/(1-k)||0;m=(1-g-k)/(1-k)||0;y=(1-b-k)/(1-k)||0;return[c*100,m*100,y*100,k*100];};/**\n * See https://en.m.wikipedia.org/wiki/Euclidean_distance#Squared_Euclidean_distance\n * */function comparativeDistance(x,y){return Math.pow(x[0]-y[0],2)+Math.pow(x[1]-y[1],2)+Math.pow(x[2]-y[2],2);}convert.rgb.keyword=function(rgb){var reversed=reverseKeywords[rgb];if(reversed){return reversed;}var currentClosestDistance=Infinity;var currentClosestKeyword;for(var keyword in colorName){if(colorName.hasOwnProperty(keyword)){var value=colorName[keyword];// Compute comparative distance\nvar distance=comparativeDistance(rgb,value);// Check if its less, if so set as closest\nif(distance<currentClosestDistance){currentClosestDistance=distance;currentClosestKeyword=keyword;}}}return currentClosestKeyword;};convert.keyword.rgb=function(keyword){return colorName[keyword];};convert.rgb.xyz=function(rgb){var r=rgb[0]/255;var g=rgb[1]/255;var b=rgb[2]/255;// assume sRGB\nr=r>0.04045?Math.pow((r+0.055)/1.055,2.4):r/12.92;g=g>0.04045?Math.pow((g+0.055)/1.055,2.4):g/12.92;b=b>0.04045?Math.pow((b+0.055)/1.055,2.4):b/12.92;var x=r*0.4124+g*0.3576+b*0.1805;var y=r*0.2126+g*0.7152+b*0.0722;var z=r*0.0193+g*0.1192+b*0.9505;return[x*100,y*100,z*100];};convert.rgb.lab=function(rgb){var xyz=convert.rgb.xyz(rgb);var x=xyz[0];var y=xyz[1];var z=xyz[2];var l;var a;var b;x/=95.047;y/=100;z/=108.883;x=x>0.008856?Math.pow(x,1/3):7.787*x+16/116;y=y>0.008856?Math.pow(y,1/3):7.787*y+16/116;z=z>0.008856?Math.pow(z,1/3):7.787*z+16/116;l=116*y-16;a=500*(x-y);b=200*(y-z);return[l,a,b];};convert.hsl.rgb=function(hsl){var h=hsl[0]/360;var s=hsl[1]/100;var l=hsl[2]/100;var t1;var t2;var t3;var rgb;var val;if(s===0){val=l*255;return[val,val,val];}if(l<0.5){t2=l*(1+s);}else{t2=l+s-l*s;}t1=2*l-t2;rgb=[0,0,0];for(var i=0;i<3;i++){t3=h+1/3*-(i-1);if(t3<0){t3++;}if(t3>1){t3--;}if(6*t3<1){val=t1+(t2-t1)*6*t3;}else if(2*t3<1){val=t2;}else if(3*t3<2){val=t1+(t2-t1)*(2/3-t3)*6;}else{val=t1;}rgb[i]=val*255;}return rgb;};convert.hsl.hsv=function(hsl){var h=hsl[0];var s=hsl[1]/100;var l=hsl[2]/100;var smin=s;var lmin=Math.max(l,0.01);var sv;var v;l*=2;s*=l<=1?l:2-l;smin*=lmin<=1?lmin:2-lmin;v=(l+s)/2;sv=l===0?2*smin/(lmin+smin):2*s/(l+s);return[h,sv*100,v*100];};convert.hsv.rgb=function(hsv){var h=hsv[0]/60;var s=hsv[1]/100;var v=hsv[2]/100;var hi=Math.floor(h)%6;var f=h-Math.floor(h);var p=255*v*(1-s);var q=255*v*(1-s*f);var t=255*v*(1-s*(1-f));v*=255;switch(hi){case 0:return[v,t,p];case 1:return[q,v,p];case 2:return[p,v,t];case 3:return[p,q,v];case 4:return[t,p,v];case 5:return[v,p,q];}};convert.hsv.hsl=function(hsv){var h=hsv[0];var s=hsv[1]/100;var v=hsv[2]/100;var vmin=Math.max(v,0.01);var lmin;var sl;var l;l=(2-s)*v;lmin=(2-s)*vmin;sl=s*vmin;sl/=lmin<=1?lmin:2-lmin;sl=sl||0;l/=2;return[h,sl*100,l*100];};// http://dev.w3.org/csswg/css-color/#hwb-to-rgb\nconvert.hwb.rgb=function(hwb){var h=hwb[0]/360;var wh=hwb[1]/100;var bl=hwb[2]/100;var ratio=wh+bl;var i;var v;var f;var n;// wh + bl cant be > 1\nif(ratio>1){wh/=ratio;bl/=ratio;}i=Math.floor(6*h);v=1-bl;f=6*h-i;if((i&0x01)!==0){f=1-f;}n=wh+f*(v-wh);// linear interpolation\nvar r;var g;var b;switch(i){default:case 6:case 0:r=v;g=n;b=wh;break;case 1:r=n;g=v;b=wh;break;case 2:r=wh;g=v;b=n;break;case 3:r=wh;g=n;b=v;break;case 4:r=n;g=wh;b=v;break;case 5:r=v;g=wh;b=n;break;}return[r*255,g*255,b*255];};convert.cmyk.rgb=function(cmyk){var c=cmyk[0]/100;var m=cmyk[1]/100;var y=cmyk[2]/100;var k=cmyk[3]/100;var r;var g;var b;r=1-Math.min(1,c*(1-k)+k);g=1-Math.min(1,m*(1-k)+k);b=1-Math.min(1,y*(1-k)+k);return[r*255,g*255,b*255];};convert.xyz.rgb=function(xyz){var x=xyz[0]/100;var y=xyz[1]/100;var z=xyz[2]/100;var r;var g;var b;r=x*3.2406+y*-1.5372+z*-0.4986;g=x*-0.9689+y*1.8758+z*0.0415;b=x*0.0557+y*-0.2040+z*1.0570;// assume sRGB\nr=r>0.0031308?1.055*Math.pow(r,1.0/2.4)-0.055:r*12.92;g=g>0.0031308?1.055*Math.pow(g,1.0/2.4)-0.055:g*12.92;b=b>0.0031308?1.055*Math.pow(b,1.0/2.4)-0.055:b*12.92;r=Math.min(Math.max(0,r),1);g=Math.min(Math.max(0,g),1);b=Math.min(Math.max(0,b),1);return[r*255,g*255,b*255];};convert.xyz.lab=function(xyz){var x=xyz[0];var y=xyz[1];var z=xyz[2];var l;var a;var b;x/=95.047;y/=100;z/=108.883;x=x>0.008856?Math.pow(x,1/3):7.787*x+16/116;y=y>0.008856?Math.pow(y,1/3):7.787*y+16/116;z=z>0.008856?Math.pow(z,1/3):7.787*z+16/116;l=116*y-16;a=500*(x-y);b=200*(y-z);return[l,a,b];};convert.lab.xyz=function(lab){var l=lab[0];var a=lab[1];var b=lab[2];var x;var y;var z;y=(l+16)/116;x=a/500+y;z=y-b/200;var y2=Math.pow(y,3);var x2=Math.pow(x,3);var z2=Math.pow(z,3);y=y2>0.008856?y2:(y-16/116)/7.787;x=x2>0.008856?x2:(x-16/116)/7.787;z=z2>0.008856?z2:(z-16/116)/7.787;x*=95.047;y*=100;z*=108.883;return[x,y,z];};convert.lab.lch=function(lab){var l=lab[0];var a=lab[1];var b=lab[2];var hr;var h;var c;hr=Math.atan2(b,a);h=hr*360/2/Math.PI;if(h<0){h+=360;}c=Math.sqrt(a*a+b*b);return[l,c,h];};convert.lch.lab=function(lch){var l=lch[0];var c=lch[1];var h=lch[2];var a;var b;var hr;hr=h/360*2*Math.PI;a=c*Math.cos(hr);b=c*Math.sin(hr);return[l,a,b];};convert.rgb.ansi16=function(args){var r=args[0];var g=args[1];var b=args[2];var value=1 in arguments?arguments[1]:convert.rgb.hsv(args)[2];// hsv -> ansi16 optimization\nvalue=Math.round(value/50);if(value===0){return 30;}var ansi=30+(Math.round(b/255)<<2|Math.round(g/255)<<1|Math.round(r/255));if(value===2){ansi+=60;}return ansi;};convert.hsv.ansi16=function(args){// optimization here; we already know the value and don't need to get\n// it converted for us.\nreturn convert.rgb.ansi16(convert.hsv.rgb(args),args[2]);};convert.rgb.ansi256=function(args){var r=args[0];var g=args[1];var b=args[2];// we use the extended greyscale palette here, with the exception of\n// black and white. normal palette only has 4 greyscale shades.\nif(r===g&&g===b){if(r<8){return 16;}if(r>248){return 231;}return Math.round((r-8)/247*24)+232;}var ansi=16+36*Math.round(r/255*5)+6*Math.round(g/255*5)+Math.round(b/255*5);return ansi;};convert.ansi16.rgb=function(args){var color=args%10;// handle greyscale\nif(color===0||color===7){if(args>50){color+=3.5;}color=color/10.5*255;return[color,color,color];}var mult=(~~(args>50)+1)*0.5;var r=(color&1)*mult*255;var g=(color>>1&1)*mult*255;var b=(color>>2&1)*mult*255;return[r,g,b];};convert.ansi256.rgb=function(args){// handle greyscale\nif(args>=232){var c=(args-232)*10+8;return[c,c,c];}args-=16;var rem;var r=Math.floor(args/36)/5*255;var g=Math.floor((rem=args%36)/6)/5*255;var b=rem%6/5*255;return[r,g,b];};convert.rgb.hex=function(args){var integer=((Math.round(args[0])&0xFF)<<16)+((Math.round(args[1])&0xFF)<<8)+(Math.round(args[2])&0xFF);var string=integer.toString(16).toUpperCase();return'000000'.substring(string.length)+string;};convert.hex.rgb=function(args){var match=args.toString(16).match(/[a-f0-9]{6}|[a-f0-9]{3}/i);if(!match){return[0,0,0];}var colorString=match[0];if(match[0].length===3){colorString=colorString.split('').map(function(_char){return _char+_char;}).join('');}var integer=parseInt(colorString,16);var r=integer>>16&0xFF;var g=integer>>8&0xFF;var b=integer&0xFF;return[r,g,b];};convert.rgb.hcg=function(rgb){var r=rgb[0]/255;var g=rgb[1]/255;var b=rgb[2]/255;var max=Math.max(Math.max(r,g),b);var min=Math.min(Math.min(r,g),b);var chroma=max-min;var grayscale;var hue;if(chroma<1){grayscale=min/(1-chroma);}else{grayscale=0;}if(chroma<=0){hue=0;}else if(max===r){hue=(g-b)/chroma%6;}else if(max===g){hue=2+(b-r)/chroma;}else{hue=4+(r-g)/chroma+4;}hue/=6;hue%=1;return[hue*360,chroma*100,grayscale*100];};convert.hsl.hcg=function(hsl){var s=hsl[1]/100;var l=hsl[2]/100;var c=1;var f=0;if(l<0.5){c=2.0*s*l;}else{c=2.0*s*(1.0-l);}if(c<1.0){f=(l-0.5*c)/(1.0-c);}return[hsl[0],c*100,f*100];};convert.hsv.hcg=function(hsv){var s=hsv[1]/100;var v=hsv[2]/100;var c=s*v;var f=0;if(c<1.0){f=(v-c)/(1-c);}return[hsv[0],c*100,f*100];};convert.hcg.rgb=function(hcg){var h=hcg[0]/360;var c=hcg[1]/100;var g=hcg[2]/100;if(c===0.0){return[g*255,g*255,g*255];}var pure=[0,0,0];var hi=h%1*6;var v=hi%1;var w=1-v;var mg=0;switch(Math.floor(hi)){case 0:pure[0]=1;pure[1]=v;pure[2]=0;break;case 1:pure[0]=w;pure[1]=1;pure[2]=0;break;case 2:pure[0]=0;pure[1]=1;pure[2]=v;break;case 3:pure[0]=0;pure[1]=w;pure[2]=1;break;case 4:pure[0]=v;pure[1]=0;pure[2]=1;break;default:pure[0]=1;pure[1]=0;pure[2]=w;}mg=(1.0-c)*g;return[(c*pure[0]+mg)*255,(c*pure[1]+mg)*255,(c*pure[2]+mg)*255];};convert.hcg.hsv=function(hcg){var c=hcg[1]/100;var g=hcg[2]/100;var v=c+g*(1.0-c);var f=0;if(v>0.0){f=c/v;}return[hcg[0],f*100,v*100];};convert.hcg.hsl=function(hcg){var c=hcg[1]/100;var g=hcg[2]/100;var l=g*(1.0-c)+0.5*c;var s=0;if(l>0.0&&l<0.5){s=c/(2*l);}else if(l>=0.5&&l<1.0){s=c/(2*(1-l));}return[hcg[0],s*100,l*100];};convert.hcg.hwb=function(hcg){var c=hcg[1]/100;var g=hcg[2]/100;var v=c+g*(1.0-c);return[hcg[0],(v-c)*100,(1-v)*100];};convert.hwb.hcg=function(hwb){var w=hwb[1]/100;var b=hwb[2]/100;var v=1-b;var c=v-w;var g=0;if(c<1){g=(v-c)/(1-c);}return[hwb[0],c*100,g*100];};convert.apple.rgb=function(apple){return[apple[0]/65535*255,apple[1]/65535*255,apple[2]/65535*255];};convert.rgb.apple=function(rgb){return[rgb[0]/255*65535,rgb[1]/255*65535,rgb[2]/255*65535];};convert.gray.rgb=function(args){return[args[0]/100*255,args[0]/100*255,args[0]/100*255];};convert.gray.hsl=convert.gray.hsv=function(args){return[0,0,args[0]];};convert.gray.hwb=function(gray){return[0,100,gray[0]];};convert.gray.cmyk=function(gray){return[0,0,0,gray[0]];};convert.gray.lab=function(gray){return[gray[0],0,0];};convert.gray.hex=function(gray){var val=Math.round(gray[0]/100*255)&0xFF;var integer=(val<<16)+(val<<8)+val;var string=integer.toString(16).toUpperCase();return'000000'.substring(string.length)+string;};convert.rgb.gray=function(rgb){var val=(rgb[0]+rgb[1]+rgb[2])/3;return[val/255*100];};});var conversions_1=conversions.rgb;var conversions_2=conversions.hsl;var conversions_3=conversions.hsv;var conversions_4=conversions.hwb;var conversions_5=conversions.cmyk;var conversions_6=conversions.xyz;var conversions_7=conversions.lab;var conversions_8=conversions.lch;var conversions_9=conversions.hex;var conversions_10=conversions.keyword;var conversions_11=conversions.ansi16;var conversions_12=conversions.ansi256;var conversions_13=conversions.hcg;var conversions_14=conversions.apple;var conversions_15=conversions.gray;/*\n\tthis function routes a model to all other models.\n\n\tall functions that are routed have a property `.conversion` attached\n\tto the returned synthetic function. This property is an array\n\tof strings, each with the steps in between the 'from' and 'to'\n\tcolor models (inclusive).\n\n\tconversions that are not possible simply are not included.\n*/function buildGraph(){var graph={};// https://jsperf.com/object-keys-vs-for-in-with-closure/3\nvar models=Object.keys(conversions);for(var len=models.length,i=0;i<len;i++){graph[models[i]]={// http://jsperf.com/1-vs-infinity\n// micro-opt, but this is simple.\ndistance:-1,parent:null};}return graph;}// https://en.wikipedia.org/wiki/Breadth-first_search\nfunction deriveBFS(fromModel){var graph=buildGraph();var queue=[fromModel];// unshift -> queue -> pop\ngraph[fromModel].distance=0;while(queue.length){var current=queue.pop();var adjacents=Object.keys(conversions[current]);for(var len=adjacents.length,i=0;i<len;i++){var adjacent=adjacents[i];var node=graph[adjacent];if(node.distance===-1){node.distance=graph[current].distance+1;node.parent=current;queue.unshift(adjacent);}}}return graph;}function link(from,to){return function(args){return to(from(args));};}function wrapConversion(toModel,graph){var path=[graph[toModel].parent,toModel];var fn=conversions[graph[toModel].parent][toModel];var cur=graph[toModel].parent;while(graph[cur].parent){path.unshift(graph[cur].parent);fn=link(conversions[graph[cur].parent][cur],fn);cur=graph[cur].parent;}fn.conversion=path;return fn;}var route=function route(fromModel){var graph=deriveBFS(fromModel);var conversion={};var models=Object.keys(graph);for(var len=models.length,i=0;i<len;i++){var toModel=models[i];var node=graph[toModel];if(node.parent===null){// no possible conversion, or this node is the source model.\ncontinue;}conversion[toModel]=wrapConversion(toModel,graph);}return conversion;};var convert={};var models=Object.keys(conversions);function wrapRaw(fn){var wrappedFn=function wrappedFn(args){if(args===undefined||args===null){return args;}if(arguments.length>1){args=Array.prototype.slice.call(arguments);}return fn(args);};// preserve .conversion property if there is one\nif('conversion'in fn){wrappedFn.conversion=fn.conversion;}return wrappedFn;}function wrapRounded(fn){var wrappedFn=function wrappedFn(args){if(args===undefined||args===null){return args;}if(arguments.length>1){args=Array.prototype.slice.call(arguments);}var result=fn(args);// we're assuming the result is an array here.\n// see notice in conversions.js; don't use box types\n// in conversion functions.\nif(_typeof2(result)==='object'){for(var len=result.length,i=0;i<len;i++){result[i]=Math.round(result[i]);}}return result;};// preserve .conversion property if there is one\nif('conversion'in fn){wrappedFn.conversion=fn.conversion;}return wrappedFn;}models.forEach(function(fromModel){convert[fromModel]={};Object.defineProperty(convert[fromModel],'channels',{value:conversions[fromModel].channels});Object.defineProperty(convert[fromModel],'labels',{value:conversions[fromModel].labels});var routes=route(fromModel);var routeModels=Object.keys(routes);routeModels.forEach(function(toModel){var fn=routes[toModel];convert[fromModel][toModel]=wrapRounded(fn);convert[fromModel][toModel].raw=wrapRaw(fn);});});var colorConvert=convert;var colorName$1={\"aliceblue\":[240,248,255],\"antiquewhite\":[250,235,215],\"aqua\":[0,255,255],\"aquamarine\":[127,255,212],\"azure\":[240,255,255],\"beige\":[245,245,220],\"bisque\":[255,228,196],\"black\":[0,0,0],\"blanchedalmond\":[255,235,205],\"blue\":[0,0,255],\"blueviolet\":[138,43,226],\"brown\":[165,42,42],\"burlywood\":[222,184,135],\"cadetblue\":[95,158,160],\"chartreuse\":[127,255,0],\"chocolate\":[210,105,30],\"coral\":[255,127,80],\"cornflowerblue\":[100,149,237],\"cornsilk\":[255,248,220],\"crimson\":[220,20,60],\"cyan\":[0,255,255],\"darkblue\":[0,0,139],\"darkcyan\":[0,139,139],\"darkgoldenrod\":[184,134,11],\"darkgray\":[169,169,169],\"darkgreen\":[0,100,0],\"darkgrey\":[169,169,169],\"darkkhaki\":[189,183,107],\"darkmagenta\":[139,0,139],\"darkolivegreen\":[85,107,47],\"darkorange\":[255,140,0],\"darkorchid\":[153,50,204],\"darkred\":[139,0,0],\"darksalmon\":[233,150,122],\"darkseagreen\":[143,188,143],\"darkslateblue\":[72,61,139],\"darkslategray\":[47,79,79],\"darkslategrey\":[47,79,79],\"darkturquoise\":[0,206,209],\"darkviolet\":[148,0,211],\"deeppink\":[255,20,147],\"deepskyblue\":[0,191,255],\"dimgray\":[105,105,105],\"dimgrey\":[105,105,105],\"dodgerblue\":[30,144,255],\"firebrick\":[178,34,34],\"floralwhite\":[255,250,240],\"forestgreen\":[34,139,34],\"fuchsia\":[255,0,255],\"gainsboro\":[220,220,220],\"ghostwhite\":[248,248,255],\"gold\":[255,215,0],\"goldenrod\":[218,165,32],\"gray\":[128,128,128],\"green\":[0,128,0],\"greenyellow\":[173,255,47],\"grey\":[128,128,128],\"honeydew\":[240,255,240],\"hotpink\":[255,105,180],\"indianred\":[205,92,92],\"indigo\":[75,0,130],\"ivory\":[255,255,240],\"khaki\":[240,230,140],\"lavender\":[230,230,250],\"lavenderblush\":[255,240,245],\"lawngreen\":[124,252,0],\"lemonchiffon\":[255,250,205],\"lightblue\":[173,216,230],\"lightcoral\":[240,128,128],\"lightcyan\":[224,255,255],\"lightgoldenrodyellow\":[250,250,210],\"lightgray\":[211,211,211],\"lightgreen\":[144,238,144],\"lightgrey\":[211,211,211],\"lightpink\":[255,182,193],\"lightsalmon\":[255,160,122],\"lightseagreen\":[32,178,170],\"lightskyblue\":[135,206,250],\"lightslategray\":[119,136,153],\"lightslategrey\":[119,136,153],\"lightsteelblue\":[176,196,222],\"lightyellow\":[255,255,224],\"lime\":[0,255,0],\"limegreen\":[50,205,50],\"linen\":[250,240,230],\"magenta\":[255,0,255],\"maroon\":[128,0,0],\"mediumaquamarine\":[102,205,170],\"mediumblue\":[0,0,205],\"mediumorchid\":[186,85,211],\"mediumpurple\":[147,112,219],\"mediumseagreen\":[60,179,113],\"mediumslateblue\":[123,104,238],\"mediumspringgreen\":[0,250,154],\"mediumturquoise\":[72,209,204],\"mediumvioletred\":[199,21,133],\"midnightblue\":[25,25,112],\"mintcream\":[245,255,250],\"mistyrose\":[255,228,225],\"moccasin\":[255,228,181],\"navajowhite\":[255,222,173],\"navy\":[0,0,128],\"oldlace\":[253,245,230],\"olive\":[128,128,0],\"olivedrab\":[107,142,35],\"orange\":[255,165,0],\"orangered\":[255,69,0],\"orchid\":[218,112,214],\"palegoldenrod\":[238,232,170],\"palegreen\":[152,251,152],\"paleturquoise\":[175,238,238],\"palevioletred\":[219,112,147],\"papayawhip\":[255,239,213],\"peachpuff\":[255,218,185],\"peru\":[205,133,63],\"pink\":[255,192,203],\"plum\":[221,160,221],\"powderblue\":[176,224,230],\"purple\":[128,0,128],\"rebeccapurple\":[102,51,153],\"red\":[255,0,0],\"rosybrown\":[188,143,143],\"royalblue\":[65,105,225],\"saddlebrown\":[139,69,19],\"salmon\":[250,128,114],\"sandybrown\":[244,164,96],\"seagreen\":[46,139,87],\"seashell\":[255,245,238],\"sienna\":[160,82,45],\"silver\":[192,192,192],\"skyblue\":[135,206,235],\"slateblue\":[106,90,205],\"slategray\":[112,128,144],\"slategrey\":[112,128,144],\"snow\":[255,250,250],\"springgreen\":[0,255,127],\"steelblue\":[70,130,180],\"tan\":[210,180,140],\"teal\":[0,128,128],\"thistle\":[216,191,216],\"tomato\":[255,99,71],\"turquoise\":[64,224,208],\"violet\":[238,130,238],\"wheat\":[245,222,179],\"white\":[255,255,255],\"whitesmoke\":[245,245,245],\"yellow\":[255,255,0],\"yellowgreen\":[154,205,50]};/* MIT license */var colorString={getRgba:getRgba,getHsla:getHsla,getRgb:getRgb,getHsl:getHsl,getHwb:getHwb,getAlpha:getAlpha,hexString:hexString,rgbString:rgbString,rgbaString:rgbaString,percentString:percentString,percentaString:percentaString,hslString:hslString,hslaString:hslaString,hwbString:hwbString,keyword:keyword};function getRgba(string){if(!string){return;}var abbr=/^#([a-fA-F0-9]{3,4})$/i,hex=/^#([a-fA-F0-9]{6}([a-fA-F0-9]{2})?)$/i,rgba=/^rgba?\\(\\s*([+-]?\\d+)\\s*,\\s*([+-]?\\d+)\\s*,\\s*([+-]?\\d+)\\s*(?:,\\s*([+-]?[\\d\\.]+)\\s*)?\\)$/i,per=/^rgba?\\(\\s*([+-]?[\\d\\.]+)\\%\\s*,\\s*([+-]?[\\d\\.]+)\\%\\s*,\\s*([+-]?[\\d\\.]+)\\%\\s*(?:,\\s*([+-]?[\\d\\.]+)\\s*)?\\)$/i,keyword=/(\\w+)/;var rgb=[0,0,0],a=1,match=string.match(abbr),hexAlpha=\"\";if(match){match=match[1];hexAlpha=match[3];for(var i=0;i<rgb.length;i++){rgb[i]=parseInt(match[i]+match[i],16);}if(hexAlpha){a=Math.round(parseInt(hexAlpha+hexAlpha,16)/255*100)/100;}}else if(match=string.match(hex)){hexAlpha=match[2];match=match[1];for(var i=0;i<rgb.length;i++){rgb[i]=parseInt(match.slice(i*2,i*2+2),16);}if(hexAlpha){a=Math.round(parseInt(hexAlpha,16)/255*100)/100;}}else if(match=string.match(rgba)){for(var i=0;i<rgb.length;i++){rgb[i]=parseInt(match[i+1]);}a=parseFloat(match[4]);}else if(match=string.match(per)){for(var i=0;i<rgb.length;i++){rgb[i]=Math.round(parseFloat(match[i+1])*2.55);}a=parseFloat(match[4]);}else if(match=string.match(keyword)){if(match[1]==\"transparent\"){return[0,0,0,0];}rgb=colorName$1[match[1]];if(!rgb){return;}}for(var i=0;i<rgb.length;i++){rgb[i]=scale(rgb[i],0,255);}if(!a&&a!=0){a=1;}else{a=scale(a,0,1);}rgb[3]=a;return rgb;}function getHsla(string){if(!string){return;}var hsl=/^hsla?\\(\\s*([+-]?\\d+)(?:deg)?\\s*,\\s*([+-]?[\\d\\.]+)%\\s*,\\s*([+-]?[\\d\\.]+)%\\s*(?:,\\s*([+-]?[\\d\\.]+)\\s*)?\\)/;var match=string.match(hsl);if(match){var alpha=parseFloat(match[4]);var h=scale(parseInt(match[1]),0,360),s=scale(parseFloat(match[2]),0,100),l=scale(parseFloat(match[3]),0,100),a=scale(isNaN(alpha)?1:alpha,0,1);return[h,s,l,a];}}function getHwb(string){if(!string){return;}var hwb=/^hwb\\(\\s*([+-]?\\d+)(?:deg)?\\s*,\\s*([+-]?[\\d\\.]+)%\\s*,\\s*([+-]?[\\d\\.]+)%\\s*(?:,\\s*([+-]?[\\d\\.]+)\\s*)?\\)/;var match=string.match(hwb);if(match){var alpha=parseFloat(match[4]);var h=scale(parseInt(match[1]),0,360),w=scale(parseFloat(match[2]),0,100),b=scale(parseFloat(match[3]),0,100),a=scale(isNaN(alpha)?1:alpha,0,1);return[h,w,b,a];}}function getRgb(string){var rgba=getRgba(string);return rgba&&rgba.slice(0,3);}function getHsl(string){var hsla=getHsla(string);return hsla&&hsla.slice(0,3);}function getAlpha(string){var vals=getRgba(string);if(vals){return vals[3];}else if(vals=getHsla(string)){return vals[3];}else if(vals=getHwb(string)){return vals[3];}}// generators\nfunction hexString(rgba,a){var a=a!==undefined&&rgba.length===3?a:rgba[3];return\"#\"+hexDouble(rgba[0])+hexDouble(rgba[1])+hexDouble(rgba[2])+(a>=0&&a<1?hexDouble(Math.round(a*255)):\"\");}function rgbString(rgba,alpha){if(alpha<1||rgba[3]&&rgba[3]<1){return rgbaString(rgba,alpha);}return\"rgb(\"+rgba[0]+\", \"+rgba[1]+\", \"+rgba[2]+\")\";}function rgbaString(rgba,alpha){if(alpha===undefined){alpha=rgba[3]!==undefined?rgba[3]:1;}return\"rgba(\"+rgba[0]+\", \"+rgba[1]+\", \"+rgba[2]+\", \"+alpha+\")\";}function percentString(rgba,alpha){if(alpha<1||rgba[3]&&rgba[3]<1){return percentaString(rgba,alpha);}var r=Math.round(rgba[0]/255*100),g=Math.round(rgba[1]/255*100),b=Math.round(rgba[2]/255*100);return\"rgb(\"+r+\"%, \"+g+\"%, \"+b+\"%)\";}function percentaString(rgba,alpha){var r=Math.round(rgba[0]/255*100),g=Math.round(rgba[1]/255*100),b=Math.round(rgba[2]/255*100);return\"rgba(\"+r+\"%, \"+g+\"%, \"+b+\"%, \"+(alpha||rgba[3]||1)+\")\";}function hslString(hsla,alpha){if(alpha<1||hsla[3]&&hsla[3]<1){return hslaString(hsla,alpha);}return\"hsl(\"+hsla[0]+\", \"+hsla[1]+\"%, \"+hsla[2]+\"%)\";}function hslaString(hsla,alpha){if(alpha===undefined){alpha=hsla[3]!==undefined?hsla[3]:1;}return\"hsla(\"+hsla[0]+\", \"+hsla[1]+\"%, \"+hsla[2]+\"%, \"+alpha+\")\";}// hwb is a bit different than rgb(a) & hsl(a) since there is no alpha specific syntax\n// (hwb have alpha optional & 1 is default value)\nfunction hwbString(hwb,alpha){if(alpha===undefined){alpha=hwb[3]!==undefined?hwb[3]:1;}return\"hwb(\"+hwb[0]+\", \"+hwb[1]+\"%, \"+hwb[2]+\"%\"+(alpha!==undefined&&alpha!==1?\", \"+alpha:\"\")+\")\";}function keyword(rgb){return reverseNames[rgb.slice(0,3)];}// helpers\nfunction scale(num,min,max){return Math.min(Math.max(min,num),max);}function hexDouble(num){var str=num.toString(16).toUpperCase();return str.length<2?\"0\"+str:str;}//create a list of reverse color names\nvar reverseNames={};for(var name in colorName$1){reverseNames[colorName$1[name]]=name;}/* MIT license */var Color=function Color(obj){if(obj instanceof Color){return obj;}if(!(this instanceof Color)){return new Color(obj);}this.valid=false;this.values={rgb:[0,0,0],hsl:[0,0,0],hsv:[0,0,0],hwb:[0,0,0],cmyk:[0,0,0,0],alpha:1};// parse Color() argument\nvar vals;if(typeof obj==='string'){vals=colorString.getRgba(obj);if(vals){this.setValues('rgb',vals);}else if(vals=colorString.getHsla(obj)){this.setValues('hsl',vals);}else if(vals=colorString.getHwb(obj)){this.setValues('hwb',vals);}}else if(_typeof2(obj)==='object'){vals=obj;if(vals.r!==undefined||vals.red!==undefined){this.setValues('rgb',vals);}else if(vals.l!==undefined||vals.lightness!==undefined){this.setValues('hsl',vals);}else if(vals.v!==undefined||vals.value!==undefined){this.setValues('hsv',vals);}else if(vals.w!==undefined||vals.whiteness!==undefined){this.setValues('hwb',vals);}else if(vals.c!==undefined||vals.cyan!==undefined){this.setValues('cmyk',vals);}}};Color.prototype={isValid:function isValid(){return this.valid;},rgb:function rgb(){return this.setSpace('rgb',arguments);},hsl:function hsl(){return this.setSpace('hsl',arguments);},hsv:function hsv(){return this.setSpace('hsv',arguments);},hwb:function hwb(){return this.setSpace('hwb',arguments);},cmyk:function cmyk(){return this.setSpace('cmyk',arguments);},rgbArray:function rgbArray(){return this.values.rgb;},hslArray:function hslArray(){return this.values.hsl;},hsvArray:function hsvArray(){return this.values.hsv;},hwbArray:function hwbArray(){var values=this.values;if(values.alpha!==1){return values.hwb.concat([values.alpha]);}return values.hwb;},cmykArray:function cmykArray(){return this.values.cmyk;},rgbaArray:function rgbaArray(){var values=this.values;return values.rgb.concat([values.alpha]);},hslaArray:function hslaArray(){var values=this.values;return values.hsl.concat([values.alpha]);},alpha:function alpha(val){if(val===undefined){return this.values.alpha;}this.setValues('alpha',val);return this;},red:function red(val){return this.setChannel('rgb',0,val);},green:function green(val){return this.setChannel('rgb',1,val);},blue:function blue(val){return this.setChannel('rgb',2,val);},hue:function hue(val){if(val){val%=360;val=val<0?360+val:val;}return this.setChannel('hsl',0,val);},saturation:function saturation(val){return this.setChannel('hsl',1,val);},lightness:function lightness(val){return this.setChannel('hsl',2,val);},saturationv:function saturationv(val){return this.setChannel('hsv',1,val);},whiteness:function whiteness(val){return this.setChannel('hwb',1,val);},blackness:function blackness(val){return this.setChannel('hwb',2,val);},value:function value(val){return this.setChannel('hsv',2,val);},cyan:function cyan(val){return this.setChannel('cmyk',0,val);},magenta:function magenta(val){return this.setChannel('cmyk',1,val);},yellow:function yellow(val){return this.setChannel('cmyk',2,val);},black:function black(val){return this.setChannel('cmyk',3,val);},hexString:function hexString(){return colorString.hexString(this.values.rgb);},rgbString:function rgbString(){return colorString.rgbString(this.values.rgb,this.values.alpha);},rgbaString:function rgbaString(){return colorString.rgbaString(this.values.rgb,this.values.alpha);},percentString:function percentString(){return colorString.percentString(this.values.rgb,this.values.alpha);},hslString:function hslString(){return colorString.hslString(this.values.hsl,this.values.alpha);},hslaString:function hslaString(){return colorString.hslaString(this.values.hsl,this.values.alpha);},hwbString:function hwbString(){return colorString.hwbString(this.values.hwb,this.values.alpha);},keyword:function keyword(){return colorString.keyword(this.values.rgb,this.values.alpha);},rgbNumber:function rgbNumber(){var rgb=this.values.rgb;return rgb[0]<<16|rgb[1]<<8|rgb[2];},luminosity:function luminosity(){// http://www.w3.org/TR/WCAG20/#relativeluminancedef\nvar rgb=this.values.rgb;var lum=[];for(var i=0;i<rgb.length;i++){var chan=rgb[i]/255;lum[i]=chan<=0.03928?chan/12.92:Math.pow((chan+0.055)/1.055,2.4);}return 0.2126*lum[0]+0.7152*lum[1]+0.0722*lum[2];},contrast:function contrast(color2){// http://www.w3.org/TR/WCAG20/#contrast-ratiodef\nvar lum1=this.luminosity();var lum2=color2.luminosity();if(lum1>lum2){return(lum1+0.05)/(lum2+0.05);}return(lum2+0.05)/(lum1+0.05);},level:function level(color2){var contrastRatio=this.contrast(color2);if(contrastRatio>=7.1){return'AAA';}return contrastRatio>=4.5?'AA':'';},dark:function dark(){// YIQ equation from http://24ways.org/2010/calculating-color-contrast\nvar rgb=this.values.rgb;var yiq=(rgb[0]*299+rgb[1]*587+rgb[2]*114)/1000;return yiq<128;},light:function light(){return!this.dark();},negate:function negate(){var rgb=[];for(var i=0;i<3;i++){rgb[i]=255-this.values.rgb[i];}this.setValues('rgb',rgb);return this;},lighten:function lighten(ratio){var hsl=this.values.hsl;hsl[2]+=hsl[2]*ratio;this.setValues('hsl',hsl);return this;},darken:function darken(ratio){var hsl=this.values.hsl;hsl[2]-=hsl[2]*ratio;this.setValues('hsl',hsl);return this;},saturate:function saturate(ratio){var hsl=this.values.hsl;hsl[1]+=hsl[1]*ratio;this.setValues('hsl',hsl);return this;},desaturate:function desaturate(ratio){var hsl=this.values.hsl;hsl[1]-=hsl[1]*ratio;this.setValues('hsl',hsl);return this;},whiten:function whiten(ratio){var hwb=this.values.hwb;hwb[1]+=hwb[1]*ratio;this.setValues('hwb',hwb);return this;},blacken:function blacken(ratio){var hwb=this.values.hwb;hwb[2]+=hwb[2]*ratio;this.setValues('hwb',hwb);return this;},greyscale:function greyscale(){var rgb=this.values.rgb;// http://en.wikipedia.org/wiki/Grayscale#Converting_color_to_grayscale\nvar val=rgb[0]*0.3+rgb[1]*0.59+rgb[2]*0.11;this.setValues('rgb',[val,val,val]);return this;},clearer:function clearer(ratio){var alpha=this.values.alpha;this.setValues('alpha',alpha-alpha*ratio);return this;},opaquer:function opaquer(ratio){var alpha=this.values.alpha;this.setValues('alpha',alpha+alpha*ratio);return this;},rotate:function rotate(degrees){var hsl=this.values.hsl;var hue=(hsl[0]+degrees)%360;hsl[0]=hue<0?360+hue:hue;this.setValues('hsl',hsl);return this;},/**\n\t * Ported from sass implementation in C\n\t * https://github.com/sass/libsass/blob/0e6b4a2850092356aa3ece07c6b249f0221caced/functions.cpp#L209\n\t */mix:function mix(mixinColor,weight){var color1=this;var color2=mixinColor;var p=weight===undefined?0.5:weight;var w=2*p-1;var a=color1.alpha()-color2.alpha();var w1=((w*a===-1?w:(w+a)/(1+w*a))+1)/2.0;var w2=1-w1;return this.rgb(w1*color1.red()+w2*color2.red(),w1*color1.green()+w2*color2.green(),w1*color1.blue()+w2*color2.blue()).alpha(color1.alpha()*p+color2.alpha()*(1-p));},toJSON:function toJSON(){return this.rgb();},clone:function clone(){// NOTE(SB): using node-clone creates a dependency to Buffer when using browserify,\n// making the final build way to big to embed in Chart.js. So let's do it manually,\n// assuming that values to clone are 1 dimension arrays containing only numbers,\n// except 'alpha' which is a number.\nvar result=new Color();var source=this.values;var target=result.values;var value,type;for(var prop in source){if(source.hasOwnProperty(prop)){value=source[prop];type={}.toString.call(value);if(type==='[object Array]'){target[prop]=value.slice(0);}else if(type==='[object Number]'){target[prop]=value;}else{console.error('unexpected color value:',value);}}}return result;}};Color.prototype.spaces={rgb:['red','green','blue'],hsl:['hue','saturation','lightness'],hsv:['hue','saturation','value'],hwb:['hue','whiteness','blackness'],cmyk:['cyan','magenta','yellow','black']};Color.prototype.maxes={rgb:[255,255,255],hsl:[360,100,100],hsv:[360,100,100],hwb:[360,100,100],cmyk:[100,100,100,100]};Color.prototype.getValues=function(space){var values=this.values;var vals={};for(var i=0;i<space.length;i++){vals[space.charAt(i)]=values[space][i];}if(values.alpha!==1){vals.a=values.alpha;}// {r: 255, g: 255, b: 255, a: 0.4}\nreturn vals;};Color.prototype.setValues=function(space,vals){var values=this.values;var spaces=this.spaces;var maxes=this.maxes;var alpha=1;var i;this.valid=true;if(space==='alpha'){alpha=vals;}else if(vals.length){// [10, 10, 10]\nvalues[space]=vals.slice(0,space.length);alpha=vals[space.length];}else if(vals[space.charAt(0)]!==undefined){// {r: 10, g: 10, b: 10}\nfor(i=0;i<space.length;i++){values[space][i]=vals[space.charAt(i)];}alpha=vals.a;}else if(vals[spaces[space][0]]!==undefined){// {red: 10, green: 10, blue: 10}\nvar chans=spaces[space];for(i=0;i<space.length;i++){values[space][i]=vals[chans[i]];}alpha=vals.alpha;}values.alpha=Math.max(0,Math.min(1,alpha===undefined?values.alpha:alpha));if(space==='alpha'){return false;}var capped;// cap values of the space prior converting all values\nfor(i=0;i<space.length;i++){capped=Math.max(0,Math.min(maxes[space][i],values[space][i]));values[space][i]=Math.round(capped);}// convert to all the other color spaces\nfor(var sname in spaces){if(sname!==space){values[sname]=colorConvert[space][sname](values[space]);}}return true;};Color.prototype.setSpace=function(space,args){var vals=args[0];if(vals===undefined){// color.rgb()\nreturn this.getValues(space);}// color.rgb(10, 10, 10)\nif(typeof vals==='number'){vals=Array.prototype.slice.call(args);}this.setValues(space,vals);return this;};Color.prototype.setChannel=function(space,index,val){var svalues=this.values[space];if(val===undefined){// color.red()\nreturn svalues[index];}else if(val===svalues[index]){// color.red(color.red())\nreturn this;}// color.red(100)\nsvalues[index]=val;this.setValues(space,svalues);return this;};if(typeof window!=='undefined'){window.Color=Color;}var chartjsColor=Color;/**\n * @namespace Chart.helpers\n */var helpers={/**\n\t * An empty function that can be used, for example, for optional callback.\n\t */noop:function noop(){},/**\n\t * Returns a unique id, sequentially generated from a global variable.\n\t * @returns {number}\n\t * @function\n\t */uid:function(){var id=0;return function(){return id++;};}(),/**\n\t * Returns true if `value` is neither null nor undefined, else returns false.\n\t * @param {*} value - The value to test.\n\t * @returns {boolean}\n\t * @since 2.7.0\n\t */isNullOrUndef:function isNullOrUndef(value){return value===null||typeof value==='undefined';},/**\n\t * Returns true if `value` is an array (including typed arrays), else returns false.\n\t * @param {*} value - The value to test.\n\t * @returns {boolean}\n\t * @function\n\t */isArray:function isArray(value){if(Array.isArray&&Array.isArray(value)){return true;}var type=Object.prototype.toString.call(value);if(type.substr(0,7)==='[object'&&type.substr(-6)==='Array]'){return true;}return false;},/**\n\t * Returns true if `value` is an object (excluding null), else returns false.\n\t * @param {*} value - The value to test.\n\t * @returns {boolean}\n\t * @since 2.7.0\n\t */isObject:function isObject(value){return value!==null&&Object.prototype.toString.call(value)==='[object Object]';},/**\n\t * Returns true if `value` is a finite number, else returns false\n\t * @param {*} value  - The value to test.\n\t * @returns {boolean}\n\t */isFinite:function(_isFinite){function isFinite(_x){return _isFinite.apply(this,arguments);}isFinite.toString=function(){return _isFinite.toString();};return isFinite;}(function(value){return(typeof value==='number'||value instanceof Number)&&isFinite(value);}),/**\n\t * Returns `value` if defined, else returns `defaultValue`.\n\t * @param {*} value - The value to return if defined.\n\t * @param {*} defaultValue - The value to return if `value` is undefined.\n\t * @returns {*}\n\t */valueOrDefault:function valueOrDefault(value,defaultValue){return typeof value==='undefined'?defaultValue:value;},/**\n\t * Returns value at the given `index` in array if defined, else returns `defaultValue`.\n\t * @param {Array} value - The array to lookup for value at `index`.\n\t * @param {number} index - The index in `value` to lookup for value.\n\t * @param {*} defaultValue - The value to return if `value[index]` is undefined.\n\t * @returns {*}\n\t */valueAtIndexOrDefault:function valueAtIndexOrDefault(value,index,defaultValue){return helpers.valueOrDefault(helpers.isArray(value)?value[index]:value,defaultValue);},/**\n\t * Calls `fn` with the given `args` in the scope defined by `thisArg` and returns the\n\t * value returned by `fn`. If `fn` is not a function, this method returns undefined.\n\t * @param {function} fn - The function to call.\n\t * @param {Array|undefined|null} args - The arguments with which `fn` should be called.\n\t * @param {object} [thisArg] - The value of `this` provided for the call to `fn`.\n\t * @returns {*}\n\t */callback:function callback(fn,args,thisArg){if(fn&&typeof fn.call==='function'){return fn.apply(thisArg,args);}},/**\n\t * Note(SB) for performance sake, this method should only be used when loopable type\n\t * is unknown or in none intensive code (not called often and small loopable). Else\n\t * it's preferable to use a regular for() loop and save extra function calls.\n\t * @param {object|Array} loopable - The object or array to be iterated.\n\t * @param {function} fn - The function to call for each item.\n\t * @param {object} [thisArg] - The value of `this` provided for the call to `fn`.\n\t * @param {boolean} [reverse] - If true, iterates backward on the loopable.\n\t */each:function each(loopable,fn,thisArg,reverse){var i,len,keys;if(helpers.isArray(loopable)){len=loopable.length;if(reverse){for(i=len-1;i>=0;i--){fn.call(thisArg,loopable[i],i);}}else{for(i=0;i<len;i++){fn.call(thisArg,loopable[i],i);}}}else if(helpers.isObject(loopable)){keys=Object.keys(loopable);len=keys.length;for(i=0;i<len;i++){fn.call(thisArg,loopable[keys[i]],keys[i]);}}},/**\n\t * Returns true if the `a0` and `a1` arrays have the same content, else returns false.\n\t * @see https://stackoverflow.com/a/14853974\n\t * @param {Array} a0 - The array to compare\n\t * @param {Array} a1 - The array to compare\n\t * @returns {boolean}\n\t */arrayEquals:function arrayEquals(a0,a1){var i,ilen,v0,v1;if(!a0||!a1||a0.length!==a1.length){return false;}for(i=0,ilen=a0.length;i<ilen;++i){v0=a0[i];v1=a1[i];if(v0 instanceof Array&&v1 instanceof Array){if(!helpers.arrayEquals(v0,v1)){return false;}}else if(v0!==v1){// NOTE: two different object instances will never be equal: {x:20} != {x:20}\nreturn false;}}return true;},/**\n\t * Returns a deep copy of `source` without keeping references on objects and arrays.\n\t * @param {*} source - The value to clone.\n\t * @returns {*}\n\t */clone:function clone(source){if(helpers.isArray(source)){return source.map(helpers.clone);}if(helpers.isObject(source)){var target={};var keys=Object.keys(source);var klen=keys.length;var k=0;for(;k<klen;++k){target[keys[k]]=helpers.clone(source[keys[k]]);}return target;}return source;},/**\n\t * The default merger when Chart.helpers.merge is called without merger option.\n\t * Note(SB): also used by mergeConfig and mergeScaleConfig as fallback.\n\t * @private\n\t */_merger:function _merger(key,target,source,options){var tval=target[key];var sval=source[key];if(helpers.isObject(tval)&&helpers.isObject(sval)){helpers.merge(tval,sval,options);}else{target[key]=helpers.clone(sval);}},/**\n\t * Merges source[key] in target[key] only if target[key] is undefined.\n\t * @private\n\t */_mergerIf:function _mergerIf(key,target,source){var tval=target[key];var sval=source[key];if(helpers.isObject(tval)&&helpers.isObject(sval)){helpers.mergeIf(tval,sval);}else if(!target.hasOwnProperty(key)){target[key]=helpers.clone(sval);}},/**\n\t * Recursively deep copies `source` properties into `target` with the given `options`.\n\t * IMPORTANT: `target` is not cloned and will be updated with `source` properties.\n\t * @param {object} target - The target object in which all sources are merged into.\n\t * @param {object|object[]} source - Object(s) to merge into `target`.\n\t * @param {object} [options] - Merging options:\n\t * @param {function} [options.merger] - The merge method (key, target, source, options)\n\t * @returns {object} The `target` object.\n\t */merge:function merge(target,source,options){var sources=helpers.isArray(source)?source:[source];var ilen=sources.length;var merge,i,keys,klen,k;if(!helpers.isObject(target)){return target;}options=options||{};merge=options.merger||helpers._merger;for(i=0;i<ilen;++i){source=sources[i];if(!helpers.isObject(source)){continue;}keys=Object.keys(source);for(k=0,klen=keys.length;k<klen;++k){merge(keys[k],target,source,options);}}return target;},/**\n\t * Recursively deep copies `source` properties into `target` *only* if not defined in target.\n\t * IMPORTANT: `target` is not cloned and will be updated with `source` properties.\n\t * @param {object} target - The target object in which all sources are merged into.\n\t * @param {object|object[]} source - Object(s) to merge into `target`.\n\t * @returns {object} The `target` object.\n\t */mergeIf:function mergeIf(target,source){return helpers.merge(target,source,{merger:helpers._mergerIf});},/**\n\t * Applies the contents of two or more objects together into the first object.\n\t * @param {object} target - The target object in which all objects are merged into.\n\t * @param {object} arg1 - Object containing additional properties to merge in target.\n\t * @param {object} argN - Additional objects containing properties to merge in target.\n\t * @returns {object} The `target` object.\n\t */extend:Object.assign||function(target){return helpers.merge(target,[].slice.call(arguments,1),{merger:function merger(key,dst,src){dst[key]=src[key];}});},/**\n\t * Basic javascript inheritance based on the model created in Backbone.js\n\t */inherits:function inherits(extensions){var me=this;var ChartElement=extensions&&extensions.hasOwnProperty('constructor')?extensions.constructor:function(){return me.apply(this,arguments);};var Surrogate=function Surrogate(){this.constructor=ChartElement;};Surrogate.prototype=me.prototype;ChartElement.prototype=new Surrogate();ChartElement.extend=helpers.inherits;if(extensions){helpers.extend(ChartElement.prototype,extensions);}ChartElement.__super__=me.prototype;return ChartElement;},_deprecated:function _deprecated(scope,value,previous,current){if(value!==undefined){console.warn(scope+': \"'+previous+'\" is deprecated. Please use \"'+current+'\" instead');}}};var helpers_core=helpers;// DEPRECATIONS\n/**\n * Provided for backward compatibility, use Chart.helpers.callback instead.\n * @function Chart.helpers.callCallback\n * @deprecated since version 2.6.0\n * @todo remove at version 3\n * @private\n */helpers.callCallback=helpers.callback;/**\n * Provided for backward compatibility, use Array.prototype.indexOf instead.\n * Array.prototype.indexOf compatibility: Chrome, Opera, Safari, FF1.5+, IE9+\n * @function Chart.helpers.indexOf\n * @deprecated since version 2.7.0\n * @todo remove at version 3\n * @private\n */helpers.indexOf=function(array,item,fromIndex){return Array.prototype.indexOf.call(array,item,fromIndex);};/**\n * Provided for backward compatibility, use Chart.helpers.valueOrDefault instead.\n * @function Chart.helpers.getValueOrDefault\n * @deprecated since version 2.7.0\n * @todo remove at version 3\n * @private\n */helpers.getValueOrDefault=helpers.valueOrDefault;/**\n * Provided for backward compatibility, use Chart.helpers.valueAtIndexOrDefault instead.\n * @function Chart.helpers.getValueAtIndexOrDefault\n * @deprecated since version 2.7.0\n * @todo remove at version 3\n * @private\n */helpers.getValueAtIndexOrDefault=helpers.valueAtIndexOrDefault;/**\n * Easing functions adapted from Robert Penner's easing equations.\n * @namespace Chart.helpers.easingEffects\n * @see http://www.robertpenner.com/easing/\n */var effects={linear:function linear(t){return t;},easeInQuad:function easeInQuad(t){return t*t;},easeOutQuad:function easeOutQuad(t){return-t*(t-2);},easeInOutQuad:function easeInOutQuad(t){if((t/=0.5)<1){return 0.5*t*t;}return-0.5*(--t*(t-2)-1);},easeInCubic:function easeInCubic(t){return t*t*t;},easeOutCubic:function easeOutCubic(t){return(t=t-1)*t*t+1;},easeInOutCubic:function easeInOutCubic(t){if((t/=0.5)<1){return 0.5*t*t*t;}return 0.5*((t-=2)*t*t+2);},easeInQuart:function easeInQuart(t){return t*t*t*t;},easeOutQuart:function easeOutQuart(t){return-((t=t-1)*t*t*t-1);},easeInOutQuart:function easeInOutQuart(t){if((t/=0.5)<1){return 0.5*t*t*t*t;}return-0.5*((t-=2)*t*t*t-2);},easeInQuint:function easeInQuint(t){return t*t*t*t*t;},easeOutQuint:function easeOutQuint(t){return(t=t-1)*t*t*t*t+1;},easeInOutQuint:function easeInOutQuint(t){if((t/=0.5)<1){return 0.5*t*t*t*t*t;}return 0.5*((t-=2)*t*t*t*t+2);},easeInSine:function easeInSine(t){return-Math.cos(t*(Math.PI/2))+1;},easeOutSine:function easeOutSine(t){return Math.sin(t*(Math.PI/2));},easeInOutSine:function easeInOutSine(t){return-0.5*(Math.cos(Math.PI*t)-1);},easeInExpo:function easeInExpo(t){return t===0?0:Math.pow(2,10*(t-1));},easeOutExpo:function easeOutExpo(t){return t===1?1:-Math.pow(2,-10*t)+1;},easeInOutExpo:function easeInOutExpo(t){if(t===0){return 0;}if(t===1){return 1;}if((t/=0.5)<1){return 0.5*Math.pow(2,10*(t-1));}return 0.5*(-Math.pow(2,-10*--t)+2);},easeInCirc:function easeInCirc(t){if(t>=1){return t;}return-(Math.sqrt(1-t*t)-1);},easeOutCirc:function easeOutCirc(t){return Math.sqrt(1-(t=t-1)*t);},easeInOutCirc:function easeInOutCirc(t){if((t/=0.5)<1){return-0.5*(Math.sqrt(1-t*t)-1);}return 0.5*(Math.sqrt(1-(t-=2)*t)+1);},easeInElastic:function easeInElastic(t){var s=1.70158;var p=0;var a=1;if(t===0){return 0;}if(t===1){return 1;}if(!p){p=0.3;}if(a<1){a=1;s=p/4;}else{s=p/(2*Math.PI)*Math.asin(1/a);}return-(a*Math.pow(2,10*(t-=1))*Math.sin((t-s)*(2*Math.PI)/p));},easeOutElastic:function easeOutElastic(t){var s=1.70158;var p=0;var a=1;if(t===0){return 0;}if(t===1){return 1;}if(!p){p=0.3;}if(a<1){a=1;s=p/4;}else{s=p/(2*Math.PI)*Math.asin(1/a);}return a*Math.pow(2,-10*t)*Math.sin((t-s)*(2*Math.PI)/p)+1;},easeInOutElastic:function easeInOutElastic(t){var s=1.70158;var p=0;var a=1;if(t===0){return 0;}if((t/=0.5)===2){return 1;}if(!p){p=0.45;}if(a<1){a=1;s=p/4;}else{s=p/(2*Math.PI)*Math.asin(1/a);}if(t<1){return-0.5*(a*Math.pow(2,10*(t-=1))*Math.sin((t-s)*(2*Math.PI)/p));}return a*Math.pow(2,-10*(t-=1))*Math.sin((t-s)*(2*Math.PI)/p)*0.5+1;},easeInBack:function easeInBack(t){var s=1.70158;return t*t*((s+1)*t-s);},easeOutBack:function easeOutBack(t){var s=1.70158;return(t=t-1)*t*((s+1)*t+s)+1;},easeInOutBack:function easeInOutBack(t){var s=1.70158;if((t/=0.5)<1){return 0.5*(t*t*(((s*=1.525)+1)*t-s));}return 0.5*((t-=2)*t*(((s*=1.525)+1)*t+s)+2);},easeInBounce:function easeInBounce(t){return 1-effects.easeOutBounce(1-t);},easeOutBounce:function easeOutBounce(t){if(t<1/2.75){return 7.5625*t*t;}if(t<2/2.75){return 7.5625*(t-=1.5/2.75)*t+0.75;}if(t<2.5/2.75){return 7.5625*(t-=2.25/2.75)*t+0.9375;}return 7.5625*(t-=2.625/2.75)*t+0.984375;},easeInOutBounce:function easeInOutBounce(t){if(t<0.5){return effects.easeInBounce(t*2)*0.5;}return effects.easeOutBounce(t*2-1)*0.5+0.5;}};var helpers_easing={effects:effects};// DEPRECATIONS\n/**\n * Provided for backward compatibility, use Chart.helpers.easing.effects instead.\n * @function Chart.helpers.easingEffects\n * @deprecated since version 2.7.0\n * @todo remove at version 3\n * @private\n */helpers_core.easingEffects=effects;var PI=Math.PI;var RAD_PER_DEG=PI/180;var DOUBLE_PI=PI*2;var HALF_PI=PI/2;var QUARTER_PI=PI/4;var TWO_THIRDS_PI=PI*2/3;/**\n * @namespace Chart.helpers.canvas\n */var exports$1={/**\n\t * Clears the entire canvas associated to the given `chart`.\n\t * @param {Chart} chart - The chart for which to clear the canvas.\n\t */clear:function clear(chart){chart.ctx.clearRect(0,0,chart.width,chart.height);},/**\n\t * Creates a \"path\" for a rectangle with rounded corners at position (x, y) with a\n\t * given size (width, height) and the same `radius` for all corners.\n\t * @param {CanvasRenderingContext2D} ctx - The canvas 2D Context.\n\t * @param {number} x - The x axis of the coordinate for the rectangle starting point.\n\t * @param {number} y - The y axis of the coordinate for the rectangle starting point.\n\t * @param {number} width - The rectangle's width.\n\t * @param {number} height - The rectangle's height.\n\t * @param {number} radius - The rounded amount (in pixels) for the four corners.\n\t * @todo handle `radius` as top-left, top-right, bottom-right, bottom-left array/object?\n\t */roundedRect:function roundedRect(ctx,x,y,width,height,radius){if(radius){var r=Math.min(radius,height/2,width/2);var left=x+r;var top=y+r;var right=x+width-r;var bottom=y+height-r;ctx.moveTo(x,top);if(left<right&&top<bottom){ctx.arc(left,top,r,-PI,-HALF_PI);ctx.arc(right,top,r,-HALF_PI,0);ctx.arc(right,bottom,r,0,HALF_PI);ctx.arc(left,bottom,r,HALF_PI,PI);}else if(left<right){ctx.moveTo(left,y);ctx.arc(right,top,r,-HALF_PI,HALF_PI);ctx.arc(left,top,r,HALF_PI,PI+HALF_PI);}else if(top<bottom){ctx.arc(left,top,r,-PI,0);ctx.arc(left,bottom,r,0,PI);}else{ctx.arc(left,top,r,-PI,PI);}ctx.closePath();ctx.moveTo(x,y);}else{ctx.rect(x,y,width,height);}},drawPoint:function drawPoint(ctx,style,radius,x,y,rotation){var type,xOffset,yOffset,size,cornerRadius;var rad=(rotation||0)*RAD_PER_DEG;if(style&&_typeof2(style)==='object'){type=style.toString();if(type==='[object HTMLImageElement]'||type==='[object HTMLCanvasElement]'){ctx.save();ctx.translate(x,y);ctx.rotate(rad);ctx.drawImage(style,-style.width/2,-style.height/2,style.width,style.height);ctx.restore();return;}}if(isNaN(radius)||radius<=0){return;}ctx.beginPath();switch(style){// Default includes circle\ndefault:ctx.arc(x,y,radius,0,DOUBLE_PI);ctx.closePath();break;case'triangle':ctx.moveTo(x+Math.sin(rad)*radius,y-Math.cos(rad)*radius);rad+=TWO_THIRDS_PI;ctx.lineTo(x+Math.sin(rad)*radius,y-Math.cos(rad)*radius);rad+=TWO_THIRDS_PI;ctx.lineTo(x+Math.sin(rad)*radius,y-Math.cos(rad)*radius);ctx.closePath();break;case'rectRounded':// NOTE: the rounded rect implementation changed to use `arc` instead of\n// `quadraticCurveTo` since it generates better results when rect is\n// almost a circle. 0.516 (instead of 0.5) produces results with visually\n// closer proportion to the previous impl and it is inscribed in the\n// circle with `radius`. For more details, see the following PRs:\n// https://github.com/chartjs/Chart.js/issues/5597\n// https://github.com/chartjs/Chart.js/issues/5858\ncornerRadius=radius*0.516;size=radius-cornerRadius;xOffset=Math.cos(rad+QUARTER_PI)*size;yOffset=Math.sin(rad+QUARTER_PI)*size;ctx.arc(x-xOffset,y-yOffset,cornerRadius,rad-PI,rad-HALF_PI);ctx.arc(x+yOffset,y-xOffset,cornerRadius,rad-HALF_PI,rad);ctx.arc(x+xOffset,y+yOffset,cornerRadius,rad,rad+HALF_PI);ctx.arc(x-yOffset,y+xOffset,cornerRadius,rad+HALF_PI,rad+PI);ctx.closePath();break;case'rect':if(!rotation){size=Math.SQRT1_2*radius;ctx.rect(x-size,y-size,2*size,2*size);break;}rad+=QUARTER_PI;/* falls through */case'rectRot':xOffset=Math.cos(rad)*radius;yOffset=Math.sin(rad)*radius;ctx.moveTo(x-xOffset,y-yOffset);ctx.lineTo(x+yOffset,y-xOffset);ctx.lineTo(x+xOffset,y+yOffset);ctx.lineTo(x-yOffset,y+xOffset);ctx.closePath();break;case'crossRot':rad+=QUARTER_PI;/* falls through */case'cross':xOffset=Math.cos(rad)*radius;yOffset=Math.sin(rad)*radius;ctx.moveTo(x-xOffset,y-yOffset);ctx.lineTo(x+xOffset,y+yOffset);ctx.moveTo(x+yOffset,y-xOffset);ctx.lineTo(x-yOffset,y+xOffset);break;case'star':xOffset=Math.cos(rad)*radius;yOffset=Math.sin(rad)*radius;ctx.moveTo(x-xOffset,y-yOffset);ctx.lineTo(x+xOffset,y+yOffset);ctx.moveTo(x+yOffset,y-xOffset);ctx.lineTo(x-yOffset,y+xOffset);rad+=QUARTER_PI;xOffset=Math.cos(rad)*radius;yOffset=Math.sin(rad)*radius;ctx.moveTo(x-xOffset,y-yOffset);ctx.lineTo(x+xOffset,y+yOffset);ctx.moveTo(x+yOffset,y-xOffset);ctx.lineTo(x-yOffset,y+xOffset);break;case'line':xOffset=Math.cos(rad)*radius;yOffset=Math.sin(rad)*radius;ctx.moveTo(x-xOffset,y-yOffset);ctx.lineTo(x+xOffset,y+yOffset);break;case'dash':ctx.moveTo(x,y);ctx.lineTo(x+Math.cos(rad)*radius,y+Math.sin(rad)*radius);break;}ctx.fill();ctx.stroke();},/**\n\t * Returns true if the point is inside the rectangle\n\t * @param {object} point - The point to test\n\t * @param {object} area - The rectangle\n\t * @returns {boolean}\n\t * @private\n\t */_isPointInArea:function _isPointInArea(point,area){var epsilon=1e-6;// 1e-6 is margin in pixels for accumulated error.\nreturn point.x>area.left-epsilon&&point.x<area.right+epsilon&&point.y>area.top-epsilon&&point.y<area.bottom+epsilon;},clipArea:function clipArea(ctx,area){ctx.save();ctx.beginPath();ctx.rect(area.left,area.top,area.right-area.left,area.bottom-area.top);ctx.clip();},unclipArea:function unclipArea(ctx){ctx.restore();},lineTo:function lineTo(ctx,previous,target,flip){var stepped=target.steppedLine;if(stepped){if(stepped==='middle'){var midpoint=(previous.x+target.x)/2.0;ctx.lineTo(midpoint,flip?target.y:previous.y);ctx.lineTo(midpoint,flip?previous.y:target.y);}else if(stepped==='after'&&!flip||stepped!=='after'&&flip){ctx.lineTo(previous.x,target.y);}else{ctx.lineTo(target.x,previous.y);}ctx.lineTo(target.x,target.y);return;}if(!target.tension){ctx.lineTo(target.x,target.y);return;}ctx.bezierCurveTo(flip?previous.controlPointPreviousX:previous.controlPointNextX,flip?previous.controlPointPreviousY:previous.controlPointNextY,flip?target.controlPointNextX:target.controlPointPreviousX,flip?target.controlPointNextY:target.controlPointPreviousY,target.x,target.y);}};var helpers_canvas=exports$1;// DEPRECATIONS\n/**\n * Provided for backward compatibility, use Chart.helpers.canvas.clear instead.\n * @namespace Chart.helpers.clear\n * @deprecated since version 2.7.0\n * @todo remove at version 3\n * @private\n */helpers_core.clear=exports$1.clear;/**\n * Provided for backward compatibility, use Chart.helpers.canvas.roundedRect instead.\n * @namespace Chart.helpers.drawRoundedRectangle\n * @deprecated since version 2.7.0\n * @todo remove at version 3\n * @private\n */helpers_core.drawRoundedRectangle=function(ctx){ctx.beginPath();exports$1.roundedRect.apply(exports$1,arguments);};var defaults={/**\n\t * @private\n\t */_set:function _set(scope,values){return helpers_core.merge(this[scope]||(this[scope]={}),values);}};// TODO(v3): remove 'global' from namespace.  all default are global and\n// there's inconsistency around which options are under 'global'\ndefaults._set('global',{defaultColor:'rgba(0,0,0,0.1)',defaultFontColor:'#666',defaultFontFamily:\"'Helvetica Neue', 'Helvetica', 'Arial', sans-serif\",defaultFontSize:12,defaultFontStyle:'normal',defaultLineHeight:1.2,showLines:true});var core_defaults=defaults;var valueOrDefault=helpers_core.valueOrDefault;/**\n * Converts the given font object into a CSS font string.\n * @param {object} font - A font object.\n * @return {string} The CSS font string. See https://developer.mozilla.org/en-US/docs/Web/CSS/font\n * @private\n */function toFontString(font){if(!font||helpers_core.isNullOrUndef(font.size)||helpers_core.isNullOrUndef(font.family)){return null;}return(font.style?font.style+' ':'')+(font.weight?font.weight+' ':'')+font.size+'px '+font.family;}/**\n * @alias Chart.helpers.options\n * @namespace\n */var helpers_options={/**\n\t * Converts the given line height `value` in pixels for a specific font `size`.\n\t * @param {number|string} value - The lineHeight to parse (eg. 1.6, '14px', '75%', '1.6em').\n\t * @param {number} size - The font size (in pixels) used to resolve relative `value`.\n\t * @returns {number} The effective line height in pixels (size * 1.2 if value is invalid).\n\t * @see https://developer.mozilla.org/en-US/docs/Web/CSS/line-height\n\t * @since 2.7.0\n\t */toLineHeight:function toLineHeight(value,size){var matches=(''+value).match(/^(normal|(\\d+(?:\\.\\d+)?)(px|em|%)?)$/);if(!matches||matches[1]==='normal'){return size*1.2;}value=+matches[2];switch(matches[3]){case'px':return value;case'%':value/=100;break;}return size*value;},/**\n\t * Converts the given value into a padding object with pre-computed width/height.\n\t * @param {number|object} value - If a number, set the value to all TRBL component,\n\t *  else, if and object, use defined properties and sets undefined ones to 0.\n\t * @returns {object} The padding values (top, right, bottom, left, width, height)\n\t * @since 2.7.0\n\t */toPadding:function toPadding(value){var t,r,b,l;if(helpers_core.isObject(value)){t=+value.top||0;r=+value.right||0;b=+value.bottom||0;l=+value.left||0;}else{t=r=b=l=+value||0;}return{top:t,right:r,bottom:b,left:l,height:t+b,width:l+r};},/**\n\t * Parses font options and returns the font object.\n\t * @param {object} options - A object that contains font options to be parsed.\n\t * @return {object} The font object.\n\t * @todo Support font.* options and renamed to toFont().\n\t * @private\n\t */_parseFont:function _parseFont(options){var globalDefaults=core_defaults.global;var size=valueOrDefault(options.fontSize,globalDefaults.defaultFontSize);var font={family:valueOrDefault(options.fontFamily,globalDefaults.defaultFontFamily),lineHeight:helpers_core.options.toLineHeight(valueOrDefault(options.lineHeight,globalDefaults.defaultLineHeight),size),size:size,style:valueOrDefault(options.fontStyle,globalDefaults.defaultFontStyle),weight:null,string:''};font.string=toFontString(font);return font;},/**\n\t * Evaluates the given `inputs` sequentially and returns the first defined value.\n\t * @param {Array} inputs - An array of values, falling back to the last value.\n\t * @param {object} [context] - If defined and the current value is a function, the value\n\t * is called with `context` as first argument and the result becomes the new input.\n\t * @param {number} [index] - If defined and the current value is an array, the value\n\t * at `index` become the new input.\n\t * @param {object} [info] - object to return information about resolution in\n\t * @param {boolean} [info.cacheable] - Will be set to `false` if option is not cacheable.\n\t * @since 2.7.0\n\t */resolve:function resolve(inputs,context,index,info){var cacheable=true;var i,ilen,value;for(i=0,ilen=inputs.length;i<ilen;++i){value=inputs[i];if(value===undefined){continue;}if(context!==undefined&&typeof value==='function'){value=value(context);cacheable=false;}if(index!==undefined&&helpers_core.isArray(value)){value=value[index];cacheable=false;}if(value!==undefined){if(info&&!cacheable){info.cacheable=false;}return value;}}}};/**\n * @alias Chart.helpers.math\n * @namespace\n */var exports$2={/**\n\t * Returns an array of factors sorted from 1 to sqrt(value)\n\t * @private\n\t */_factorize:function _factorize(value){var result=[];var sqrt=Math.sqrt(value);var i;for(i=1;i<sqrt;i++){if(value%i===0){result.push(i);result.push(value/i);}}if(sqrt===(sqrt|0)){// if value is a square number\nresult.push(sqrt);}result.sort(function(a,b){return a-b;}).pop();return result;},log10:Math.log10||function(x){var exponent=Math.log(x)*Math.LOG10E;// Math.LOG10E = 1 / Math.LN10.\n// Check for whole powers of 10,\n// which due to floating point rounding error should be corrected.\nvar powerOf10=Math.round(exponent);var isPowerOf10=x===Math.pow(10,powerOf10);return isPowerOf10?powerOf10:exponent;}};var helpers_math=exports$2;// DEPRECATIONS\n/**\n * Provided for backward compatibility, use Chart.helpers.math.log10 instead.\n * @namespace Chart.helpers.log10\n * @deprecated since version 2.9.0\n * @todo remove at version 3\n * @private\n */helpers_core.log10=exports$2.log10;var getRtlAdapter=function getRtlAdapter(rectX,width){return{x:function x(_x2){return rectX+rectX+width-_x2;},setWidth:function setWidth(w){width=w;},textAlign:function textAlign(align){if(align==='center'){return align;}return align==='right'?'left':'right';},xPlus:function xPlus(x,value){return x-value;},leftForLtr:function leftForLtr(x,itemWidth){return x-itemWidth;}};};var getLtrAdapter=function getLtrAdapter(){return{x:function x(_x3){return _x3;},setWidth:function setWidth(w){// eslint-disable-line no-unused-vars\n},textAlign:function textAlign(align){return align;},xPlus:function xPlus(x,value){return x+value;},leftForLtr:function leftForLtr(x,_itemWidth){// eslint-disable-line no-unused-vars\nreturn x;}};};var getAdapter=function getAdapter(rtl,rectX,width){return rtl?getRtlAdapter(rectX,width):getLtrAdapter();};var overrideTextDirection=function overrideTextDirection(ctx,direction){var style,original;if(direction==='ltr'||direction==='rtl'){style=ctx.canvas.style;original=[style.getPropertyValue('direction'),style.getPropertyPriority('direction')];style.setProperty('direction',direction,'important');ctx.prevTextDirection=original;}};var restoreTextDirection=function restoreTextDirection(ctx){var original=ctx.prevTextDirection;if(original!==undefined){delete ctx.prevTextDirection;ctx.canvas.style.setProperty('direction',original[0],original[1]);}};var helpers_rtl={getRtlAdapter:getAdapter,overrideTextDirection:overrideTextDirection,restoreTextDirection:restoreTextDirection};var helpers$1=helpers_core;var easing=helpers_easing;var canvas=helpers_canvas;var options=helpers_options;var math=helpers_math;var rtl=helpers_rtl;helpers$1.easing=easing;helpers$1.canvas=canvas;helpers$1.options=options;helpers$1.math=math;helpers$1.rtl=rtl;function interpolate(start,view,model,ease){var keys=Object.keys(model);var i,ilen,key,actual,origin,target,type,c0,c1;for(i=0,ilen=keys.length;i<ilen;++i){key=keys[i];target=model[key];// if a value is added to the model after pivot() has been called, the view\n// doesn't contain it, so let's initialize the view to the target value.\nif(!view.hasOwnProperty(key)){view[key]=target;}actual=view[key];if(actual===target||key[0]==='_'){continue;}if(!start.hasOwnProperty(key)){start[key]=actual;}origin=start[key];type=_typeof2(target);if(type===_typeof2(origin)){if(type==='string'){c0=chartjsColor(origin);if(c0.valid){c1=chartjsColor(target);if(c1.valid){view[key]=c1.mix(c0,ease).rgbString();continue;}}}else if(helpers$1.isFinite(origin)&&helpers$1.isFinite(target)){view[key]=origin+(target-origin)*ease;continue;}}view[key]=target;}}var Element=function Element(configuration){helpers$1.extend(this,configuration);this.initialize.apply(this,arguments);};helpers$1.extend(Element.prototype,{_type:undefined,initialize:function initialize(){this.hidden=false;},pivot:function pivot(){var me=this;if(!me._view){me._view=helpers$1.extend({},me._model);}me._start={};return me;},transition:function transition(ease){var me=this;var model=me._model;var start=me._start;var view=me._view;// No animation -> No Transition\nif(!model||ease===1){me._view=helpers$1.extend({},model);me._start=null;return me;}if(!view){view=me._view={};}if(!start){start=me._start={};}interpolate(start,view,model,ease);return me;},tooltipPosition:function tooltipPosition(){return{x:this._model.x,y:this._model.y};},hasValue:function hasValue(){return helpers$1.isNumber(this._model.x)&&helpers$1.isNumber(this._model.y);}});Element.extend=helpers$1.inherits;var core_element=Element;var exports$3=core_element.extend({chart:null,// the animation associated chart instance\ncurrentStep:0,// the current animation step\nnumSteps:60,// default number of steps\neasing:'',// the easing to use for this animation\nrender:null,// render function used by the animation service\nonAnimationProgress:null,// user specified callback to fire on each step of the animation\nonAnimationComplete:null// user specified callback to fire when the animation finishes\n});var core_animation=exports$3;// DEPRECATIONS\n/**\n * Provided for backward compatibility, use Chart.Animation instead\n * @prop Chart.Animation#animationObject\n * @deprecated since version 2.6.0\n * @todo remove at version 3\n */Object.defineProperty(exports$3.prototype,'animationObject',{get:function get(){return this;}});/**\n * Provided for backward compatibility, use Chart.Animation#chart instead\n * @prop Chart.Animation#chartInstance\n * @deprecated since version 2.6.0\n * @todo remove at version 3\n */Object.defineProperty(exports$3.prototype,'chartInstance',{get:function get(){return this.chart;},set:function set(value){this.chart=value;}});core_defaults._set('global',{animation:{duration:1000,easing:'easeOutQuart',onProgress:helpers$1.noop,onComplete:helpers$1.noop}});var core_animations={animations:[],request:null,/**\n\t * @param {Chart} chart - The chart to animate.\n\t * @param {Chart.Animation} animation - The animation that we will animate.\n\t * @param {number} duration - The animation duration in ms.\n\t * @param {boolean} lazy - if true, the chart is not marked as animating to enable more responsive interactions\n\t */addAnimation:function addAnimation(chart,animation,duration,lazy){var animations=this.animations;var i,ilen;animation.chart=chart;animation.startTime=Date.now();animation.duration=duration;if(!lazy){chart.animating=true;}for(i=0,ilen=animations.length;i<ilen;++i){if(animations[i].chart===chart){animations[i]=animation;return;}}animations.push(animation);// If there are no animations queued, manually kickstart a digest, for lack of a better word\nif(animations.length===1){this.requestAnimationFrame();}},cancelAnimation:function cancelAnimation(chart){var index=helpers$1.findIndex(this.animations,function(animation){return animation.chart===chart;});if(index!==-1){this.animations.splice(index,1);chart.animating=false;}},requestAnimationFrame:function requestAnimationFrame(){var me=this;if(me.request===null){// Skip animation frame requests until the active one is executed.\n// This can happen when processing mouse events, e.g. 'mousemove'\n// and 'mouseout' events will trigger multiple renders.\nme.request=helpers$1.requestAnimFrame.call(window,function(){me.request=null;me.startDigest();});}},/**\n\t * @private\n\t */startDigest:function startDigest(){var me=this;me.advance();// Do we have more stuff to animate?\nif(me.animations.length>0){me.requestAnimationFrame();}},/**\n\t * @private\n\t */advance:function advance(){var animations=this.animations;var animation,chart,numSteps,nextStep;var i=0;// 1 animation per chart, so we are looping charts here\nwhile(i<animations.length){animation=animations[i];chart=animation.chart;numSteps=animation.numSteps;// Make sure that currentStep starts at 1\n// https://github.com/chartjs/Chart.js/issues/6104\nnextStep=Math.floor((Date.now()-animation.startTime)/animation.duration*numSteps)+1;animation.currentStep=Math.min(nextStep,numSteps);helpers$1.callback(animation.render,[chart,animation],chart);helpers$1.callback(animation.onAnimationProgress,[animation],chart);if(animation.currentStep>=numSteps){helpers$1.callback(animation.onAnimationComplete,[animation],chart);chart.animating=false;animations.splice(i,1);}else{++i;}}}};var resolve=helpers$1.options.resolve;var arrayEvents=['push','pop','shift','splice','unshift'];/**\n * Hooks the array methods that add or remove values ('push', pop', 'shift', 'splice',\n * 'unshift') and notify the listener AFTER the array has been altered. Listeners are\n * called on the 'onData*' callbacks (e.g. onDataPush, etc.) with same arguments.\n */function listenArrayEvents(array,listener){if(array._chartjs){array._chartjs.listeners.push(listener);return;}Object.defineProperty(array,'_chartjs',{configurable:true,enumerable:false,value:{listeners:[listener]}});arrayEvents.forEach(function(key){var method='onData'+key.charAt(0).toUpperCase()+key.slice(1);var base=array[key];Object.defineProperty(array,key,{configurable:true,enumerable:false,value:function value(){var args=Array.prototype.slice.call(arguments);var res=base.apply(this,args);helpers$1.each(array._chartjs.listeners,function(object){if(typeof object[method]==='function'){object[method].apply(object,args);}});return res;}});});}/**\n * Removes the given array event listener and cleanup extra attached properties (such as\n * the _chartjs stub and overridden methods) if array doesn't have any more listeners.\n */function unlistenArrayEvents(array,listener){var stub=array._chartjs;if(!stub){return;}var listeners=stub.listeners;var index=listeners.indexOf(listener);if(index!==-1){listeners.splice(index,1);}if(listeners.length>0){return;}arrayEvents.forEach(function(key){delete array[key];});delete array._chartjs;}// Base class for all dataset controllers (line, bar, etc)\nvar DatasetController=function DatasetController(chart,datasetIndex){this.initialize(chart,datasetIndex);};helpers$1.extend(DatasetController.prototype,{/**\n\t * Element type used to generate a meta dataset (e.g. Chart.element.Line).\n\t * @type {Chart.core.element}\n\t */datasetElementType:null,/**\n\t * Element type used to generate a meta data (e.g. Chart.element.Point).\n\t * @type {Chart.core.element}\n\t */dataElementType:null,/**\n\t * Dataset element option keys to be resolved in _resolveDatasetElementOptions.\n\t * A derived controller may override this to resolve controller-specific options.\n\t * The keys defined here are for backward compatibility for legend styles.\n\t * @private\n\t */_datasetElementOptions:['backgroundColor','borderCapStyle','borderColor','borderDash','borderDashOffset','borderJoinStyle','borderWidth'],/**\n\t * Data element option keys to be resolved in _resolveDataElementOptions.\n\t * A derived controller may override this to resolve controller-specific options.\n\t * The keys defined here are for backward compatibility for legend styles.\n\t * @private\n\t */_dataElementOptions:['backgroundColor','borderColor','borderWidth','pointStyle'],initialize:function initialize(chart,datasetIndex){var me=this;me.chart=chart;me.index=datasetIndex;me.linkScales();me.addElements();me._type=me.getMeta().type;},updateIndex:function updateIndex(datasetIndex){this.index=datasetIndex;},linkScales:function linkScales(){var me=this;var meta=me.getMeta();var chart=me.chart;var scales=chart.scales;var dataset=me.getDataset();var scalesOpts=chart.options.scales;if(meta.xAxisID===null||!(meta.xAxisID in scales)||dataset.xAxisID){meta.xAxisID=dataset.xAxisID||scalesOpts.xAxes[0].id;}if(meta.yAxisID===null||!(meta.yAxisID in scales)||dataset.yAxisID){meta.yAxisID=dataset.yAxisID||scalesOpts.yAxes[0].id;}},getDataset:function getDataset(){return this.chart.data.datasets[this.index];},getMeta:function getMeta(){return this.chart.getDatasetMeta(this.index);},getScaleForId:function getScaleForId(scaleID){return this.chart.scales[scaleID];},/**\n\t * @private\n\t */_getValueScaleId:function _getValueScaleId(){return this.getMeta().yAxisID;},/**\n\t * @private\n\t */_getIndexScaleId:function _getIndexScaleId(){return this.getMeta().xAxisID;},/**\n\t * @private\n\t */_getValueScale:function _getValueScale(){return this.getScaleForId(this._getValueScaleId());},/**\n\t * @private\n\t */_getIndexScale:function _getIndexScale(){return this.getScaleForId(this._getIndexScaleId());},reset:function reset(){this._update(true);},/**\n\t * @private\n\t */destroy:function destroy(){if(this._data){unlistenArrayEvents(this._data,this);}},createMetaDataset:function createMetaDataset(){var me=this;var type=me.datasetElementType;return type&&new type({_chart:me.chart,_datasetIndex:me.index});},createMetaData:function createMetaData(index){var me=this;var type=me.dataElementType;return type&&new type({_chart:me.chart,_datasetIndex:me.index,_index:index});},addElements:function addElements(){var me=this;var meta=me.getMeta();var data=me.getDataset().data||[];var metaData=meta.data;var i,ilen;for(i=0,ilen=data.length;i<ilen;++i){metaData[i]=metaData[i]||me.createMetaData(i);}meta.dataset=meta.dataset||me.createMetaDataset();},addElementAndReset:function addElementAndReset(index){var element=this.createMetaData(index);this.getMeta().data.splice(index,0,element);this.updateElement(element,index,true);},buildOrUpdateElements:function buildOrUpdateElements(){var me=this;var dataset=me.getDataset();var data=dataset.data||(dataset.data=[]);// In order to correctly handle data addition/deletion animation (an thus simulate\n// real-time charts), we need to monitor these data modifications and synchronize\n// the internal meta data accordingly.\nif(me._data!==data){if(me._data){// This case happens when the user replaced the data array instance.\nunlistenArrayEvents(me._data,me);}if(data&&Object.isExtensible(data)){listenArrayEvents(data,me);}me._data=data;}// Re-sync meta data in case the user replaced the data array or if we missed\n// any updates and so make sure that we handle number of datapoints changing.\nme.resyncElements();},/**\n\t * Returns the merged user-supplied and default dataset-level options\n\t * @private\n\t */_configure:function _configure(){var me=this;me._config=helpers$1.merge({},[me.chart.options.datasets[me._type],me.getDataset()],{merger:function merger(key,target,source){if(key!=='_meta'&&key!=='data'){helpers$1._merger(key,target,source);}}});},_update:function _update(reset){var me=this;me._configure();me._cachedDataOpts=null;me.update(reset);},update:helpers$1.noop,transition:function transition(easingValue){var meta=this.getMeta();var elements=meta.data||[];var ilen=elements.length;var i=0;for(;i<ilen;++i){elements[i].transition(easingValue);}if(meta.dataset){meta.dataset.transition(easingValue);}},draw:function draw(){var meta=this.getMeta();var elements=meta.data||[];var ilen=elements.length;var i=0;if(meta.dataset){meta.dataset.draw();}for(;i<ilen;++i){elements[i].draw();}},/**\n\t * Returns a set of predefined style properties that should be used to represent the dataset\n\t * or the data if the index is specified\n\t * @param {number} index - data index\n\t * @return {IStyleInterface} style object\n\t */getStyle:function getStyle(index){var me=this;var meta=me.getMeta();var dataset=meta.dataset;var style;me._configure();if(dataset&&index===undefined){style=me._resolveDatasetElementOptions(dataset||{});}else{index=index||0;style=me._resolveDataElementOptions(meta.data[index]||{},index);}if(style.fill===false||style.fill===null){style.backgroundColor=style.borderColor;}return style;},/**\n\t * @private\n\t */_resolveDatasetElementOptions:function _resolveDatasetElementOptions(element,hover){var me=this;var chart=me.chart;var datasetOpts=me._config;var custom=element.custom||{};var options=chart.options.elements[me.datasetElementType.prototype._type]||{};var elementOptions=me._datasetElementOptions;var values={};var i,ilen,key,readKey;// Scriptable options\nvar context={chart:chart,dataset:me.getDataset(),datasetIndex:me.index,hover:hover};for(i=0,ilen=elementOptions.length;i<ilen;++i){key=elementOptions[i];readKey=hover?'hover'+key.charAt(0).toUpperCase()+key.slice(1):key;values[key]=resolve([custom[readKey],datasetOpts[readKey],options[readKey]],context);}return values;},/**\n\t * @private\n\t */_resolveDataElementOptions:function _resolveDataElementOptions(element,index){var me=this;var custom=element&&element.custom;var cached=me._cachedDataOpts;if(cached&&!custom){return cached;}var chart=me.chart;var datasetOpts=me._config;var options=chart.options.elements[me.dataElementType.prototype._type]||{};var elementOptions=me._dataElementOptions;var values={};// Scriptable options\nvar context={chart:chart,dataIndex:index,dataset:me.getDataset(),datasetIndex:me.index};// `resolve` sets cacheable to `false` if any option is indexed or scripted\nvar info={cacheable:!custom};var keys,i,ilen,key;custom=custom||{};if(helpers$1.isArray(elementOptions)){for(i=0,ilen=elementOptions.length;i<ilen;++i){key=elementOptions[i];values[key]=resolve([custom[key],datasetOpts[key],options[key]],context,index,info);}}else{keys=Object.keys(elementOptions);for(i=0,ilen=keys.length;i<ilen;++i){key=keys[i];values[key]=resolve([custom[key],datasetOpts[elementOptions[key]],datasetOpts[key],options[key]],context,index,info);}}if(info.cacheable){me._cachedDataOpts=Object.freeze(values);}return values;},removeHoverStyle:function removeHoverStyle(element){helpers$1.merge(element._model,element.$previousStyle||{});delete element.$previousStyle;},setHoverStyle:function setHoverStyle(element){var dataset=this.chart.data.datasets[element._datasetIndex];var index=element._index;var custom=element.custom||{};var model=element._model;var getHoverColor=helpers$1.getHoverColor;element.$previousStyle={backgroundColor:model.backgroundColor,borderColor:model.borderColor,borderWidth:model.borderWidth};model.backgroundColor=resolve([custom.hoverBackgroundColor,dataset.hoverBackgroundColor,getHoverColor(model.backgroundColor)],undefined,index);model.borderColor=resolve([custom.hoverBorderColor,dataset.hoverBorderColor,getHoverColor(model.borderColor)],undefined,index);model.borderWidth=resolve([custom.hoverBorderWidth,dataset.hoverBorderWidth,model.borderWidth],undefined,index);},/**\n\t * @private\n\t */_removeDatasetHoverStyle:function _removeDatasetHoverStyle(){var element=this.getMeta().dataset;if(element){this.removeHoverStyle(element);}},/**\n\t * @private\n\t */_setDatasetHoverStyle:function _setDatasetHoverStyle(){var element=this.getMeta().dataset;var prev={};var i,ilen,key,keys,hoverOptions,model;if(!element){return;}model=element._model;hoverOptions=this._resolveDatasetElementOptions(element,true);keys=Object.keys(hoverOptions);for(i=0,ilen=keys.length;i<ilen;++i){key=keys[i];prev[key]=model[key];model[key]=hoverOptions[key];}element.$previousStyle=prev;},/**\n\t * @private\n\t */resyncElements:function resyncElements(){var me=this;var meta=me.getMeta();var data=me.getDataset().data;var numMeta=meta.data.length;var numData=data.length;if(numData<numMeta){meta.data.splice(numData,numMeta-numData);}else if(numData>numMeta){me.insertElements(numMeta,numData-numMeta);}},/**\n\t * @private\n\t */insertElements:function insertElements(start,count){for(var i=0;i<count;++i){this.addElementAndReset(start+i);}},/**\n\t * @private\n\t */onDataPush:function onDataPush(){var count=arguments.length;this.insertElements(this.getDataset().data.length-count,count);},/**\n\t * @private\n\t */onDataPop:function onDataPop(){this.getMeta().data.pop();},/**\n\t * @private\n\t */onDataShift:function onDataShift(){this.getMeta().data.shift();},/**\n\t * @private\n\t */onDataSplice:function onDataSplice(start,count){this.getMeta().data.splice(start,count);this.insertElements(start,arguments.length-2);},/**\n\t * @private\n\t */onDataUnshift:function onDataUnshift(){this.insertElements(0,arguments.length);}});DatasetController.extend=helpers$1.inherits;var core_datasetController=DatasetController;var TAU=Math.PI*2;core_defaults._set('global',{elements:{arc:{backgroundColor:core_defaults.global.defaultColor,borderColor:'#fff',borderWidth:2,borderAlign:'center'}}});function clipArc(ctx,arc){var startAngle=arc.startAngle;var endAngle=arc.endAngle;var pixelMargin=arc.pixelMargin;var angleMargin=pixelMargin/arc.outerRadius;var x=arc.x;var y=arc.y;// Draw an inner border by cliping the arc and drawing a double-width border\n// Enlarge the clipping arc by 0.33 pixels to eliminate glitches between borders\nctx.beginPath();ctx.arc(x,y,arc.outerRadius,startAngle-angleMargin,endAngle+angleMargin);if(arc.innerRadius>pixelMargin){angleMargin=pixelMargin/arc.innerRadius;ctx.arc(x,y,arc.innerRadius-pixelMargin,endAngle+angleMargin,startAngle-angleMargin,true);}else{ctx.arc(x,y,pixelMargin,endAngle+Math.PI/2,startAngle-Math.PI/2);}ctx.closePath();ctx.clip();}function drawFullCircleBorders(ctx,vm,arc,inner){var endAngle=arc.endAngle;var i;if(inner){arc.endAngle=arc.startAngle+TAU;clipArc(ctx,arc);arc.endAngle=endAngle;if(arc.endAngle===arc.startAngle&&arc.fullCircles){arc.endAngle+=TAU;arc.fullCircles--;}}ctx.beginPath();ctx.arc(arc.x,arc.y,arc.innerRadius,arc.startAngle+TAU,arc.startAngle,true);for(i=0;i<arc.fullCircles;++i){ctx.stroke();}ctx.beginPath();ctx.arc(arc.x,arc.y,vm.outerRadius,arc.startAngle,arc.startAngle+TAU);for(i=0;i<arc.fullCircles;++i){ctx.stroke();}}function drawBorder(ctx,vm,arc){var inner=vm.borderAlign==='inner';if(inner){ctx.lineWidth=vm.borderWidth*2;ctx.lineJoin='round';}else{ctx.lineWidth=vm.borderWidth;ctx.lineJoin='bevel';}if(arc.fullCircles){drawFullCircleBorders(ctx,vm,arc,inner);}if(inner){clipArc(ctx,arc);}ctx.beginPath();ctx.arc(arc.x,arc.y,vm.outerRadius,arc.startAngle,arc.endAngle);ctx.arc(arc.x,arc.y,arc.innerRadius,arc.endAngle,arc.startAngle,true);ctx.closePath();ctx.stroke();}var element_arc=core_element.extend({_type:'arc',inLabelRange:function inLabelRange(mouseX){var vm=this._view;if(vm){return Math.pow(mouseX-vm.x,2)<Math.pow(vm.radius+vm.hoverRadius,2);}return false;},inRange:function inRange(chartX,chartY){var vm=this._view;if(vm){var pointRelativePosition=helpers$1.getAngleFromPoint(vm,{x:chartX,y:chartY});var angle=pointRelativePosition.angle;var distance=pointRelativePosition.distance;// Sanitise angle range\nvar startAngle=vm.startAngle;var endAngle=vm.endAngle;while(endAngle<startAngle){endAngle+=TAU;}while(angle>endAngle){angle-=TAU;}while(angle<startAngle){angle+=TAU;}// Check if within the range of the open/close angle\nvar betweenAngles=angle>=startAngle&&angle<=endAngle;var withinRadius=distance>=vm.innerRadius&&distance<=vm.outerRadius;return betweenAngles&&withinRadius;}return false;},getCenterPoint:function getCenterPoint(){var vm=this._view;var halfAngle=(vm.startAngle+vm.endAngle)/2;var halfRadius=(vm.innerRadius+vm.outerRadius)/2;return{x:vm.x+Math.cos(halfAngle)*halfRadius,y:vm.y+Math.sin(halfAngle)*halfRadius};},getArea:function getArea(){var vm=this._view;return Math.PI*((vm.endAngle-vm.startAngle)/(2*Math.PI))*(Math.pow(vm.outerRadius,2)-Math.pow(vm.innerRadius,2));},tooltipPosition:function tooltipPosition(){var vm=this._view;var centreAngle=vm.startAngle+(vm.endAngle-vm.startAngle)/2;var rangeFromCentre=(vm.outerRadius-vm.innerRadius)/2+vm.innerRadius;return{x:vm.x+Math.cos(centreAngle)*rangeFromCentre,y:vm.y+Math.sin(centreAngle)*rangeFromCentre};},draw:function draw(){var ctx=this._chart.ctx;var vm=this._view;var pixelMargin=vm.borderAlign==='inner'?0.33:0;var arc={x:vm.x,y:vm.y,innerRadius:vm.innerRadius,outerRadius:Math.max(vm.outerRadius-pixelMargin,0),pixelMargin:pixelMargin,startAngle:vm.startAngle,endAngle:vm.endAngle,fullCircles:Math.floor(vm.circumference/TAU)};var i;ctx.save();ctx.fillStyle=vm.backgroundColor;ctx.strokeStyle=vm.borderColor;if(arc.fullCircles){arc.endAngle=arc.startAngle+TAU;ctx.beginPath();ctx.arc(arc.x,arc.y,arc.outerRadius,arc.startAngle,arc.endAngle);ctx.arc(arc.x,arc.y,arc.innerRadius,arc.endAngle,arc.startAngle,true);ctx.closePath();for(i=0;i<arc.fullCircles;++i){ctx.fill();}arc.endAngle=arc.startAngle+vm.circumference%TAU;}ctx.beginPath();ctx.arc(arc.x,arc.y,arc.outerRadius,arc.startAngle,arc.endAngle);ctx.arc(arc.x,arc.y,arc.innerRadius,arc.endAngle,arc.startAngle,true);ctx.closePath();ctx.fill();if(vm.borderWidth){drawBorder(ctx,vm,arc);}ctx.restore();}});var valueOrDefault$1=helpers$1.valueOrDefault;var defaultColor=core_defaults.global.defaultColor;core_defaults._set('global',{elements:{line:{tension:0.4,backgroundColor:defaultColor,borderWidth:3,borderColor:defaultColor,borderCapStyle:'butt',borderDash:[],borderDashOffset:0.0,borderJoinStyle:'miter',capBezierPoints:true,fill:true// do we fill in the area between the line and its base axis\n}}});var element_line=core_element.extend({_type:'line',draw:function draw(){var me=this;var vm=me._view;var ctx=me._chart.ctx;var spanGaps=vm.spanGaps;var points=me._children.slice();// clone array\nvar globalDefaults=core_defaults.global;var globalOptionLineElements=globalDefaults.elements.line;var lastDrawnIndex=-1;var closePath=me._loop;var index,previous,currentVM;if(!points.length){return;}if(me._loop){for(index=0;index<points.length;++index){previous=helpers$1.previousItem(points,index);// If the line has an open path, shift the point array\nif(!points[index]._view.skip&&previous._view.skip){points=points.slice(index).concat(points.slice(0,index));closePath=spanGaps;break;}}// If the line has a close path, add the first point again\nif(closePath){points.push(points[0]);}}ctx.save();// Stroke Line Options\nctx.lineCap=vm.borderCapStyle||globalOptionLineElements.borderCapStyle;// IE 9 and 10 do not support line dash\nif(ctx.setLineDash){ctx.setLineDash(vm.borderDash||globalOptionLineElements.borderDash);}ctx.lineDashOffset=valueOrDefault$1(vm.borderDashOffset,globalOptionLineElements.borderDashOffset);ctx.lineJoin=vm.borderJoinStyle||globalOptionLineElements.borderJoinStyle;ctx.lineWidth=valueOrDefault$1(vm.borderWidth,globalOptionLineElements.borderWidth);ctx.strokeStyle=vm.borderColor||globalDefaults.defaultColor;// Stroke Line\nctx.beginPath();// First point moves to it's starting position no matter what\ncurrentVM=points[0]._view;if(!currentVM.skip){ctx.moveTo(currentVM.x,currentVM.y);lastDrawnIndex=0;}for(index=1;index<points.length;++index){currentVM=points[index]._view;previous=lastDrawnIndex===-1?helpers$1.previousItem(points,index):points[lastDrawnIndex];if(!currentVM.skip){if(lastDrawnIndex!==index-1&&!spanGaps||lastDrawnIndex===-1){// There was a gap and this is the first point after the gap\nctx.moveTo(currentVM.x,currentVM.y);}else{// Line to next point\nhelpers$1.canvas.lineTo(ctx,previous._view,currentVM);}lastDrawnIndex=index;}}if(closePath){ctx.closePath();}ctx.stroke();ctx.restore();}});var valueOrDefault$2=helpers$1.valueOrDefault;var defaultColor$1=core_defaults.global.defaultColor;core_defaults._set('global',{elements:{point:{radius:3,pointStyle:'circle',backgroundColor:defaultColor$1,borderColor:defaultColor$1,borderWidth:1,// Hover\nhitRadius:1,hoverRadius:4,hoverBorderWidth:1}}});function xRange(mouseX){var vm=this._view;return vm?Math.abs(mouseX-vm.x)<vm.radius+vm.hitRadius:false;}function yRange(mouseY){var vm=this._view;return vm?Math.abs(mouseY-vm.y)<vm.radius+vm.hitRadius:false;}var element_point=core_element.extend({_type:'point',inRange:function inRange(mouseX,mouseY){var vm=this._view;return vm?Math.pow(mouseX-vm.x,2)+Math.pow(mouseY-vm.y,2)<Math.pow(vm.hitRadius+vm.radius,2):false;},inLabelRange:xRange,inXRange:xRange,inYRange:yRange,getCenterPoint:function getCenterPoint(){var vm=this._view;return{x:vm.x,y:vm.y};},getArea:function getArea(){return Math.PI*Math.pow(this._view.radius,2);},tooltipPosition:function tooltipPosition(){var vm=this._view;return{x:vm.x,y:vm.y,padding:vm.radius+vm.borderWidth};},draw:function draw(chartArea){var vm=this._view;var ctx=this._chart.ctx;var pointStyle=vm.pointStyle;var rotation=vm.rotation;var radius=vm.radius;var x=vm.x;var y=vm.y;var globalDefaults=core_defaults.global;var defaultColor=globalDefaults.defaultColor;// eslint-disable-line no-shadow\nif(vm.skip){return;}// Clipping for Points.\nif(chartArea===undefined||helpers$1.canvas._isPointInArea(vm,chartArea)){ctx.strokeStyle=vm.borderColor||defaultColor;ctx.lineWidth=valueOrDefault$2(vm.borderWidth,globalDefaults.elements.point.borderWidth);ctx.fillStyle=vm.backgroundColor||defaultColor;helpers$1.canvas.drawPoint(ctx,pointStyle,radius,x,y,rotation);}}});var defaultColor$2=core_defaults.global.defaultColor;core_defaults._set('global',{elements:{rectangle:{backgroundColor:defaultColor$2,borderColor:defaultColor$2,borderSkipped:'bottom',borderWidth:0}}});function isVertical(vm){return vm&&vm.width!==undefined;}/**\n * Helper function to get the bounds of the bar regardless of the orientation\n * @param bar {Chart.Element.Rectangle} the bar\n * @return {Bounds} bounds of the bar\n * @private\n */function getBarBounds(vm){var x1,x2,y1,y2,half;if(isVertical(vm)){half=vm.width/2;x1=vm.x-half;x2=vm.x+half;y1=Math.min(vm.y,vm.base);y2=Math.max(vm.y,vm.base);}else{half=vm.height/2;x1=Math.min(vm.x,vm.base);x2=Math.max(vm.x,vm.base);y1=vm.y-half;y2=vm.y+half;}return{left:x1,top:y1,right:x2,bottom:y2};}function swap(orig,v1,v2){return orig===v1?v2:orig===v2?v1:orig;}function parseBorderSkipped(vm){var edge=vm.borderSkipped;var res={};if(!edge){return res;}if(vm.horizontal){if(vm.base>vm.x){edge=swap(edge,'left','right');}}else if(vm.base<vm.y){edge=swap(edge,'bottom','top');}res[edge]=true;return res;}function parseBorderWidth(vm,maxW,maxH){var value=vm.borderWidth;var skip=parseBorderSkipped(vm);var t,r,b,l;if(helpers$1.isObject(value)){t=+value.top||0;r=+value.right||0;b=+value.bottom||0;l=+value.left||0;}else{t=r=b=l=+value||0;}return{t:skip.top||t<0?0:t>maxH?maxH:t,r:skip.right||r<0?0:r>maxW?maxW:r,b:skip.bottom||b<0?0:b>maxH?maxH:b,l:skip.left||l<0?0:l>maxW?maxW:l};}function boundingRects(vm){var bounds=getBarBounds(vm);var width=bounds.right-bounds.left;var height=bounds.bottom-bounds.top;var border=parseBorderWidth(vm,width/2,height/2);return{outer:{x:bounds.left,y:bounds.top,w:width,h:height},inner:{x:bounds.left+border.l,y:bounds.top+border.t,w:width-border.l-border.r,h:height-border.t-border.b}};}function _inRange(vm,x,y){var skipX=x===null;var skipY=y===null;var bounds=!vm||skipX&&skipY?false:getBarBounds(vm);return bounds&&(skipX||x>=bounds.left&&x<=bounds.right)&&(skipY||y>=bounds.top&&y<=bounds.bottom);}var element_rectangle=core_element.extend({_type:'rectangle',draw:function draw(){var ctx=this._chart.ctx;var vm=this._view;var rects=boundingRects(vm);var outer=rects.outer;var inner=rects.inner;ctx.fillStyle=vm.backgroundColor;ctx.fillRect(outer.x,outer.y,outer.w,outer.h);if(outer.w===inner.w&&outer.h===inner.h){return;}ctx.save();ctx.beginPath();ctx.rect(outer.x,outer.y,outer.w,outer.h);ctx.clip();ctx.fillStyle=vm.borderColor;ctx.rect(inner.x,inner.y,inner.w,inner.h);ctx.fill('evenodd');ctx.restore();},height:function height(){var vm=this._view;return vm.base-vm.y;},inRange:function inRange(mouseX,mouseY){return _inRange(this._view,mouseX,mouseY);},inLabelRange:function inLabelRange(mouseX,mouseY){var vm=this._view;return isVertical(vm)?_inRange(vm,mouseX,null):_inRange(vm,null,mouseY);},inXRange:function inXRange(mouseX){return _inRange(this._view,mouseX,null);},inYRange:function inYRange(mouseY){return _inRange(this._view,null,mouseY);},getCenterPoint:function getCenterPoint(){var vm=this._view;var x,y;if(isVertical(vm)){x=vm.x;y=(vm.y+vm.base)/2;}else{x=(vm.x+vm.base)/2;y=vm.y;}return{x:x,y:y};},getArea:function getArea(){var vm=this._view;return isVertical(vm)?vm.width*Math.abs(vm.y-vm.base):vm.height*Math.abs(vm.x-vm.base);},tooltipPosition:function tooltipPosition(){var vm=this._view;return{x:vm.x,y:vm.y};}});var elements={};var Arc=element_arc;var Line=element_line;var Point=element_point;var Rectangle=element_rectangle;elements.Arc=Arc;elements.Line=Line;elements.Point=Point;elements.Rectangle=Rectangle;var deprecated=helpers$1._deprecated;var valueOrDefault$3=helpers$1.valueOrDefault;core_defaults._set('bar',{hover:{mode:'label'},scales:{xAxes:[{type:'category',offset:true,gridLines:{offsetGridLines:true}}],yAxes:[{type:'linear'}]}});core_defaults._set('global',{datasets:{bar:{categoryPercentage:0.8,barPercentage:0.9}}});/**\n * Computes the \"optimal\" sample size to maintain bars equally sized while preventing overlap.\n * @private\n */function computeMinSampleSize(scale,pixels){var min=scale._length;var prev,curr,i,ilen;for(i=1,ilen=pixels.length;i<ilen;++i){min=Math.min(min,Math.abs(pixels[i]-pixels[i-1]));}for(i=0,ilen=scale.getTicks().length;i<ilen;++i){curr=scale.getPixelForTick(i);min=i>0?Math.min(min,Math.abs(curr-prev)):min;prev=curr;}return min;}/**\n * Computes an \"ideal\" category based on the absolute bar thickness or, if undefined or null,\n * uses the smallest interval (see computeMinSampleSize) that prevents bar overlapping. This\n * mode currently always generates bars equally sized (until we introduce scriptable options?).\n * @private\n */function computeFitCategoryTraits(index,ruler,options){var thickness=options.barThickness;var count=ruler.stackCount;var curr=ruler.pixels[index];var min=helpers$1.isNullOrUndef(thickness)?computeMinSampleSize(ruler.scale,ruler.pixels):-1;var size,ratio;if(helpers$1.isNullOrUndef(thickness)){size=min*options.categoryPercentage;ratio=options.barPercentage;}else{// When bar thickness is enforced, category and bar percentages are ignored.\n// Note(SB): we could add support for relative bar thickness (e.g. barThickness: '50%')\n// and deprecate barPercentage since this value is ignored when thickness is absolute.\nsize=thickness*count;ratio=1;}return{chunk:size/count,ratio:ratio,start:curr-size/2};}/**\n * Computes an \"optimal\" category that globally arranges bars side by side (no gap when\n * percentage options are 1), based on the previous and following categories. This mode\n * generates bars with different widths when data are not evenly spaced.\n * @private\n */function computeFlexCategoryTraits(index,ruler,options){var pixels=ruler.pixels;var curr=pixels[index];var prev=index>0?pixels[index-1]:null;var next=index<pixels.length-1?pixels[index+1]:null;var percent=options.categoryPercentage;var start,size;if(prev===null){// first data: its size is double based on the next point or,\n// if it's also the last data, we use the scale size.\nprev=curr-(next===null?ruler.end-ruler.start:next-curr);}if(next===null){// last data: its size is also double based on the previous point.\nnext=curr+curr-prev;}start=curr-(curr-Math.min(prev,next))/2*percent;size=Math.abs(next-prev)/2*percent;return{chunk:size/ruler.stackCount,ratio:options.barPercentage,start:start};}var controller_bar=core_datasetController.extend({dataElementType:elements.Rectangle,/**\n\t * @private\n\t */_dataElementOptions:['backgroundColor','borderColor','borderSkipped','borderWidth','barPercentage','barThickness','categoryPercentage','maxBarThickness','minBarLength'],initialize:function initialize(){var me=this;var meta,scaleOpts;core_datasetController.prototype.initialize.apply(me,arguments);meta=me.getMeta();meta.stack=me.getDataset().stack;meta.bar=true;scaleOpts=me._getIndexScale().options;deprecated('bar chart',scaleOpts.barPercentage,'scales.[x/y]Axes.barPercentage','dataset.barPercentage');deprecated('bar chart',scaleOpts.barThickness,'scales.[x/y]Axes.barThickness','dataset.barThickness');deprecated('bar chart',scaleOpts.categoryPercentage,'scales.[x/y]Axes.categoryPercentage','dataset.categoryPercentage');deprecated('bar chart',me._getValueScale().options.minBarLength,'scales.[x/y]Axes.minBarLength','dataset.minBarLength');deprecated('bar chart',scaleOpts.maxBarThickness,'scales.[x/y]Axes.maxBarThickness','dataset.maxBarThickness');},update:function update(reset){var me=this;var rects=me.getMeta().data;var i,ilen;me._ruler=me.getRuler();for(i=0,ilen=rects.length;i<ilen;++i){me.updateElement(rects[i],i,reset);}},updateElement:function updateElement(rectangle,index,reset){var me=this;var meta=me.getMeta();var dataset=me.getDataset();var options=me._resolveDataElementOptions(rectangle,index);rectangle._xScale=me.getScaleForId(meta.xAxisID);rectangle._yScale=me.getScaleForId(meta.yAxisID);rectangle._datasetIndex=me.index;rectangle._index=index;rectangle._model={backgroundColor:options.backgroundColor,borderColor:options.borderColor,borderSkipped:options.borderSkipped,borderWidth:options.borderWidth,datasetLabel:dataset.label,label:me.chart.data.labels[index]};if(helpers$1.isArray(dataset.data[index])){rectangle._model.borderSkipped=null;}me._updateElementGeometry(rectangle,index,reset,options);rectangle.pivot();},/**\n\t * @private\n\t */_updateElementGeometry:function _updateElementGeometry(rectangle,index,reset,options){var me=this;var model=rectangle._model;var vscale=me._getValueScale();var base=vscale.getBasePixel();var horizontal=vscale.isHorizontal();var ruler=me._ruler||me.getRuler();var vpixels=me.calculateBarValuePixels(me.index,index,options);var ipixels=me.calculateBarIndexPixels(me.index,index,ruler,options);model.horizontal=horizontal;model.base=reset?base:vpixels.base;model.x=horizontal?reset?base:vpixels.head:ipixels.center;model.y=horizontal?ipixels.center:reset?base:vpixels.head;model.height=horizontal?ipixels.size:undefined;model.width=horizontal?undefined:ipixels.size;},/**\n\t * Returns the stacks based on groups and bar visibility.\n\t * @param {number} [last] - The dataset index\n\t * @returns {string[]} The list of stack IDs\n\t * @private\n\t */_getStacks:function _getStacks(last){var me=this;var scale=me._getIndexScale();var metasets=scale._getMatchingVisibleMetas(me._type);var stacked=scale.options.stacked;var ilen=metasets.length;var stacks=[];var i,meta;for(i=0;i<ilen;++i){meta=metasets[i];// stacked   | meta.stack\n//           | found | not found | undefined\n// false     |   x   |     x     |     x\n// true      |       |     x     |\n// undefined |       |     x     |     x\nif(stacked===false||stacks.indexOf(meta.stack)===-1||stacked===undefined&&meta.stack===undefined){stacks.push(meta.stack);}if(meta.index===last){break;}}return stacks;},/**\n\t * Returns the effective number of stacks based on groups and bar visibility.\n\t * @private\n\t */getStackCount:function getStackCount(){return this._getStacks().length;},/**\n\t * Returns the stack index for the given dataset based on groups and bar visibility.\n\t * @param {number} [datasetIndex] - The dataset index\n\t * @param {string} [name] - The stack name to find\n\t * @returns {number} The stack index\n\t * @private\n\t */getStackIndex:function getStackIndex(datasetIndex,name){var stacks=this._getStacks(datasetIndex);var index=name!==undefined?stacks.indexOf(name):-1;// indexOf returns -1 if element is not present\nreturn index===-1?stacks.length-1:index;},/**\n\t * @private\n\t */getRuler:function getRuler(){var me=this;var scale=me._getIndexScale();var pixels=[];var i,ilen;for(i=0,ilen=me.getMeta().data.length;i<ilen;++i){pixels.push(scale.getPixelForValue(null,i,me.index));}return{pixels:pixels,start:scale._startPixel,end:scale._endPixel,stackCount:me.getStackCount(),scale:scale};},/**\n\t * Note: pixel values are not clamped to the scale area.\n\t * @private\n\t */calculateBarValuePixels:function calculateBarValuePixels(datasetIndex,index,options){var me=this;var chart=me.chart;var scale=me._getValueScale();var isHorizontal=scale.isHorizontal();var datasets=chart.data.datasets;var metasets=scale._getMatchingVisibleMetas(me._type);var value=scale._parseValue(datasets[datasetIndex].data[index]);var minBarLength=options.minBarLength;var stacked=scale.options.stacked;var stack=me.getMeta().stack;var start=value.start===undefined?0:value.max>=0&&value.min>=0?value.min:value.max;var length=value.start===undefined?value.end:value.max>=0&&value.min>=0?value.max-value.min:value.min-value.max;var ilen=metasets.length;var i,imeta,ivalue,base,head,size,stackLength;if(stacked||stacked===undefined&&stack!==undefined){for(i=0;i<ilen;++i){imeta=metasets[i];if(imeta.index===datasetIndex){break;}if(imeta.stack===stack){stackLength=scale._parseValue(datasets[imeta.index].data[index]);ivalue=stackLength.start===undefined?stackLength.end:stackLength.min>=0&&stackLength.max>=0?stackLength.max:stackLength.min;if(value.min<0&&ivalue<0||value.max>=0&&ivalue>0){start+=ivalue;}}}}base=scale.getPixelForValue(start);head=scale.getPixelForValue(start+length);size=head-base;if(minBarLength!==undefined&&Math.abs(size)<minBarLength){size=minBarLength;if(length>=0&&!isHorizontal||length<0&&isHorizontal){head=base-minBarLength;}else{head=base+minBarLength;}}return{size:size,base:base,head:head,center:head+size/2};},/**\n\t * @private\n\t */calculateBarIndexPixels:function calculateBarIndexPixels(datasetIndex,index,ruler,options){var me=this;var range=options.barThickness==='flex'?computeFlexCategoryTraits(index,ruler,options):computeFitCategoryTraits(index,ruler,options);var stackIndex=me.getStackIndex(datasetIndex,me.getMeta().stack);var center=range.start+range.chunk*stackIndex+range.chunk/2;var size=Math.min(valueOrDefault$3(options.maxBarThickness,Infinity),range.chunk*range.ratio);return{base:center-size/2,head:center+size/2,center:center,size:size};},draw:function draw(){var me=this;var chart=me.chart;var scale=me._getValueScale();var rects=me.getMeta().data;var dataset=me.getDataset();var ilen=rects.length;var i=0;helpers$1.canvas.clipArea(chart.ctx,chart.chartArea);for(;i<ilen;++i){var val=scale._parseValue(dataset.data[i]);if(!isNaN(val.min)&&!isNaN(val.max)){rects[i].draw();}}helpers$1.canvas.unclipArea(chart.ctx);},/**\n\t * @private\n\t */_resolveDataElementOptions:function _resolveDataElementOptions(){var me=this;var values=helpers$1.extend({},core_datasetController.prototype._resolveDataElementOptions.apply(me,arguments));var indexOpts=me._getIndexScale().options;var valueOpts=me._getValueScale().options;values.barPercentage=valueOrDefault$3(indexOpts.barPercentage,values.barPercentage);values.barThickness=valueOrDefault$3(indexOpts.barThickness,values.barThickness);values.categoryPercentage=valueOrDefault$3(indexOpts.categoryPercentage,values.categoryPercentage);values.maxBarThickness=valueOrDefault$3(indexOpts.maxBarThickness,values.maxBarThickness);values.minBarLength=valueOrDefault$3(valueOpts.minBarLength,values.minBarLength);return values;}});var valueOrDefault$4=helpers$1.valueOrDefault;var resolve$1=helpers$1.options.resolve;core_defaults._set('bubble',{hover:{mode:'single'},scales:{xAxes:[{type:'linear',// bubble should probably use a linear scale by default\nposition:'bottom',id:'x-axis-0'// need an ID so datasets can reference the scale\n}],yAxes:[{type:'linear',position:'left',id:'y-axis-0'}]},tooltips:{callbacks:{title:function title(){// Title doesn't make sense for scatter since we format the data as a point\nreturn'';},label:function label(item,data){var datasetLabel=data.datasets[item.datasetIndex].label||'';var dataPoint=data.datasets[item.datasetIndex].data[item.index];return datasetLabel+': ('+item.xLabel+', '+item.yLabel+', '+dataPoint.r+')';}}}});var controller_bubble=core_datasetController.extend({/**\n\t * @protected\n\t */dataElementType:elements.Point,/**\n\t * @private\n\t */_dataElementOptions:['backgroundColor','borderColor','borderWidth','hoverBackgroundColor','hoverBorderColor','hoverBorderWidth','hoverRadius','hitRadius','pointStyle','rotation'],/**\n\t * @protected\n\t */update:function update(reset){var me=this;var meta=me.getMeta();var points=meta.data;// Update Points\nhelpers$1.each(points,function(point,index){me.updateElement(point,index,reset);});},/**\n\t * @protected\n\t */updateElement:function updateElement(point,index,reset){var me=this;var meta=me.getMeta();var custom=point.custom||{};var xScale=me.getScaleForId(meta.xAxisID);var yScale=me.getScaleForId(meta.yAxisID);var options=me._resolveDataElementOptions(point,index);var data=me.getDataset().data[index];var dsIndex=me.index;var x=reset?xScale.getPixelForDecimal(0.5):xScale.getPixelForValue(_typeof2(data)==='object'?data:NaN,index,dsIndex);var y=reset?yScale.getBasePixel():yScale.getPixelForValue(data,index,dsIndex);point._xScale=xScale;point._yScale=yScale;point._options=options;point._datasetIndex=dsIndex;point._index=index;point._model={backgroundColor:options.backgroundColor,borderColor:options.borderColor,borderWidth:options.borderWidth,hitRadius:options.hitRadius,pointStyle:options.pointStyle,rotation:options.rotation,radius:reset?0:options.radius,skip:custom.skip||isNaN(x)||isNaN(y),x:x,y:y};point.pivot();},/**\n\t * @protected\n\t */setHoverStyle:function setHoverStyle(point){var model=point._model;var options=point._options;var getHoverColor=helpers$1.getHoverColor;point.$previousStyle={backgroundColor:model.backgroundColor,borderColor:model.borderColor,borderWidth:model.borderWidth,radius:model.radius};model.backgroundColor=valueOrDefault$4(options.hoverBackgroundColor,getHoverColor(options.backgroundColor));model.borderColor=valueOrDefault$4(options.hoverBorderColor,getHoverColor(options.borderColor));model.borderWidth=valueOrDefault$4(options.hoverBorderWidth,options.borderWidth);model.radius=options.radius+options.hoverRadius;},/**\n\t * @private\n\t */_resolveDataElementOptions:function _resolveDataElementOptions(point,index){var me=this;var chart=me.chart;var dataset=me.getDataset();var custom=point.custom||{};var data=dataset.data[index]||{};var values=core_datasetController.prototype._resolveDataElementOptions.apply(me,arguments);// Scriptable options\nvar context={chart:chart,dataIndex:index,dataset:dataset,datasetIndex:me.index};// In case values were cached (and thus frozen), we need to clone the values\nif(me._cachedDataOpts===values){values=helpers$1.extend({},values);}// Custom radius resolution\nvalues.radius=resolve$1([custom.radius,data.r,me._config.radius,chart.options.elements.point.radius],context,index);return values;}});var valueOrDefault$5=helpers$1.valueOrDefault;var PI$1=Math.PI;var DOUBLE_PI$1=PI$1*2;var HALF_PI$1=PI$1/2;core_defaults._set('doughnut',{animation:{// Boolean - Whether we animate the rotation of the Doughnut\nanimateRotate:true,// Boolean - Whether we animate scaling the Doughnut from the centre\nanimateScale:false},hover:{mode:'single'},legendCallback:function legendCallback(chart){var list=document.createElement('ul');var data=chart.data;var datasets=data.datasets;var labels=data.labels;var i,ilen,listItem,listItemSpan;list.setAttribute('class',chart.id+'-legend');if(datasets.length){for(i=0,ilen=datasets[0].data.length;i<ilen;++i){listItem=list.appendChild(document.createElement('li'));listItemSpan=listItem.appendChild(document.createElement('span'));listItemSpan.style.backgroundColor=datasets[0].backgroundColor[i];if(labels[i]){listItem.appendChild(document.createTextNode(labels[i]));}}}return list.outerHTML;},legend:{labels:{generateLabels:function generateLabels(chart){var data=chart.data;if(data.labels.length&&data.datasets.length){return data.labels.map(function(label,i){var meta=chart.getDatasetMeta(0);var style=meta.controller.getStyle(i);return{text:label,fillStyle:style.backgroundColor,strokeStyle:style.borderColor,lineWidth:style.borderWidth,hidden:isNaN(data.datasets[0].data[i])||meta.data[i].hidden,// Extra data used for toggling the correct item\nindex:i};});}return[];}},onClick:function onClick(e,legendItem){var index=legendItem.index;var chart=this.chart;var i,ilen,meta;for(i=0,ilen=(chart.data.datasets||[]).length;i<ilen;++i){meta=chart.getDatasetMeta(i);// toggle visibility of index if exists\nif(meta.data[index]){meta.data[index].hidden=!meta.data[index].hidden;}}chart.update();}},// The percentage of the chart that we cut out of the middle.\ncutoutPercentage:50,// The rotation of the chart, where the first data arc begins.\nrotation:-HALF_PI$1,// The total circumference of the chart.\ncircumference:DOUBLE_PI$1,// Need to override these to give a nice default\ntooltips:{callbacks:{title:function title(){return'';},label:function label(tooltipItem,data){var dataLabel=data.labels[tooltipItem.index];var value=': '+data.datasets[tooltipItem.datasetIndex].data[tooltipItem.index];if(helpers$1.isArray(dataLabel)){// show value on first line of multiline label\n// need to clone because we are changing the value\ndataLabel=dataLabel.slice();dataLabel[0]+=value;}else{dataLabel+=value;}return dataLabel;}}}});var controller_doughnut=core_datasetController.extend({dataElementType:elements.Arc,linkScales:helpers$1.noop,/**\n\t * @private\n\t */_dataElementOptions:['backgroundColor','borderColor','borderWidth','borderAlign','hoverBackgroundColor','hoverBorderColor','hoverBorderWidth'],// Get index of the dataset in relation to the visible datasets. This allows determining the inner and outer radius correctly\ngetRingIndex:function getRingIndex(datasetIndex){var ringIndex=0;for(var j=0;j<datasetIndex;++j){if(this.chart.isDatasetVisible(j)){++ringIndex;}}return ringIndex;},update:function update(reset){var me=this;var chart=me.chart;var chartArea=chart.chartArea;var opts=chart.options;var ratioX=1;var ratioY=1;var offsetX=0;var offsetY=0;var meta=me.getMeta();var arcs=meta.data;var cutout=opts.cutoutPercentage/100||0;var circumference=opts.circumference;var chartWeight=me._getRingWeight(me.index);var maxWidth,maxHeight,i,ilen;// If the chart's circumference isn't a full circle, calculate size as a ratio of the width/height of the arc\nif(circumference<DOUBLE_PI$1){var startAngle=opts.rotation%DOUBLE_PI$1;startAngle+=startAngle>=PI$1?-DOUBLE_PI$1:startAngle<-PI$1?DOUBLE_PI$1:0;var endAngle=startAngle+circumference;var startX=Math.cos(startAngle);var startY=Math.sin(startAngle);var endX=Math.cos(endAngle);var endY=Math.sin(endAngle);var contains0=startAngle<=0&&endAngle>=0||endAngle>=DOUBLE_PI$1;var contains90=startAngle<=HALF_PI$1&&endAngle>=HALF_PI$1||endAngle>=DOUBLE_PI$1+HALF_PI$1;var contains180=startAngle===-PI$1||endAngle>=PI$1;var contains270=startAngle<=-HALF_PI$1&&endAngle>=-HALF_PI$1||endAngle>=PI$1+HALF_PI$1;var minX=contains180?-1:Math.min(startX,startX*cutout,endX,endX*cutout);var minY=contains270?-1:Math.min(startY,startY*cutout,endY,endY*cutout);var maxX=contains0?1:Math.max(startX,startX*cutout,endX,endX*cutout);var maxY=contains90?1:Math.max(startY,startY*cutout,endY,endY*cutout);ratioX=(maxX-minX)/2;ratioY=(maxY-minY)/2;offsetX=-(maxX+minX)/2;offsetY=-(maxY+minY)/2;}for(i=0,ilen=arcs.length;i<ilen;++i){arcs[i]._options=me._resolveDataElementOptions(arcs[i],i);}chart.borderWidth=me.getMaxBorderWidth();maxWidth=(chartArea.right-chartArea.left-chart.borderWidth)/ratioX;maxHeight=(chartArea.bottom-chartArea.top-chart.borderWidth)/ratioY;chart.outerRadius=Math.max(Math.min(maxWidth,maxHeight)/2,0);chart.innerRadius=Math.max(chart.outerRadius*cutout,0);chart.radiusLength=(chart.outerRadius-chart.innerRadius)/(me._getVisibleDatasetWeightTotal()||1);chart.offsetX=offsetX*chart.outerRadius;chart.offsetY=offsetY*chart.outerRadius;meta.total=me.calculateTotal();me.outerRadius=chart.outerRadius-chart.radiusLength*me._getRingWeightOffset(me.index);me.innerRadius=Math.max(me.outerRadius-chart.radiusLength*chartWeight,0);for(i=0,ilen=arcs.length;i<ilen;++i){me.updateElement(arcs[i],i,reset);}},updateElement:function updateElement(arc,index,reset){var me=this;var chart=me.chart;var chartArea=chart.chartArea;var opts=chart.options;var animationOpts=opts.animation;var centerX=(chartArea.left+chartArea.right)/2;var centerY=(chartArea.top+chartArea.bottom)/2;var startAngle=opts.rotation;// non reset case handled later\nvar endAngle=opts.rotation;// non reset case handled later\nvar dataset=me.getDataset();var circumference=reset&&animationOpts.animateRotate?0:arc.hidden?0:me.calculateCircumference(dataset.data[index])*(opts.circumference/DOUBLE_PI$1);var innerRadius=reset&&animationOpts.animateScale?0:me.innerRadius;var outerRadius=reset&&animationOpts.animateScale?0:me.outerRadius;var options=arc._options||{};helpers$1.extend(arc,{// Utility\n_datasetIndex:me.index,_index:index,// Desired view properties\n_model:{backgroundColor:options.backgroundColor,borderColor:options.borderColor,borderWidth:options.borderWidth,borderAlign:options.borderAlign,x:centerX+chart.offsetX,y:centerY+chart.offsetY,startAngle:startAngle,endAngle:endAngle,circumference:circumference,outerRadius:outerRadius,innerRadius:innerRadius,label:helpers$1.valueAtIndexOrDefault(dataset.label,index,chart.data.labels[index])}});var model=arc._model;// Set correct angles if not resetting\nif(!reset||!animationOpts.animateRotate){if(index===0){model.startAngle=opts.rotation;}else{model.startAngle=me.getMeta().data[index-1]._model.endAngle;}model.endAngle=model.startAngle+model.circumference;}arc.pivot();},calculateTotal:function calculateTotal(){var dataset=this.getDataset();var meta=this.getMeta();var total=0;var value;helpers$1.each(meta.data,function(element,index){value=dataset.data[index];if(!isNaN(value)&&!element.hidden){total+=Math.abs(value);}});/* if (total === 0) {\n\t\t\ttotal = NaN;\n\t\t}*/return total;},calculateCircumference:function calculateCircumference(value){var total=this.getMeta().total;if(total>0&&!isNaN(value)){return DOUBLE_PI$1*(Math.abs(value)/total);}return 0;},// gets the max border or hover width to properly scale pie charts\ngetMaxBorderWidth:function getMaxBorderWidth(arcs){var me=this;var max=0;var chart=me.chart;var i,ilen,meta,arc,controller,options,borderWidth,hoverWidth;if(!arcs){// Find the outmost visible dataset\nfor(i=0,ilen=chart.data.datasets.length;i<ilen;++i){if(chart.isDatasetVisible(i)){meta=chart.getDatasetMeta(i);arcs=meta.data;if(i!==me.index){controller=meta.controller;}break;}}}if(!arcs){return 0;}for(i=0,ilen=arcs.length;i<ilen;++i){arc=arcs[i];if(controller){controller._configure();options=controller._resolveDataElementOptions(arc,i);}else{options=arc._options;}if(options.borderAlign!=='inner'){borderWidth=options.borderWidth;hoverWidth=options.hoverBorderWidth;max=borderWidth>max?borderWidth:max;max=hoverWidth>max?hoverWidth:max;}}return max;},/**\n\t * @protected\n\t */setHoverStyle:function setHoverStyle(arc){var model=arc._model;var options=arc._options;var getHoverColor=helpers$1.getHoverColor;arc.$previousStyle={backgroundColor:model.backgroundColor,borderColor:model.borderColor,borderWidth:model.borderWidth};model.backgroundColor=valueOrDefault$5(options.hoverBackgroundColor,getHoverColor(options.backgroundColor));model.borderColor=valueOrDefault$5(options.hoverBorderColor,getHoverColor(options.borderColor));model.borderWidth=valueOrDefault$5(options.hoverBorderWidth,options.borderWidth);},/**\n\t * Get radius length offset of the dataset in relation to the visible datasets weights. This allows determining the inner and outer radius correctly\n\t * @private\n\t */_getRingWeightOffset:function _getRingWeightOffset(datasetIndex){var ringWeightOffset=0;for(var i=0;i<datasetIndex;++i){if(this.chart.isDatasetVisible(i)){ringWeightOffset+=this._getRingWeight(i);}}return ringWeightOffset;},/**\n\t * @private\n\t */_getRingWeight:function _getRingWeight(dataSetIndex){return Math.max(valueOrDefault$5(this.chart.data.datasets[dataSetIndex].weight,1),0);},/**\n\t * Returns the sum of all visibile data set weights.  This value can be 0.\n\t * @private\n\t */_getVisibleDatasetWeightTotal:function _getVisibleDatasetWeightTotal(){return this._getRingWeightOffset(this.chart.data.datasets.length);}});core_defaults._set('horizontalBar',{hover:{mode:'index',axis:'y'},scales:{xAxes:[{type:'linear',position:'bottom'}],yAxes:[{type:'category',position:'left',offset:true,gridLines:{offsetGridLines:true}}]},elements:{rectangle:{borderSkipped:'left'}},tooltips:{mode:'index',axis:'y'}});core_defaults._set('global',{datasets:{horizontalBar:{categoryPercentage:0.8,barPercentage:0.9}}});var controller_horizontalBar=controller_bar.extend({/**\n\t * @private\n\t */_getValueScaleId:function _getValueScaleId(){return this.getMeta().xAxisID;},/**\n\t * @private\n\t */_getIndexScaleId:function _getIndexScaleId(){return this.getMeta().yAxisID;}});var valueOrDefault$6=helpers$1.valueOrDefault;var resolve$2=helpers$1.options.resolve;var isPointInArea=helpers$1.canvas._isPointInArea;core_defaults._set('line',{showLines:true,spanGaps:false,hover:{mode:'label'},scales:{xAxes:[{type:'category',id:'x-axis-0'}],yAxes:[{type:'linear',id:'y-axis-0'}]}});function scaleClip(scale,halfBorderWidth){var tickOpts=scale&&scale.options.ticks||{};var reverse=tickOpts.reverse;var min=tickOpts.min===undefined?halfBorderWidth:0;var max=tickOpts.max===undefined?halfBorderWidth:0;return{start:reverse?max:min,end:reverse?min:max};}function defaultClip(xScale,yScale,borderWidth){var halfBorderWidth=borderWidth/2;var x=scaleClip(xScale,halfBorderWidth);var y=scaleClip(yScale,halfBorderWidth);return{top:y.end,right:x.end,bottom:y.start,left:x.start};}function toClip(value){var t,r,b,l;if(helpers$1.isObject(value)){t=value.top;r=value.right;b=value.bottom;l=value.left;}else{t=r=b=l=value;}return{top:t,right:r,bottom:b,left:l};}var controller_line=core_datasetController.extend({datasetElementType:elements.Line,dataElementType:elements.Point,/**\n\t * @private\n\t */_datasetElementOptions:['backgroundColor','borderCapStyle','borderColor','borderDash','borderDashOffset','borderJoinStyle','borderWidth','cubicInterpolationMode','fill'],/**\n\t * @private\n\t */_dataElementOptions:{backgroundColor:'pointBackgroundColor',borderColor:'pointBorderColor',borderWidth:'pointBorderWidth',hitRadius:'pointHitRadius',hoverBackgroundColor:'pointHoverBackgroundColor',hoverBorderColor:'pointHoverBorderColor',hoverBorderWidth:'pointHoverBorderWidth',hoverRadius:'pointHoverRadius',pointStyle:'pointStyle',radius:'pointRadius',rotation:'pointRotation'},update:function update(reset){var me=this;var meta=me.getMeta();var line=meta.dataset;var points=meta.data||[];var options=me.chart.options;var config=me._config;var showLine=me._showLine=valueOrDefault$6(config.showLine,options.showLines);var i,ilen;me._xScale=me.getScaleForId(meta.xAxisID);me._yScale=me.getScaleForId(meta.yAxisID);// Update Line\nif(showLine){// Compatibility: If the properties are defined with only the old name, use those values\nif(config.tension!==undefined&&config.lineTension===undefined){config.lineTension=config.tension;}// Utility\nline._scale=me._yScale;line._datasetIndex=me.index;// Data\nline._children=points;// Model\nline._model=me._resolveDatasetElementOptions(line);line.pivot();}// Update Points\nfor(i=0,ilen=points.length;i<ilen;++i){me.updateElement(points[i],i,reset);}if(showLine&&line._model.tension!==0){me.updateBezierControlPoints();}// Now pivot the point for animation\nfor(i=0,ilen=points.length;i<ilen;++i){points[i].pivot();}},updateElement:function updateElement(point,index,reset){var me=this;var meta=me.getMeta();var custom=point.custom||{};var dataset=me.getDataset();var datasetIndex=me.index;var value=dataset.data[index];var xScale=me._xScale;var yScale=me._yScale;var lineModel=meta.dataset._model;var x,y;var options=me._resolveDataElementOptions(point,index);x=xScale.getPixelForValue(_typeof2(value)==='object'?value:NaN,index,datasetIndex);y=reset?yScale.getBasePixel():me.calculatePointY(value,index,datasetIndex);// Utility\npoint._xScale=xScale;point._yScale=yScale;point._options=options;point._datasetIndex=datasetIndex;point._index=index;// Desired view properties\npoint._model={x:x,y:y,skip:custom.skip||isNaN(x)||isNaN(y),// Appearance\nradius:options.radius,pointStyle:options.pointStyle,rotation:options.rotation,backgroundColor:options.backgroundColor,borderColor:options.borderColor,borderWidth:options.borderWidth,tension:valueOrDefault$6(custom.tension,lineModel?lineModel.tension:0),steppedLine:lineModel?lineModel.steppedLine:false,// Tooltip\nhitRadius:options.hitRadius};},/**\n\t * @private\n\t */_resolveDatasetElementOptions:function _resolveDatasetElementOptions(element){var me=this;var config=me._config;var custom=element.custom||{};var options=me.chart.options;var lineOptions=options.elements.line;var values=core_datasetController.prototype._resolveDatasetElementOptions.apply(me,arguments);// The default behavior of lines is to break at null values, according\n// to https://github.com/chartjs/Chart.js/issues/2435#issuecomment-216718158\n// This option gives lines the ability to span gaps\nvalues.spanGaps=valueOrDefault$6(config.spanGaps,options.spanGaps);values.tension=valueOrDefault$6(config.lineTension,lineOptions.tension);values.steppedLine=resolve$2([custom.steppedLine,config.steppedLine,lineOptions.stepped]);values.clip=toClip(valueOrDefault$6(config.clip,defaultClip(me._xScale,me._yScale,values.borderWidth)));return values;},calculatePointY:function calculatePointY(value,index,datasetIndex){var me=this;var chart=me.chart;var yScale=me._yScale;var sumPos=0;var sumNeg=0;var i,ds,dsMeta,stackedRightValue,rightValue,metasets,ilen;if(yScale.options.stacked){rightValue=+yScale.getRightValue(value);metasets=chart._getSortedVisibleDatasetMetas();ilen=metasets.length;for(i=0;i<ilen;++i){dsMeta=metasets[i];if(dsMeta.index===datasetIndex){break;}ds=chart.data.datasets[dsMeta.index];if(dsMeta.type==='line'&&dsMeta.yAxisID===yScale.id){stackedRightValue=+yScale.getRightValue(ds.data[index]);if(stackedRightValue<0){sumNeg+=stackedRightValue||0;}else{sumPos+=stackedRightValue||0;}}}if(rightValue<0){return yScale.getPixelForValue(sumNeg+rightValue);}return yScale.getPixelForValue(sumPos+rightValue);}return yScale.getPixelForValue(value);},updateBezierControlPoints:function updateBezierControlPoints(){var me=this;var chart=me.chart;var meta=me.getMeta();var lineModel=meta.dataset._model;var area=chart.chartArea;var points=meta.data||[];var i,ilen,model,controlPoints;// Only consider points that are drawn in case the spanGaps option is used\nif(lineModel.spanGaps){points=points.filter(function(pt){return!pt._model.skip;});}function capControlPoint(pt,min,max){return Math.max(Math.min(pt,max),min);}if(lineModel.cubicInterpolationMode==='monotone'){helpers$1.splineCurveMonotone(points);}else{for(i=0,ilen=points.length;i<ilen;++i){model=points[i]._model;controlPoints=helpers$1.splineCurve(helpers$1.previousItem(points,i)._model,model,helpers$1.nextItem(points,i)._model,lineModel.tension);model.controlPointPreviousX=controlPoints.previous.x;model.controlPointPreviousY=controlPoints.previous.y;model.controlPointNextX=controlPoints.next.x;model.controlPointNextY=controlPoints.next.y;}}if(chart.options.elements.line.capBezierPoints){for(i=0,ilen=points.length;i<ilen;++i){model=points[i]._model;if(isPointInArea(model,area)){if(i>0&&isPointInArea(points[i-1]._model,area)){model.controlPointPreviousX=capControlPoint(model.controlPointPreviousX,area.left,area.right);model.controlPointPreviousY=capControlPoint(model.controlPointPreviousY,area.top,area.bottom);}if(i<points.length-1&&isPointInArea(points[i+1]._model,area)){model.controlPointNextX=capControlPoint(model.controlPointNextX,area.left,area.right);model.controlPointNextY=capControlPoint(model.controlPointNextY,area.top,area.bottom);}}}}},draw:function draw(){var me=this;var chart=me.chart;var meta=me.getMeta();var points=meta.data||[];var area=chart.chartArea;var canvas=chart.canvas;var i=0;var ilen=points.length;var clip;if(me._showLine){clip=meta.dataset._model.clip;helpers$1.canvas.clipArea(chart.ctx,{left:clip.left===false?0:area.left-clip.left,right:clip.right===false?canvas.width:area.right+clip.right,top:clip.top===false?0:area.top-clip.top,bottom:clip.bottom===false?canvas.height:area.bottom+clip.bottom});meta.dataset.draw();helpers$1.canvas.unclipArea(chart.ctx);}// Draw the points\nfor(;i<ilen;++i){points[i].draw(area);}},/**\n\t * @protected\n\t */setHoverStyle:function setHoverStyle(point){var model=point._model;var options=point._options;var getHoverColor=helpers$1.getHoverColor;point.$previousStyle={backgroundColor:model.backgroundColor,borderColor:model.borderColor,borderWidth:model.borderWidth,radius:model.radius};model.backgroundColor=valueOrDefault$6(options.hoverBackgroundColor,getHoverColor(options.backgroundColor));model.borderColor=valueOrDefault$6(options.hoverBorderColor,getHoverColor(options.borderColor));model.borderWidth=valueOrDefault$6(options.hoverBorderWidth,options.borderWidth);model.radius=valueOrDefault$6(options.hoverRadius,options.radius);}});var resolve$3=helpers$1.options.resolve;core_defaults._set('polarArea',{scale:{type:'radialLinear',angleLines:{display:false},gridLines:{circular:true},pointLabels:{display:false},ticks:{beginAtZero:true}},// Boolean - Whether to animate the rotation of the chart\nanimation:{animateRotate:true,animateScale:true},startAngle:-0.5*Math.PI,legendCallback:function legendCallback(chart){var list=document.createElement('ul');var data=chart.data;var datasets=data.datasets;var labels=data.labels;var i,ilen,listItem,listItemSpan;list.setAttribute('class',chart.id+'-legend');if(datasets.length){for(i=0,ilen=datasets[0].data.length;i<ilen;++i){listItem=list.appendChild(document.createElement('li'));listItemSpan=listItem.appendChild(document.createElement('span'));listItemSpan.style.backgroundColor=datasets[0].backgroundColor[i];if(labels[i]){listItem.appendChild(document.createTextNode(labels[i]));}}}return list.outerHTML;},legend:{labels:{generateLabels:function generateLabels(chart){var data=chart.data;if(data.labels.length&&data.datasets.length){return data.labels.map(function(label,i){var meta=chart.getDatasetMeta(0);var style=meta.controller.getStyle(i);return{text:label,fillStyle:style.backgroundColor,strokeStyle:style.borderColor,lineWidth:style.borderWidth,hidden:isNaN(data.datasets[0].data[i])||meta.data[i].hidden,// Extra data used for toggling the correct item\nindex:i};});}return[];}},onClick:function onClick(e,legendItem){var index=legendItem.index;var chart=this.chart;var i,ilen,meta;for(i=0,ilen=(chart.data.datasets||[]).length;i<ilen;++i){meta=chart.getDatasetMeta(i);meta.data[index].hidden=!meta.data[index].hidden;}chart.update();}},// Need to override these to give a nice default\ntooltips:{callbacks:{title:function title(){return'';},label:function label(item,data){return data.labels[item.index]+': '+item.yLabel;}}}});var controller_polarArea=core_datasetController.extend({dataElementType:elements.Arc,linkScales:helpers$1.noop,/**\n\t * @private\n\t */_dataElementOptions:['backgroundColor','borderColor','borderWidth','borderAlign','hoverBackgroundColor','hoverBorderColor','hoverBorderWidth'],/**\n\t * @private\n\t */_getIndexScaleId:function _getIndexScaleId(){return this.chart.scale.id;},/**\n\t * @private\n\t */_getValueScaleId:function _getValueScaleId(){return this.chart.scale.id;},update:function update(reset){var me=this;var dataset=me.getDataset();var meta=me.getMeta();var start=me.chart.options.startAngle||0;var starts=me._starts=[];var angles=me._angles=[];var arcs=meta.data;var i,ilen,angle;me._updateRadius();meta.count=me.countVisibleElements();for(i=0,ilen=dataset.data.length;i<ilen;i++){starts[i]=start;angle=me._computeAngle(i);angles[i]=angle;start+=angle;}for(i=0,ilen=arcs.length;i<ilen;++i){arcs[i]._options=me._resolveDataElementOptions(arcs[i],i);me.updateElement(arcs[i],i,reset);}},/**\n\t * @private\n\t */_updateRadius:function _updateRadius(){var me=this;var chart=me.chart;var chartArea=chart.chartArea;var opts=chart.options;var minSize=Math.min(chartArea.right-chartArea.left,chartArea.bottom-chartArea.top);chart.outerRadius=Math.max(minSize/2,0);chart.innerRadius=Math.max(opts.cutoutPercentage?chart.outerRadius/100*opts.cutoutPercentage:1,0);chart.radiusLength=(chart.outerRadius-chart.innerRadius)/chart.getVisibleDatasetCount();me.outerRadius=chart.outerRadius-chart.radiusLength*me.index;me.innerRadius=me.outerRadius-chart.radiusLength;},updateElement:function updateElement(arc,index,reset){var me=this;var chart=me.chart;var dataset=me.getDataset();var opts=chart.options;var animationOpts=opts.animation;var scale=chart.scale;var labels=chart.data.labels;var centerX=scale.xCenter;var centerY=scale.yCenter;// var negHalfPI = -0.5 * Math.PI;\nvar datasetStartAngle=opts.startAngle;var distance=arc.hidden?0:scale.getDistanceFromCenterForValue(dataset.data[index]);var startAngle=me._starts[index];var endAngle=startAngle+(arc.hidden?0:me._angles[index]);var resetRadius=animationOpts.animateScale?0:scale.getDistanceFromCenterForValue(dataset.data[index]);var options=arc._options||{};helpers$1.extend(arc,{// Utility\n_datasetIndex:me.index,_index:index,_scale:scale,// Desired view properties\n_model:{backgroundColor:options.backgroundColor,borderColor:options.borderColor,borderWidth:options.borderWidth,borderAlign:options.borderAlign,x:centerX,y:centerY,innerRadius:0,outerRadius:reset?resetRadius:distance,startAngle:reset&&animationOpts.animateRotate?datasetStartAngle:startAngle,endAngle:reset&&animationOpts.animateRotate?datasetStartAngle:endAngle,label:helpers$1.valueAtIndexOrDefault(labels,index,labels[index])}});arc.pivot();},countVisibleElements:function countVisibleElements(){var dataset=this.getDataset();var meta=this.getMeta();var count=0;helpers$1.each(meta.data,function(element,index){if(!isNaN(dataset.data[index])&&!element.hidden){count++;}});return count;},/**\n\t * @protected\n\t */setHoverStyle:function setHoverStyle(arc){var model=arc._model;var options=arc._options;var getHoverColor=helpers$1.getHoverColor;var valueOrDefault=helpers$1.valueOrDefault;arc.$previousStyle={backgroundColor:model.backgroundColor,borderColor:model.borderColor,borderWidth:model.borderWidth};model.backgroundColor=valueOrDefault(options.hoverBackgroundColor,getHoverColor(options.backgroundColor));model.borderColor=valueOrDefault(options.hoverBorderColor,getHoverColor(options.borderColor));model.borderWidth=valueOrDefault(options.hoverBorderWidth,options.borderWidth);},/**\n\t * @private\n\t */_computeAngle:function _computeAngle(index){var me=this;var count=this.getMeta().count;var dataset=me.getDataset();var meta=me.getMeta();if(isNaN(dataset.data[index])||meta.data[index].hidden){return 0;}// Scriptable options\nvar context={chart:me.chart,dataIndex:index,dataset:dataset,datasetIndex:me.index};return resolve$3([me.chart.options.elements.arc.angle,2*Math.PI/count],context,index);}});core_defaults._set('pie',helpers$1.clone(core_defaults.doughnut));core_defaults._set('pie',{cutoutPercentage:0});// Pie charts are Doughnut chart with different defaults\nvar controller_pie=controller_doughnut;var valueOrDefault$7=helpers$1.valueOrDefault;core_defaults._set('radar',{spanGaps:false,scale:{type:'radialLinear'},elements:{line:{fill:'start',tension:0// no bezier in radar\n}}});var controller_radar=core_datasetController.extend({datasetElementType:elements.Line,dataElementType:elements.Point,linkScales:helpers$1.noop,/**\n\t * @private\n\t */_datasetElementOptions:['backgroundColor','borderWidth','borderColor','borderCapStyle','borderDash','borderDashOffset','borderJoinStyle','fill'],/**\n\t * @private\n\t */_dataElementOptions:{backgroundColor:'pointBackgroundColor',borderColor:'pointBorderColor',borderWidth:'pointBorderWidth',hitRadius:'pointHitRadius',hoverBackgroundColor:'pointHoverBackgroundColor',hoverBorderColor:'pointHoverBorderColor',hoverBorderWidth:'pointHoverBorderWidth',hoverRadius:'pointHoverRadius',pointStyle:'pointStyle',radius:'pointRadius',rotation:'pointRotation'},/**\n\t * @private\n\t */_getIndexScaleId:function _getIndexScaleId(){return this.chart.scale.id;},/**\n\t * @private\n\t */_getValueScaleId:function _getValueScaleId(){return this.chart.scale.id;},update:function update(reset){var me=this;var meta=me.getMeta();var line=meta.dataset;var points=meta.data||[];var scale=me.chart.scale;var config=me._config;var i,ilen;// Compatibility: If the properties are defined with only the old name, use those values\nif(config.tension!==undefined&&config.lineTension===undefined){config.lineTension=config.tension;}// Utility\nline._scale=scale;line._datasetIndex=me.index;// Data\nline._children=points;line._loop=true;// Model\nline._model=me._resolveDatasetElementOptions(line);line.pivot();// Update Points\nfor(i=0,ilen=points.length;i<ilen;++i){me.updateElement(points[i],i,reset);}// Update bezier control points\nme.updateBezierControlPoints();// Now pivot the point for animation\nfor(i=0,ilen=points.length;i<ilen;++i){points[i].pivot();}},updateElement:function updateElement(point,index,reset){var me=this;var custom=point.custom||{};var dataset=me.getDataset();var scale=me.chart.scale;var pointPosition=scale.getPointPositionForValue(index,dataset.data[index]);var options=me._resolveDataElementOptions(point,index);var lineModel=me.getMeta().dataset._model;var x=reset?scale.xCenter:pointPosition.x;var y=reset?scale.yCenter:pointPosition.y;// Utility\npoint._scale=scale;point._options=options;point._datasetIndex=me.index;point._index=index;// Desired view properties\npoint._model={x:x,// value not used in dataset scale, but we want a consistent API between scales\ny:y,skip:custom.skip||isNaN(x)||isNaN(y),// Appearance\nradius:options.radius,pointStyle:options.pointStyle,rotation:options.rotation,backgroundColor:options.backgroundColor,borderColor:options.borderColor,borderWidth:options.borderWidth,tension:valueOrDefault$7(custom.tension,lineModel?lineModel.tension:0),// Tooltip\nhitRadius:options.hitRadius};},/**\n\t * @private\n\t */_resolveDatasetElementOptions:function _resolveDatasetElementOptions(){var me=this;var config=me._config;var options=me.chart.options;var values=core_datasetController.prototype._resolveDatasetElementOptions.apply(me,arguments);values.spanGaps=valueOrDefault$7(config.spanGaps,options.spanGaps);values.tension=valueOrDefault$7(config.lineTension,options.elements.line.tension);return values;},updateBezierControlPoints:function updateBezierControlPoints(){var me=this;var meta=me.getMeta();var area=me.chart.chartArea;var points=meta.data||[];var i,ilen,model,controlPoints;// Only consider points that are drawn in case the spanGaps option is used\nif(meta.dataset._model.spanGaps){points=points.filter(function(pt){return!pt._model.skip;});}function capControlPoint(pt,min,max){return Math.max(Math.min(pt,max),min);}for(i=0,ilen=points.length;i<ilen;++i){model=points[i]._model;controlPoints=helpers$1.splineCurve(helpers$1.previousItem(points,i,true)._model,model,helpers$1.nextItem(points,i,true)._model,model.tension);// Prevent the bezier going outside of the bounds of the graph\nmodel.controlPointPreviousX=capControlPoint(controlPoints.previous.x,area.left,area.right);model.controlPointPreviousY=capControlPoint(controlPoints.previous.y,area.top,area.bottom);model.controlPointNextX=capControlPoint(controlPoints.next.x,area.left,area.right);model.controlPointNextY=capControlPoint(controlPoints.next.y,area.top,area.bottom);}},setHoverStyle:function setHoverStyle(point){var model=point._model;var options=point._options;var getHoverColor=helpers$1.getHoverColor;point.$previousStyle={backgroundColor:model.backgroundColor,borderColor:model.borderColor,borderWidth:model.borderWidth,radius:model.radius};model.backgroundColor=valueOrDefault$7(options.hoverBackgroundColor,getHoverColor(options.backgroundColor));model.borderColor=valueOrDefault$7(options.hoverBorderColor,getHoverColor(options.borderColor));model.borderWidth=valueOrDefault$7(options.hoverBorderWidth,options.borderWidth);model.radius=valueOrDefault$7(options.hoverRadius,options.radius);}});core_defaults._set('scatter',{hover:{mode:'single'},scales:{xAxes:[{id:'x-axis-1',// need an ID so datasets can reference the scale\ntype:'linear',// scatter should not use a category axis\nposition:'bottom'}],yAxes:[{id:'y-axis-1',type:'linear',position:'left'}]},tooltips:{callbacks:{title:function title(){return'';// doesn't make sense for scatter since data are formatted as a point\n},label:function label(item){return'('+item.xLabel+', '+item.yLabel+')';}}}});core_defaults._set('global',{datasets:{scatter:{showLine:false}}});// Scatter charts use line controllers\nvar controller_scatter=controller_line;// NOTE export a map in which the key represents the controller type, not\n// the class, and so must be CamelCase in order to be correctly retrieved\n// by the controller in core.controller.js (`controllers[meta.type]`).\nvar controllers={bar:controller_bar,bubble:controller_bubble,doughnut:controller_doughnut,horizontalBar:controller_horizontalBar,line:controller_line,polarArea:controller_polarArea,pie:controller_pie,radar:controller_radar,scatter:controller_scatter};/**\n * Helper function to get relative position for an event\n * @param {Event|IEvent} event - The event to get the position for\n * @param {Chart} chart - The chart\n * @returns {object} the event position\n */function getRelativePosition(e,chart){if(e[\"native\"]){return{x:e.x,y:e.y};}return helpers$1.getRelativePosition(e,chart);}/**\n * Helper function to traverse all of the visible elements in the chart\n * @param {Chart} chart - the chart\n * @param {function} handler - the callback to execute for each visible item\n */function parseVisibleItems(chart,handler){var metasets=chart._getSortedVisibleDatasetMetas();var metadata,i,j,ilen,jlen,element;for(i=0,ilen=metasets.length;i<ilen;++i){metadata=metasets[i].data;for(j=0,jlen=metadata.length;j<jlen;++j){element=metadata[j];if(!element._view.skip){handler(element);}}}}/**\n * Helper function to get the items that intersect the event position\n * @param {ChartElement[]} items - elements to filter\n * @param {object} position - the point to be nearest to\n * @return {ChartElement[]} the nearest items\n */function getIntersectItems(chart,position){var elements=[];parseVisibleItems(chart,function(element){if(element.inRange(position.x,position.y)){elements.push(element);}});return elements;}/**\n * Helper function to get the items nearest to the event position considering all visible items in teh chart\n * @param {Chart} chart - the chart to look at elements from\n * @param {object} position - the point to be nearest to\n * @param {boolean} intersect - if true, only consider items that intersect the position\n * @param {function} distanceMetric - function to provide the distance between points\n * @return {ChartElement[]} the nearest items\n */function getNearestItems(chart,position,intersect,distanceMetric){var minDistance=Number.POSITIVE_INFINITY;var nearestItems=[];parseVisibleItems(chart,function(element){if(intersect&&!element.inRange(position.x,position.y)){return;}var center=element.getCenterPoint();var distance=distanceMetric(position,center);if(distance<minDistance){nearestItems=[element];minDistance=distance;}else if(distance===minDistance){// Can have multiple items at the same distance in which case we sort by size\nnearestItems.push(element);}});return nearestItems;}/**\n * Get a distance metric function for two points based on the\n * axis mode setting\n * @param {string} axis - the axis mode. x|y|xy\n */function getDistanceMetricForAxis(axis){var useX=axis.indexOf('x')!==-1;var useY=axis.indexOf('y')!==-1;return function(pt1,pt2){var deltaX=useX?Math.abs(pt1.x-pt2.x):0;var deltaY=useY?Math.abs(pt1.y-pt2.y):0;return Math.sqrt(Math.pow(deltaX,2)+Math.pow(deltaY,2));};}function indexMode(chart,e,options){var position=getRelativePosition(e,chart);// Default axis for index mode is 'x' to match old behaviour\noptions.axis=options.axis||'x';var distanceMetric=getDistanceMetricForAxis(options.axis);var items=options.intersect?getIntersectItems(chart,position):getNearestItems(chart,position,false,distanceMetric);var elements=[];if(!items.length){return[];}chart._getSortedVisibleDatasetMetas().forEach(function(meta){var element=meta.data[items[0]._index];// don't count items that are skipped (null data)\nif(element&&!element._view.skip){elements.push(element);}});return elements;}/**\n * @interface IInteractionOptions\n */ /**\n * If true, only consider items that intersect the point\n * @name IInterfaceOptions#boolean\n * @type Boolean\n */ /**\n * Contains interaction related functions\n * @namespace Chart.Interaction\n */var core_interaction={// Helper function for different modes\nmodes:{single:function single(chart,e){var position=getRelativePosition(e,chart);var elements=[];parseVisibleItems(chart,function(element){if(element.inRange(position.x,position.y)){elements.push(element);return elements;}});return elements.slice(0,1);},/**\n\t\t * @function Chart.Interaction.modes.label\n\t\t * @deprecated since version 2.4.0\n\t\t * @todo remove at version 3\n\t\t * @private\n\t\t */label:indexMode,/**\n\t\t * Returns items at the same index. If the options.intersect parameter is true, we only return items if we intersect something\n\t\t * If the options.intersect mode is false, we find the nearest item and return the items at the same index as that item\n\t\t * @function Chart.Interaction.modes.index\n\t\t * @since v2.4.0\n\t\t * @param {Chart} chart - the chart we are returning items from\n\t\t * @param {Event} e - the event we are find things at\n\t\t * @param {IInteractionOptions} options - options to use during interaction\n\t\t * @return {Chart.Element[]} Array of elements that are under the point. If none are found, an empty array is returned\n\t\t */index:indexMode,/**\n\t\t * Returns items in the same dataset. If the options.intersect parameter is true, we only return items if we intersect something\n\t\t * If the options.intersect is false, we find the nearest item and return the items in that dataset\n\t\t * @function Chart.Interaction.modes.dataset\n\t\t * @param {Chart} chart - the chart we are returning items from\n\t\t * @param {Event} e - the event we are find things at\n\t\t * @param {IInteractionOptions} options - options to use during interaction\n\t\t * @return {Chart.Element[]} Array of elements that are under the point. If none are found, an empty array is returned\n\t\t */dataset:function dataset(chart,e,options){var position=getRelativePosition(e,chart);options.axis=options.axis||'xy';var distanceMetric=getDistanceMetricForAxis(options.axis);var items=options.intersect?getIntersectItems(chart,position):getNearestItems(chart,position,false,distanceMetric);if(items.length>0){items=chart.getDatasetMeta(items[0]._datasetIndex).data;}return items;},/**\n\t\t * @function Chart.Interaction.modes.x-axis\n\t\t * @deprecated since version 2.4.0. Use index mode and intersect == true\n\t\t * @todo remove at version 3\n\t\t * @private\n\t\t */'x-axis':function xAxis(chart,e){return indexMode(chart,e,{intersect:false});},/**\n\t\t * Point mode returns all elements that hit test based on the event position\n\t\t * of the event\n\t\t * @function Chart.Interaction.modes.intersect\n\t\t * @param {Chart} chart - the chart we are returning items from\n\t\t * @param {Event} e - the event we are find things at\n\t\t * @return {Chart.Element[]} Array of elements that are under the point. If none are found, an empty array is returned\n\t\t */point:function point(chart,e){var position=getRelativePosition(e,chart);return getIntersectItems(chart,position);},/**\n\t\t * nearest mode returns the element closest to the point\n\t\t * @function Chart.Interaction.modes.intersect\n\t\t * @param {Chart} chart - the chart we are returning items from\n\t\t * @param {Event} e - the event we are find things at\n\t\t * @param {IInteractionOptions} options - options to use\n\t\t * @return {Chart.Element[]} Array of elements that are under the point. If none are found, an empty array is returned\n\t\t */nearest:function nearest(chart,e,options){var position=getRelativePosition(e,chart);options.axis=options.axis||'xy';var distanceMetric=getDistanceMetricForAxis(options.axis);return getNearestItems(chart,position,options.intersect,distanceMetric);},/**\n\t\t * x mode returns the elements that hit-test at the current x coordinate\n\t\t * @function Chart.Interaction.modes.x\n\t\t * @param {Chart} chart - the chart we are returning items from\n\t\t * @param {Event} e - the event we are find things at\n\t\t * @param {IInteractionOptions} options - options to use\n\t\t * @return {Chart.Element[]} Array of elements that are under the point. If none are found, an empty array is returned\n\t\t */x:function x(chart,e,options){var position=getRelativePosition(e,chart);var items=[];var intersectsItem=false;parseVisibleItems(chart,function(element){if(element.inXRange(position.x)){items.push(element);}if(element.inRange(position.x,position.y)){intersectsItem=true;}});// If we want to trigger on an intersect and we don't have any items\n// that intersect the position, return nothing\nif(options.intersect&&!intersectsItem){items=[];}return items;},/**\n\t\t * y mode returns the elements that hit-test at the current y coordinate\n\t\t * @function Chart.Interaction.modes.y\n\t\t * @param {Chart} chart - the chart we are returning items from\n\t\t * @param {Event} e - the event we are find things at\n\t\t * @param {IInteractionOptions} options - options to use\n\t\t * @return {Chart.Element[]} Array of elements that are under the point. If none are found, an empty array is returned\n\t\t */y:function y(chart,e,options){var position=getRelativePosition(e,chart);var items=[];var intersectsItem=false;parseVisibleItems(chart,function(element){if(element.inYRange(position.y)){items.push(element);}if(element.inRange(position.x,position.y)){intersectsItem=true;}});// If we want to trigger on an intersect and we don't have any items\n// that intersect the position, return nothing\nif(options.intersect&&!intersectsItem){items=[];}return items;}}};var extend=helpers$1.extend;function filterByPosition(array,position){return helpers$1.where(array,function(v){return v.pos===position;});}function sortByWeight(array,reverse){return array.sort(function(a,b){var v0=reverse?b:a;var v1=reverse?a:b;return v0.weight===v1.weight?v0.index-v1.index:v0.weight-v1.weight;});}function wrapBoxes(boxes){var layoutBoxes=[];var i,ilen,box;for(i=0,ilen=(boxes||[]).length;i<ilen;++i){box=boxes[i];layoutBoxes.push({index:i,box:box,pos:box.position,horizontal:box.isHorizontal(),weight:box.weight});}return layoutBoxes;}function setLayoutDims(layouts,params){var i,ilen,layout;for(i=0,ilen=layouts.length;i<ilen;++i){layout=layouts[i];// store width used instead of chartArea.w in fitBoxes\nlayout.width=layout.horizontal?layout.box.fullWidth&&params.availableWidth:params.vBoxMaxWidth;// store height used instead of chartArea.h in fitBoxes\nlayout.height=layout.horizontal&&params.hBoxMaxHeight;}}function buildLayoutBoxes(boxes){var layoutBoxes=wrapBoxes(boxes);var left=sortByWeight(filterByPosition(layoutBoxes,'left'),true);var right=sortByWeight(filterByPosition(layoutBoxes,'right'));var top=sortByWeight(filterByPosition(layoutBoxes,'top'),true);var bottom=sortByWeight(filterByPosition(layoutBoxes,'bottom'));return{leftAndTop:left.concat(top),rightAndBottom:right.concat(bottom),chartArea:filterByPosition(layoutBoxes,'chartArea'),vertical:left.concat(right),horizontal:top.concat(bottom)};}function getCombinedMax(maxPadding,chartArea,a,b){return Math.max(maxPadding[a],chartArea[a])+Math.max(maxPadding[b],chartArea[b]);}function updateDims(chartArea,params,layout){var box=layout.box;var maxPadding=chartArea.maxPadding;var newWidth,newHeight;if(layout.size){// this layout was already counted for, lets first reduce old size\nchartArea[layout.pos]-=layout.size;}layout.size=layout.horizontal?box.height:box.width;chartArea[layout.pos]+=layout.size;if(box.getPadding){var boxPadding=box.getPadding();maxPadding.top=Math.max(maxPadding.top,boxPadding.top);maxPadding.left=Math.max(maxPadding.left,boxPadding.left);maxPadding.bottom=Math.max(maxPadding.bottom,boxPadding.bottom);maxPadding.right=Math.max(maxPadding.right,boxPadding.right);}newWidth=params.outerWidth-getCombinedMax(maxPadding,chartArea,'left','right');newHeight=params.outerHeight-getCombinedMax(maxPadding,chartArea,'top','bottom');if(newWidth!==chartArea.w||newHeight!==chartArea.h){chartArea.w=newWidth;chartArea.h=newHeight;// return true if chart area changed in layout's direction\nreturn layout.horizontal?newWidth!==chartArea.w:newHeight!==chartArea.h;}}function handleMaxPadding(chartArea){var maxPadding=chartArea.maxPadding;function updatePos(pos){var change=Math.max(maxPadding[pos]-chartArea[pos],0);chartArea[pos]+=change;return change;}chartArea.y+=updatePos('top');chartArea.x+=updatePos('left');updatePos('right');updatePos('bottom');}function getMargins(horizontal,chartArea){var maxPadding=chartArea.maxPadding;function marginForPositions(positions){var margin={left:0,top:0,right:0,bottom:0};positions.forEach(function(pos){margin[pos]=Math.max(chartArea[pos],maxPadding[pos]);});return margin;}return horizontal?marginForPositions(['left','right']):marginForPositions(['top','bottom']);}function fitBoxes(boxes,chartArea,params){var refitBoxes=[];var i,ilen,layout,box,refit,changed;for(i=0,ilen=boxes.length;i<ilen;++i){layout=boxes[i];box=layout.box;box.update(layout.width||chartArea.w,layout.height||chartArea.h,getMargins(layout.horizontal,chartArea));if(updateDims(chartArea,params,layout)){changed=true;if(refitBoxes.length){// Dimensions changed and there were non full width boxes before this\n// -> we have to refit those\nrefit=true;}}if(!box.fullWidth){// fullWidth boxes don't need to be re-fitted in any case\nrefitBoxes.push(layout);}}return refit?fitBoxes(refitBoxes,chartArea,params)||changed:changed;}function placeBoxes(boxes,chartArea,params){var userPadding=params.padding;var x=chartArea.x;var y=chartArea.y;var i,ilen,layout,box;for(i=0,ilen=boxes.length;i<ilen;++i){layout=boxes[i];box=layout.box;if(layout.horizontal){box.left=box.fullWidth?userPadding.left:chartArea.left;box.right=box.fullWidth?params.outerWidth-userPadding.right:chartArea.left+chartArea.w;box.top=y;box.bottom=y+box.height;box.width=box.right-box.left;y=box.bottom;}else{box.left=x;box.right=x+box.width;box.top=chartArea.top;box.bottom=chartArea.top+chartArea.h;box.height=box.bottom-box.top;x=box.right;}}chartArea.x=x;chartArea.y=y;}core_defaults._set('global',{layout:{padding:{top:0,right:0,bottom:0,left:0}}});/**\n * @interface ILayoutItem\n * @prop {string} position - The position of the item in the chart layout. Possible values are\n * 'left', 'top', 'right', 'bottom', and 'chartArea'\n * @prop {number} weight - The weight used to sort the item. Higher weights are further away from the chart area\n * @prop {boolean} fullWidth - if true, and the item is horizontal, then push vertical boxes down\n * @prop {function} isHorizontal - returns true if the layout item is horizontal (ie. top or bottom)\n * @prop {function} update - Takes two parameters: width and height. Returns size of item\n * @prop {function} getPadding -  Returns an object with padding on the edges\n * @prop {number} width - Width of item. Must be valid after update()\n * @prop {number} height - Height of item. Must be valid after update()\n * @prop {number} left - Left edge of the item. Set by layout system and cannot be used in update\n * @prop {number} top - Top edge of the item. Set by layout system and cannot be used in update\n * @prop {number} right - Right edge of the item. Set by layout system and cannot be used in update\n * @prop {number} bottom - Bottom edge of the item. Set by layout system and cannot be used in update\n */ // The layout service is very self explanatory.  It's responsible for the layout within a chart.\n// Scales, Legends and Plugins all rely on the layout service and can easily register to be placed anywhere they need\n// It is this service's responsibility of carrying out that layout.\nvar core_layouts={defaults:{},/**\n\t * Register a box to a chart.\n\t * A box is simply a reference to an object that requires layout. eg. Scales, Legend, Title.\n\t * @param {Chart} chart - the chart to use\n\t * @param {ILayoutItem} item - the item to add to be layed out\n\t */addBox:function addBox(chart,item){if(!chart.boxes){chart.boxes=[];}// initialize item with default values\nitem.fullWidth=item.fullWidth||false;item.position=item.position||'top';item.weight=item.weight||0;item._layers=item._layers||function(){return[{z:0,draw:function draw(){item.draw.apply(item,arguments);}}];};chart.boxes.push(item);},/**\n\t * Remove a layoutItem from a chart\n\t * @param {Chart} chart - the chart to remove the box from\n\t * @param {ILayoutItem} layoutItem - the item to remove from the layout\n\t */removeBox:function removeBox(chart,layoutItem){var index=chart.boxes?chart.boxes.indexOf(layoutItem):-1;if(index!==-1){chart.boxes.splice(index,1);}},/**\n\t * Sets (or updates) options on the given `item`.\n\t * @param {Chart} chart - the chart in which the item lives (or will be added to)\n\t * @param {ILayoutItem} item - the item to configure with the given options\n\t * @param {object} options - the new item options.\n\t */configure:function configure(chart,item,options){var props=['fullWidth','position','weight'];var ilen=props.length;var i=0;var prop;for(;i<ilen;++i){prop=props[i];if(options.hasOwnProperty(prop)){item[prop]=options[prop];}}},/**\n\t * Fits boxes of the given chart into the given size by having each box measure itself\n\t * then running a fitting algorithm\n\t * @param {Chart} chart - the chart\n\t * @param {number} width - the width to fit into\n\t * @param {number} height - the height to fit into\n\t */update:function update(chart,width,height){if(!chart){return;}var layoutOptions=chart.options.layout||{};var padding=helpers$1.options.toPadding(layoutOptions.padding);var availableWidth=width-padding.width;var availableHeight=height-padding.height;var boxes=buildLayoutBoxes(chart.boxes);var verticalBoxes=boxes.vertical;var horizontalBoxes=boxes.horizontal;// Essentially we now have any number of boxes on each of the 4 sides.\n// Our canvas looks like the following.\n// The areas L1 and L2 are the left axes. R1 is the right axis, T1 is the top axis and\n// B1 is the bottom axis\n// There are also 4 quadrant-like locations (left to right instead of clockwise) reserved for chart overlays\n// These locations are single-box locations only, when trying to register a chartArea location that is already taken,\n// an error will be thrown.\n//\n// |----------------------------------------------------|\n// |                  T1 (Full Width)                   |\n// |----------------------------------------------------|\n// |    |    |                 T2                  |    |\n// |    |----|-------------------------------------|----|\n// |    |    | C1 |                           | C2 |    |\n// |    |    |----|                           |----|    |\n// |    |    |                                     |    |\n// | L1 | L2 |           ChartArea (C0)            | R1 |\n// |    |    |                                     |    |\n// |    |    |----|                           |----|    |\n// |    |    | C3 |                           | C4 |    |\n// |    |----|-------------------------------------|----|\n// |    |    |                 B1                  |    |\n// |----------------------------------------------------|\n// |                  B2 (Full Width)                   |\n// |----------------------------------------------------|\n//\nvar params=Object.freeze({outerWidth:width,outerHeight:height,padding:padding,availableWidth:availableWidth,vBoxMaxWidth:availableWidth/2/verticalBoxes.length,hBoxMaxHeight:availableHeight/2});var chartArea=extend({maxPadding:extend({},padding),w:availableWidth,h:availableHeight,x:padding.left,y:padding.top},padding);setLayoutDims(verticalBoxes.concat(horizontalBoxes),params);// First fit vertical boxes\nfitBoxes(verticalBoxes,chartArea,params);// Then fit horizontal boxes\nif(fitBoxes(horizontalBoxes,chartArea,params)){// if the area changed, re-fit vertical boxes\nfitBoxes(verticalBoxes,chartArea,params);}handleMaxPadding(chartArea);// Finally place the boxes to correct coordinates\nplaceBoxes(boxes.leftAndTop,chartArea,params);// Move to opposite side of chart\nchartArea.x+=chartArea.w;chartArea.y+=chartArea.h;placeBoxes(boxes.rightAndBottom,chartArea,params);chart.chartArea={left:chartArea.left,top:chartArea.top,right:chartArea.left+chartArea.w,bottom:chartArea.top+chartArea.h};// Finally update boxes in chartArea (radial scale for example)\nhelpers$1.each(boxes.chartArea,function(layout){var box=layout.box;extend(box,chart.chartArea);box.update(chartArea.w,chartArea.h);});}};/**\n * Platform fallback implementation (minimal).\n * @see https://github.com/chartjs/Chart.js/pull/4591#issuecomment-319575939\n */var platform_basic={acquireContext:function acquireContext(item){if(item&&item.canvas){// Support for any object associated to a canvas (including a context2d)\nitem=item.canvas;}return item&&item.getContext('2d')||null;}};var platform_dom=\"/*\\n * DOM element rendering detection\\n * https://davidwalsh.name/detect-node-insertion\\n */\\n@keyframes chartjs-render-animation {\\n\\tfrom { opacity: 0.99; }\\n\\tto { opacity: 1; }\\n}\\n\\n.chartjs-render-monitor {\\n\\tanimation: chartjs-render-animation 0.001s;\\n}\\n\\n/*\\n * DOM element resizing detection\\n * https://github.com/marcj/css-element-queries\\n */\\n.chartjs-size-monitor,\\n.chartjs-size-monitor-expand,\\n.chartjs-size-monitor-shrink {\\n\\tposition: absolute;\\n\\tdirection: ltr;\\n\\tleft: 0;\\n\\ttop: 0;\\n\\tright: 0;\\n\\tbottom: 0;\\n\\toverflow: hidden;\\n\\tpointer-events: none;\\n\\tvisibility: hidden;\\n\\tz-index: -1;\\n}\\n\\n.chartjs-size-monitor-expand > div {\\n\\tposition: absolute;\\n\\twidth: 1000000px;\\n\\theight: 1000000px;\\n\\tleft: 0;\\n\\ttop: 0;\\n}\\n\\n.chartjs-size-monitor-shrink > div {\\n\\tposition: absolute;\\n\\twidth: 200%;\\n\\theight: 200%;\\n\\tleft: 0;\\n\\ttop: 0;\\n}\\n\";var platform_dom$1=/*#__PURE__*/Object.freeze({__proto__:null,'default':platform_dom});var stylesheet=getCjsExportFromNamespace(platform_dom$1);var EXPANDO_KEY='$chartjs';var CSS_PREFIX='chartjs-';var CSS_SIZE_MONITOR=CSS_PREFIX+'size-monitor';var CSS_RENDER_MONITOR=CSS_PREFIX+'render-monitor';var CSS_RENDER_ANIMATION=CSS_PREFIX+'render-animation';var ANIMATION_START_EVENTS=['animationstart','webkitAnimationStart'];/**\n * DOM event types -> Chart.js event types.\n * Note: only events with different types are mapped.\n * @see https://developer.mozilla.org/en-US/docs/Web/Events\n */var EVENT_TYPES={touchstart:'mousedown',touchmove:'mousemove',touchend:'mouseup',pointerenter:'mouseenter',pointerdown:'mousedown',pointermove:'mousemove',pointerup:'mouseup',pointerleave:'mouseout',pointerout:'mouseout'};/**\n * The \"used\" size is the final value of a dimension property after all calculations have\n * been performed. This method uses the computed style of `element` but returns undefined\n * if the computed style is not expressed in pixels. That can happen in some cases where\n * `element` has a size relative to its parent and this last one is not yet displayed,\n * for example because of `display: none` on a parent node.\n * @see https://developer.mozilla.org/en-US/docs/Web/CSS/used_value\n * @returns {number} Size in pixels or undefined if unknown.\n */function readUsedSize(element,property){var value=helpers$1.getStyle(element,property);var matches=value&&value.match(/^(\\d+)(\\.\\d+)?px$/);return matches?Number(matches[1]):undefined;}/**\n * Initializes the canvas style and render size without modifying the canvas display size,\n * since responsiveness is handled by the controller.resize() method. The config is used\n * to determine the aspect ratio to apply in case no explicit height has been specified.\n */function initCanvas(canvas,config){var style=canvas.style;// NOTE(SB) canvas.getAttribute('width') !== canvas.width: in the first case it\n// returns null or '' if no explicit value has been set to the canvas attribute.\nvar renderHeight=canvas.getAttribute('height');var renderWidth=canvas.getAttribute('width');// Chart.js modifies some canvas values that we want to restore on destroy\ncanvas[EXPANDO_KEY]={initial:{height:renderHeight,width:renderWidth,style:{display:style.display,height:style.height,width:style.width}}};// Force canvas to display as block to avoid extra space caused by inline\n// elements, which would interfere with the responsive resize process.\n// https://github.com/chartjs/Chart.js/issues/2538\nstyle.display=style.display||'block';if(renderWidth===null||renderWidth===''){var displayWidth=readUsedSize(canvas,'width');if(displayWidth!==undefined){canvas.width=displayWidth;}}if(renderHeight===null||renderHeight===''){if(canvas.style.height===''){// If no explicit render height and style height, let's apply the aspect ratio,\n// which one can be specified by the user but also by charts as default option\n// (i.e. options.aspectRatio). If not specified, use canvas aspect ratio of 2.\ncanvas.height=canvas.width/(config.options.aspectRatio||2);}else{var displayHeight=readUsedSize(canvas,'height');if(displayWidth!==undefined){canvas.height=displayHeight;}}}return canvas;}/**\n * Detects support for options object argument in addEventListener.\n * https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/addEventListener#Safely_detecting_option_support\n * @private\n */var supportsEventListenerOptions=function(){var supports=false;try{var options=Object.defineProperty({},'passive',{// eslint-disable-next-line getter-return\nget:function get(){supports=true;}});window.addEventListener('e',null,options);}catch(e){// continue regardless of error\n}return supports;}();// Default passive to true as expected by Chrome for 'touchstart' and 'touchend' events.\n// https://github.com/chartjs/Chart.js/issues/4287\nvar eventListenerOptions=supportsEventListenerOptions?{passive:true}:false;function addListener(node,type,listener){node.addEventListener(type,listener,eventListenerOptions);}function removeListener(node,type,listener){node.removeEventListener(type,listener,eventListenerOptions);}function createEvent(type,chart,x,y,nativeEvent){return{type:type,chart:chart,\"native\":nativeEvent||null,x:x!==undefined?x:null,y:y!==undefined?y:null};}function fromNativeEvent(event,chart){var type=EVENT_TYPES[event.type]||event.type;var pos=helpers$1.getRelativePosition(event,chart);return createEvent(type,chart,pos.x,pos.y,event);}function throttled(fn,thisArg){var ticking=false;var args=[];return function(){args=Array.prototype.slice.call(arguments);thisArg=thisArg||this;if(!ticking){ticking=true;helpers$1.requestAnimFrame.call(window,function(){ticking=false;fn.apply(thisArg,args);});}};}function createDiv(cls){var el=document.createElement('div');el.className=cls||'';return el;}// Implementation based on https://github.com/marcj/css-element-queries\nfunction createResizer(handler){var maxSize=1000000;// NOTE(SB) Don't use innerHTML because it could be considered unsafe.\n// https://github.com/chartjs/Chart.js/issues/5902\nvar resizer=createDiv(CSS_SIZE_MONITOR);var expand=createDiv(CSS_SIZE_MONITOR+'-expand');var shrink=createDiv(CSS_SIZE_MONITOR+'-shrink');expand.appendChild(createDiv());shrink.appendChild(createDiv());resizer.appendChild(expand);resizer.appendChild(shrink);resizer._reset=function(){expand.scrollLeft=maxSize;expand.scrollTop=maxSize;shrink.scrollLeft=maxSize;shrink.scrollTop=maxSize;};var onScroll=function onScroll(){resizer._reset();handler();};addListener(expand,'scroll',onScroll.bind(expand,'expand'));addListener(shrink,'scroll',onScroll.bind(shrink,'shrink'));return resizer;}// https://davidwalsh.name/detect-node-insertion\nfunction watchForRender(node,handler){var expando=node[EXPANDO_KEY]||(node[EXPANDO_KEY]={});var proxy=expando.renderProxy=function(e){if(e.animationName===CSS_RENDER_ANIMATION){handler();}};helpers$1.each(ANIMATION_START_EVENTS,function(type){addListener(node,type,proxy);});// #4737: Chrome might skip the CSS animation when the CSS_RENDER_MONITOR class\n// is removed then added back immediately (same animation frame?). Accessing the\n// `offsetParent` property will force a reflow and re-evaluate the CSS animation.\n// https://gist.github.com/paulirish/5d52fb081b3570c81e3a#box-metrics\n// https://github.com/chartjs/Chart.js/issues/4737\nexpando.reflow=!!node.offsetParent;node.classList.add(CSS_RENDER_MONITOR);}function unwatchForRender(node){var expando=node[EXPANDO_KEY]||{};var proxy=expando.renderProxy;if(proxy){helpers$1.each(ANIMATION_START_EVENTS,function(type){removeListener(node,type,proxy);});delete expando.renderProxy;}node.classList.remove(CSS_RENDER_MONITOR);}function addResizeListener(node,listener,chart){var expando=node[EXPANDO_KEY]||(node[EXPANDO_KEY]={});// Let's keep track of this added resizer and thus avoid DOM query when removing it.\nvar resizer=expando.resizer=createResizer(throttled(function(){if(expando.resizer){var container=chart.options.maintainAspectRatio&&node.parentNode;var w=container?container.clientWidth:0;listener(createEvent('resize',chart));if(container&&container.clientWidth<w&&chart.canvas){// If the container size shrank during chart resize, let's assume\n// scrollbar appeared. So we resize again with the scrollbar visible -\n// effectively making chart smaller and the scrollbar hidden again.\n// Because we are inside `throttled`, and currently `ticking`, scroll\n// events are ignored during this whole 2 resize process.\n// If we assumed wrong and something else happened, we are resizing\n// twice in a frame (potential performance issue)\nlistener(createEvent('resize',chart));}}}));// The resizer needs to be attached to the node parent, so we first need to be\n// sure that `node` is attached to the DOM before injecting the resizer element.\nwatchForRender(node,function(){if(expando.resizer){var container=node.parentNode;if(container&&container!==resizer.parentNode){container.insertBefore(resizer,container.firstChild);}// The container size might have changed, let's reset the resizer state.\nresizer._reset();}});}function removeResizeListener(node){var expando=node[EXPANDO_KEY]||{};var resizer=expando.resizer;delete expando.resizer;unwatchForRender(node);if(resizer&&resizer.parentNode){resizer.parentNode.removeChild(resizer);}}/**\n * Injects CSS styles inline if the styles are not already present.\n * @param {HTMLDocument|ShadowRoot} rootNode - the node to contain the <style>.\n * @param {string} css - the CSS to be injected.\n */function injectCSS(rootNode,css){// https://stackoverflow.com/q/3922139\nvar expando=rootNode[EXPANDO_KEY]||(rootNode[EXPANDO_KEY]={});if(!expando.containsStyles){expando.containsStyles=true;css='/* Chart.js */\\n'+css;var style=document.createElement('style');style.setAttribute('type','text/css');style.appendChild(document.createTextNode(css));rootNode.appendChild(style);}}var platform_dom$2={/**\n\t * When `true`, prevents the automatic injection of the stylesheet required to\n\t * correctly detect when the chart is added to the DOM and then resized. This\n\t * switch has been added to allow external stylesheet (`dist/Chart(.min)?.js`)\n\t * to be manually imported to make this library compatible with any CSP.\n\t * See https://github.com/chartjs/Chart.js/issues/5208\n\t */disableCSSInjection:false,/**\n\t * This property holds whether this platform is enabled for the current environment.\n\t * Currently used by platform.js to select the proper implementation.\n\t * @private\n\t */_enabled:typeof window!=='undefined'&&typeof document!=='undefined',/**\n\t * Initializes resources that depend on platform options.\n\t * @param {HTMLCanvasElement} canvas - The Canvas element.\n\t * @private\n\t */_ensureLoaded:function _ensureLoaded(canvas){if(!this.disableCSSInjection){// If the canvas is in a shadow DOM, then the styles must also be inserted\n// into the same shadow DOM.\n// https://github.com/chartjs/Chart.js/issues/5763\nvar root=canvas.getRootNode?canvas.getRootNode():document;var targetNode=root.host?root:document.head;injectCSS(targetNode,stylesheet);}},acquireContext:function acquireContext(item,config){if(typeof item==='string'){item=document.getElementById(item);}else if(item.length){// Support for array based queries (such as jQuery)\nitem=item[0];}if(item&&item.canvas){// Support for any object associated to a canvas (including a context2d)\nitem=item.canvas;}// To prevent canvas fingerprinting, some add-ons undefine the getContext\n// method, for example: https://github.com/kkapsner/CanvasBlocker\n// https://github.com/chartjs/Chart.js/issues/2807\nvar context=item&&item.getContext&&item.getContext('2d');// `instanceof HTMLCanvasElement/CanvasRenderingContext2D` fails when the item is\n// inside an iframe or when running in a protected environment. We could guess the\n// types from their toString() value but let's keep things flexible and assume it's\n// a sufficient condition if the item has a context2D which has item as `canvas`.\n// https://github.com/chartjs/Chart.js/issues/3887\n// https://github.com/chartjs/Chart.js/issues/4102\n// https://github.com/chartjs/Chart.js/issues/4152\nif(context&&context.canvas===item){// Load platform resources on first chart creation, to make it possible to\n// import the library before setting platform options.\nthis._ensureLoaded(item);initCanvas(item,config);return context;}return null;},releaseContext:function releaseContext(context){var canvas=context.canvas;if(!canvas[EXPANDO_KEY]){return;}var initial=canvas[EXPANDO_KEY].initial;['height','width'].forEach(function(prop){var value=initial[prop];if(helpers$1.isNullOrUndef(value)){canvas.removeAttribute(prop);}else{canvas.setAttribute(prop,value);}});helpers$1.each(initial.style||{},function(value,key){canvas.style[key]=value;});// The canvas render size might have been changed (and thus the state stack discarded),\n// we can't use save() and restore() to restore the initial state. So make sure that at\n// least the canvas context is reset to the default state by setting the canvas width.\n// https://www.w3.org/TR/2011/WD-html5-20110525/the-canvas-element.html\n// eslint-disable-next-line no-self-assign\ncanvas.width=canvas.width;delete canvas[EXPANDO_KEY];},addEventListener:function addEventListener(chart,type,listener){var canvas=chart.canvas;if(type==='resize'){// Note: the resize event is not supported on all browsers.\naddResizeListener(canvas,listener,chart);return;}var expando=listener[EXPANDO_KEY]||(listener[EXPANDO_KEY]={});var proxies=expando.proxies||(expando.proxies={});var proxy=proxies[chart.id+'_'+type]=function(event){listener(fromNativeEvent(event,chart));};addListener(canvas,type,proxy);},removeEventListener:function removeEventListener(chart,type,listener){var canvas=chart.canvas;if(type==='resize'){// Note: the resize event is not supported on all browsers.\nremoveResizeListener(canvas);return;}var expando=listener[EXPANDO_KEY]||{};var proxies=expando.proxies||{};var proxy=proxies[chart.id+'_'+type];if(!proxy){return;}removeListener(canvas,type,proxy);}};// DEPRECATIONS\n/**\n * Provided for backward compatibility, use EventTarget.addEventListener instead.\n * EventTarget.addEventListener compatibility: Chrome, Opera 7, Safari, FF1.5+, IE9+\n * @see https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/addEventListener\n * @function Chart.helpers.addEvent\n * @deprecated since version 2.7.0\n * @todo remove at version 3\n * @private\n */helpers$1.addEvent=addListener;/**\n * Provided for backward compatibility, use EventTarget.removeEventListener instead.\n * EventTarget.removeEventListener compatibility: Chrome, Opera 7, Safari, FF1.5+, IE9+\n * @see https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/removeEventListener\n * @function Chart.helpers.removeEvent\n * @deprecated since version 2.7.0\n * @todo remove at version 3\n * @private\n */helpers$1.removeEvent=removeListener;// @TODO Make possible to select another platform at build time.\nvar implementation=platform_dom$2._enabled?platform_dom$2:platform_basic;/**\n * @namespace Chart.platform\n * @see https://chartjs.gitbooks.io/proposals/content/Platform.html\n * @since 2.4.0\n */var platform=helpers$1.extend({/**\n\t * @since 2.7.0\n\t */initialize:function initialize(){},/**\n\t * Called at chart construction time, returns a context2d instance implementing\n\t * the [W3C Canvas 2D Context API standard]{@link https://www.w3.org/TR/2dcontext/}.\n\t * @param {*} item - The native item from which to acquire context (platform specific)\n\t * @param {object} options - The chart options\n\t * @returns {CanvasRenderingContext2D} context2d instance\n\t */acquireContext:function acquireContext(){},/**\n\t * Called at chart destruction time, releases any resources associated to the context\n\t * previously returned by the acquireContext() method.\n\t * @param {CanvasRenderingContext2D} context - The context2d instance\n\t * @returns {boolean} true if the method succeeded, else false\n\t */releaseContext:function releaseContext(){},/**\n\t * Registers the specified listener on the given chart.\n\t * @param {Chart} chart - Chart from which to listen for event\n\t * @param {string} type - The ({@link IEvent}) type to listen for\n\t * @param {function} listener - Receives a notification (an object that implements\n\t * the {@link IEvent} interface) when an event of the specified type occurs.\n\t */addEventListener:function addEventListener(){},/**\n\t * Removes the specified listener previously registered with addEventListener.\n\t * @param {Chart} chart - Chart from which to remove the listener\n\t * @param {string} type - The ({@link IEvent}) type to remove\n\t * @param {function} listener - The listener function to remove from the event target.\n\t */removeEventListener:function removeEventListener(){}},implementation);core_defaults._set('global',{plugins:{}});/**\n * The plugin service singleton\n * @namespace Chart.plugins\n * @since 2.1.0\n */var core_plugins={/**\n\t * Globally registered plugins.\n\t * @private\n\t */_plugins:[],/**\n\t * This identifier is used to invalidate the descriptors cache attached to each chart\n\t * when a global plugin is registered or unregistered. In this case, the cache ID is\n\t * incremented and descriptors are regenerated during following API calls.\n\t * @private\n\t */_cacheId:0,/**\n\t * Registers the given plugin(s) if not already registered.\n\t * @param {IPlugin[]|IPlugin} plugins plugin instance(s).\n\t */register:function register(plugins){var p=this._plugins;[].concat(plugins).forEach(function(plugin){if(p.indexOf(plugin)===-1){p.push(plugin);}});this._cacheId++;},/**\n\t * Unregisters the given plugin(s) only if registered.\n\t * @param {IPlugin[]|IPlugin} plugins plugin instance(s).\n\t */unregister:function unregister(plugins){var p=this._plugins;[].concat(plugins).forEach(function(plugin){var idx=p.indexOf(plugin);if(idx!==-1){p.splice(idx,1);}});this._cacheId++;},/**\n\t * Remove all registered plugins.\n\t * @since 2.1.5\n\t */clear:function clear(){this._plugins=[];this._cacheId++;},/**\n\t * Returns the number of registered plugins?\n\t * @returns {number}\n\t * @since 2.1.5\n\t */count:function count(){return this._plugins.length;},/**\n\t * Returns all registered plugin instances.\n\t * @returns {IPlugin[]} array of plugin objects.\n\t * @since 2.1.5\n\t */getAll:function getAll(){return this._plugins;},/**\n\t * Calls enabled plugins for `chart` on the specified hook and with the given args.\n\t * This method immediately returns as soon as a plugin explicitly returns false. The\n\t * returned value can be used, for instance, to interrupt the current action.\n\t * @param {Chart} chart - The chart instance for which plugins should be called.\n\t * @param {string} hook - The name of the plugin method to call (e.g. 'beforeUpdate').\n\t * @param {Array} [args] - Extra arguments to apply to the hook call.\n\t * @returns {boolean} false if any of the plugins return false, else returns true.\n\t */notify:function notify(chart,hook,args){var descriptors=this.descriptors(chart);var ilen=descriptors.length;var i,descriptor,plugin,params,method;for(i=0;i<ilen;++i){descriptor=descriptors[i];plugin=descriptor.plugin;method=plugin[hook];if(typeof method==='function'){params=[chart].concat(args||[]);params.push(descriptor.options);if(method.apply(plugin,params)===false){return false;}}}return true;},/**\n\t * Returns descriptors of enabled plugins for the given chart.\n\t * @returns {object[]} [{ plugin, options }]\n\t * @private\n\t */descriptors:function descriptors(chart){var cache=chart.$plugins||(chart.$plugins={});if(cache.id===this._cacheId){return cache.descriptors;}var plugins=[];var descriptors=[];var config=chart&&chart.config||{};var options=config.options&&config.options.plugins||{};this._plugins.concat(config.plugins||[]).forEach(function(plugin){var idx=plugins.indexOf(plugin);if(idx!==-1){return;}var id=plugin.id;var opts=options[id];if(opts===false){return;}if(opts===true){opts=helpers$1.clone(core_defaults.global.plugins[id]);}plugins.push(plugin);descriptors.push({plugin:plugin,options:opts||{}});});cache.descriptors=descriptors;cache.id=this._cacheId;return descriptors;},/**\n\t * Invalidates cache for the given chart: descriptors hold a reference on plugin option,\n\t * but in some cases, this reference can be changed by the user when updating options.\n\t * https://github.com/chartjs/Chart.js/issues/5111#issuecomment-355934167\n\t * @private\n\t */_invalidate:function _invalidate(chart){delete chart.$plugins;}};var core_scaleService={// Scale registration object. Extensions can register new scale types (such as log or DB scales) and then\n// use the new chart options to grab the correct scale\nconstructors:{},// Use a registration function so that we can move to an ES6 map when we no longer need to support\n// old browsers\n// Scale config defaults\ndefaults:{},registerScaleType:function registerScaleType(type,scaleConstructor,scaleDefaults){this.constructors[type]=scaleConstructor;this.defaults[type]=helpers$1.clone(scaleDefaults);},getScaleConstructor:function getScaleConstructor(type){return this.constructors.hasOwnProperty(type)?this.constructors[type]:undefined;},getScaleDefaults:function getScaleDefaults(type){// Return the scale defaults merged with the global settings so that we always use the latest ones\nreturn this.defaults.hasOwnProperty(type)?helpers$1.merge({},[core_defaults.scale,this.defaults[type]]):{};},updateScaleDefaults:function updateScaleDefaults(type,additions){var me=this;if(me.defaults.hasOwnProperty(type)){me.defaults[type]=helpers$1.extend(me.defaults[type],additions);}},addScalesToLayout:function addScalesToLayout(chart){// Adds each scale to the chart.boxes array to be sized accordingly\nhelpers$1.each(chart.scales,function(scale){// Set ILayoutItem parameters for backwards compatibility\nscale.fullWidth=scale.options.fullWidth;scale.position=scale.options.position;scale.weight=scale.options.weight;core_layouts.addBox(chart,scale);});}};var valueOrDefault$8=helpers$1.valueOrDefault;var getRtlHelper=helpers$1.rtl.getRtlAdapter;core_defaults._set('global',{tooltips:{enabled:true,custom:null,mode:'nearest',position:'average',intersect:true,backgroundColor:'rgba(0,0,0,0.8)',titleFontStyle:'bold',titleSpacing:2,titleMarginBottom:6,titleFontColor:'#fff',titleAlign:'left',bodySpacing:2,bodyFontColor:'#fff',bodyAlign:'left',footerFontStyle:'bold',footerSpacing:2,footerMarginTop:6,footerFontColor:'#fff',footerAlign:'left',yPadding:6,xPadding:6,caretPadding:2,caretSize:5,cornerRadius:6,multiKeyBackground:'#fff',displayColors:true,borderColor:'rgba(0,0,0,0)',borderWidth:0,callbacks:{// Args are: (tooltipItems, data)\nbeforeTitle:helpers$1.noop,title:function title(tooltipItems,data){var title='';var labels=data.labels;var labelCount=labels?labels.length:0;if(tooltipItems.length>0){var item=tooltipItems[0];if(item.label){title=item.label;}else if(item.xLabel){title=item.xLabel;}else if(labelCount>0&&item.index<labelCount){title=labels[item.index];}}return title;},afterTitle:helpers$1.noop,// Args are: (tooltipItems, data)\nbeforeBody:helpers$1.noop,// Args are: (tooltipItem, data)\nbeforeLabel:helpers$1.noop,label:function label(tooltipItem,data){var label=data.datasets[tooltipItem.datasetIndex].label||'';if(label){label+=': ';}if(!helpers$1.isNullOrUndef(tooltipItem.value)){label+=tooltipItem.value;}else{label+=tooltipItem.yLabel;}return label;},labelColor:function labelColor(tooltipItem,chart){var meta=chart.getDatasetMeta(tooltipItem.datasetIndex);var activeElement=meta.data[tooltipItem.index];var view=activeElement._view;return{borderColor:view.borderColor,backgroundColor:view.backgroundColor};},labelTextColor:function labelTextColor(){return this._options.bodyFontColor;},afterLabel:helpers$1.noop,// Args are: (tooltipItems, data)\nafterBody:helpers$1.noop,// Args are: (tooltipItems, data)\nbeforeFooter:helpers$1.noop,footer:helpers$1.noop,afterFooter:helpers$1.noop}}});var positioners={/**\n\t * Average mode places the tooltip at the average position of the elements shown\n\t * @function Chart.Tooltip.positioners.average\n\t * @param elements {ChartElement[]} the elements being displayed in the tooltip\n\t * @returns {object} tooltip position\n\t */average:function average(elements){if(!elements.length){return false;}var i,len;var x=0;var y=0;var count=0;for(i=0,len=elements.length;i<len;++i){var el=elements[i];if(el&&el.hasValue()){var pos=el.tooltipPosition();x+=pos.x;y+=pos.y;++count;}}return{x:x/count,y:y/count};},/**\n\t * Gets the tooltip position nearest of the item nearest to the event position\n\t * @function Chart.Tooltip.positioners.nearest\n\t * @param elements {Chart.Element[]} the tooltip elements\n\t * @param eventPosition {object} the position of the event in canvas coordinates\n\t * @returns {object} the tooltip position\n\t */nearest:function nearest(elements,eventPosition){var x=eventPosition.x;var y=eventPosition.y;var minDistance=Number.POSITIVE_INFINITY;var i,len,nearestElement;for(i=0,len=elements.length;i<len;++i){var el=elements[i];if(el&&el.hasValue()){var center=el.getCenterPoint();var d=helpers$1.distanceBetweenPoints(eventPosition,center);if(d<minDistance){minDistance=d;nearestElement=el;}}}if(nearestElement){var tp=nearestElement.tooltipPosition();x=tp.x;y=tp.y;}return{x:x,y:y};}};// Helper to push or concat based on if the 2nd parameter is an array or not\nfunction pushOrConcat(base,toPush){if(toPush){if(helpers$1.isArray(toPush)){// base = base.concat(toPush);\nArray.prototype.push.apply(base,toPush);}else{base.push(toPush);}}return base;}/**\n * Returns array of strings split by newline\n * @param {string} value - The value to split by newline.\n * @returns {string[]} value if newline present - Returned from String split() method\n * @function\n */function splitNewlines(str){if((typeof str==='string'||str instanceof String)&&str.indexOf('\\n')>-1){return str.split('\\n');}return str;}/**\n * Private helper to create a tooltip item model\n * @param element - the chart element (point, arc, bar) to create the tooltip item for\n * @return new tooltip item\n */function createTooltipItem(element){var xScale=element._xScale;var yScale=element._yScale||element._scale;// handle radar || polarArea charts\nvar index=element._index;var datasetIndex=element._datasetIndex;var controller=element._chart.getDatasetMeta(datasetIndex).controller;var indexScale=controller._getIndexScale();var valueScale=controller._getValueScale();return{xLabel:xScale?xScale.getLabelForIndex(index,datasetIndex):'',yLabel:yScale?yScale.getLabelForIndex(index,datasetIndex):'',label:indexScale?''+indexScale.getLabelForIndex(index,datasetIndex):'',value:valueScale?''+valueScale.getLabelForIndex(index,datasetIndex):'',index:index,datasetIndex:datasetIndex,x:element._model.x,y:element._model.y};}/**\n * Helper to get the reset model for the tooltip\n * @param tooltipOpts {object} the tooltip options\n */function getBaseModel(tooltipOpts){var globalDefaults=core_defaults.global;return{// Positioning\nxPadding:tooltipOpts.xPadding,yPadding:tooltipOpts.yPadding,xAlign:tooltipOpts.xAlign,yAlign:tooltipOpts.yAlign,// Drawing direction and text direction\nrtl:tooltipOpts.rtl,textDirection:tooltipOpts.textDirection,// Body\nbodyFontColor:tooltipOpts.bodyFontColor,_bodyFontFamily:valueOrDefault$8(tooltipOpts.bodyFontFamily,globalDefaults.defaultFontFamily),_bodyFontStyle:valueOrDefault$8(tooltipOpts.bodyFontStyle,globalDefaults.defaultFontStyle),_bodyAlign:tooltipOpts.bodyAlign,bodyFontSize:valueOrDefault$8(tooltipOpts.bodyFontSize,globalDefaults.defaultFontSize),bodySpacing:tooltipOpts.bodySpacing,// Title\ntitleFontColor:tooltipOpts.titleFontColor,_titleFontFamily:valueOrDefault$8(tooltipOpts.titleFontFamily,globalDefaults.defaultFontFamily),_titleFontStyle:valueOrDefault$8(tooltipOpts.titleFontStyle,globalDefaults.defaultFontStyle),titleFontSize:valueOrDefault$8(tooltipOpts.titleFontSize,globalDefaults.defaultFontSize),_titleAlign:tooltipOpts.titleAlign,titleSpacing:tooltipOpts.titleSpacing,titleMarginBottom:tooltipOpts.titleMarginBottom,// Footer\nfooterFontColor:tooltipOpts.footerFontColor,_footerFontFamily:valueOrDefault$8(tooltipOpts.footerFontFamily,globalDefaults.defaultFontFamily),_footerFontStyle:valueOrDefault$8(tooltipOpts.footerFontStyle,globalDefaults.defaultFontStyle),footerFontSize:valueOrDefault$8(tooltipOpts.footerFontSize,globalDefaults.defaultFontSize),_footerAlign:tooltipOpts.footerAlign,footerSpacing:tooltipOpts.footerSpacing,footerMarginTop:tooltipOpts.footerMarginTop,// Appearance\ncaretSize:tooltipOpts.caretSize,cornerRadius:tooltipOpts.cornerRadius,backgroundColor:tooltipOpts.backgroundColor,opacity:0,legendColorBackground:tooltipOpts.multiKeyBackground,displayColors:tooltipOpts.displayColors,borderColor:tooltipOpts.borderColor,borderWidth:tooltipOpts.borderWidth};}/**\n * Get the size of the tooltip\n */function getTooltipSize(tooltip,model){var ctx=tooltip._chart.ctx;var height=model.yPadding*2;// Tooltip Padding\nvar width=0;// Count of all lines in the body\nvar body=model.body;var combinedBodyLength=body.reduce(function(count,bodyItem){return count+bodyItem.before.length+bodyItem.lines.length+bodyItem.after.length;},0);combinedBodyLength+=model.beforeBody.length+model.afterBody.length;var titleLineCount=model.title.length;var footerLineCount=model.footer.length;var titleFontSize=model.titleFontSize;var bodyFontSize=model.bodyFontSize;var footerFontSize=model.footerFontSize;height+=titleLineCount*titleFontSize;// Title Lines\nheight+=titleLineCount?(titleLineCount-1)*model.titleSpacing:0;// Title Line Spacing\nheight+=titleLineCount?model.titleMarginBottom:0;// Title's bottom Margin\nheight+=combinedBodyLength*bodyFontSize;// Body Lines\nheight+=combinedBodyLength?(combinedBodyLength-1)*model.bodySpacing:0;// Body Line Spacing\nheight+=footerLineCount?model.footerMarginTop:0;// Footer Margin\nheight+=footerLineCount*footerFontSize;// Footer Lines\nheight+=footerLineCount?(footerLineCount-1)*model.footerSpacing:0;// Footer Line Spacing\n// Title width\nvar widthPadding=0;var maxLineWidth=function maxLineWidth(line){width=Math.max(width,ctx.measureText(line).width+widthPadding);};ctx.font=helpers$1.fontString(titleFontSize,model._titleFontStyle,model._titleFontFamily);helpers$1.each(model.title,maxLineWidth);// Body width\nctx.font=helpers$1.fontString(bodyFontSize,model._bodyFontStyle,model._bodyFontFamily);helpers$1.each(model.beforeBody.concat(model.afterBody),maxLineWidth);// Body lines may include some extra width due to the color box\nwidthPadding=model.displayColors?bodyFontSize+2:0;helpers$1.each(body,function(bodyItem){helpers$1.each(bodyItem.before,maxLineWidth);helpers$1.each(bodyItem.lines,maxLineWidth);helpers$1.each(bodyItem.after,maxLineWidth);});// Reset back to 0\nwidthPadding=0;// Footer width\nctx.font=helpers$1.fontString(footerFontSize,model._footerFontStyle,model._footerFontFamily);helpers$1.each(model.footer,maxLineWidth);// Add padding\nwidth+=2*model.xPadding;return{width:width,height:height};}/**\n * Helper to get the alignment of a tooltip given the size\n */function determineAlignment(tooltip,size){var model=tooltip._model;var chart=tooltip._chart;var chartArea=tooltip._chart.chartArea;var xAlign='center';var yAlign='center';if(model.y<size.height){yAlign='top';}else if(model.y>chart.height-size.height){yAlign='bottom';}var lf,rf;// functions to determine left, right alignment\nvar olf,orf;// functions to determine if left/right alignment causes tooltip to go outside chart\nvar yf;// function to get the y alignment if the tooltip goes outside of the left or right edges\nvar midX=(chartArea.left+chartArea.right)/2;var midY=(chartArea.top+chartArea.bottom)/2;if(yAlign==='center'){lf=function lf(x){return x<=midX;};rf=function rf(x){return x>midX;};}else{lf=function lf(x){return x<=size.width/2;};rf=function rf(x){return x>=chart.width-size.width/2;};}olf=function olf(x){return x+size.width+model.caretSize+model.caretPadding>chart.width;};orf=function orf(x){return x-size.width-model.caretSize-model.caretPadding<0;};yf=function yf(y){return y<=midY?'top':'bottom';};if(lf(model.x)){xAlign='left';// Is tooltip too wide and goes over the right side of the chart.?\nif(olf(model.x)){xAlign='center';yAlign=yf(model.y);}}else if(rf(model.x)){xAlign='right';// Is tooltip too wide and goes outside left edge of canvas?\nif(orf(model.x)){xAlign='center';yAlign=yf(model.y);}}var opts=tooltip._options;return{xAlign:opts.xAlign?opts.xAlign:xAlign,yAlign:opts.yAlign?opts.yAlign:yAlign};}/**\n * Helper to get the location a tooltip needs to be placed at given the initial position (via the vm) and the size and alignment\n */function getBackgroundPoint(vm,size,alignment,chart){// Background Position\nvar x=vm.x;var y=vm.y;var caretSize=vm.caretSize;var caretPadding=vm.caretPadding;var cornerRadius=vm.cornerRadius;var xAlign=alignment.xAlign;var yAlign=alignment.yAlign;var paddingAndSize=caretSize+caretPadding;var radiusAndPadding=cornerRadius+caretPadding;if(xAlign==='right'){x-=size.width;}else if(xAlign==='center'){x-=size.width/2;if(x+size.width>chart.width){x=chart.width-size.width;}if(x<0){x=0;}}if(yAlign==='top'){y+=paddingAndSize;}else if(yAlign==='bottom'){y-=size.height+paddingAndSize;}else{y-=size.height/2;}if(yAlign==='center'){if(xAlign==='left'){x+=paddingAndSize;}else if(xAlign==='right'){x-=paddingAndSize;}}else if(xAlign==='left'){x-=radiusAndPadding;}else if(xAlign==='right'){x+=radiusAndPadding;}return{x:x,y:y};}function getAlignedX(vm,align){return align==='center'?vm.x+vm.width/2:align==='right'?vm.x+vm.width-vm.xPadding:vm.x+vm.xPadding;}/**\n * Helper to build before and after body lines\n */function getBeforeAfterBodyLines(callback){return pushOrConcat([],splitNewlines(callback));}var exports$4=core_element.extend({initialize:function initialize(){this._model=getBaseModel(this._options);this._lastActive=[];},// Get the title\n// Args are: (tooltipItem, data)\ngetTitle:function getTitle(){var me=this;var opts=me._options;var callbacks=opts.callbacks;var beforeTitle=callbacks.beforeTitle.apply(me,arguments);var title=callbacks.title.apply(me,arguments);var afterTitle=callbacks.afterTitle.apply(me,arguments);var lines=[];lines=pushOrConcat(lines,splitNewlines(beforeTitle));lines=pushOrConcat(lines,splitNewlines(title));lines=pushOrConcat(lines,splitNewlines(afterTitle));return lines;},// Args are: (tooltipItem, data)\ngetBeforeBody:function getBeforeBody(){return getBeforeAfterBodyLines(this._options.callbacks.beforeBody.apply(this,arguments));},// Args are: (tooltipItem, data)\ngetBody:function getBody(tooltipItems,data){var me=this;var callbacks=me._options.callbacks;var bodyItems=[];helpers$1.each(tooltipItems,function(tooltipItem){var bodyItem={before:[],lines:[],after:[]};pushOrConcat(bodyItem.before,splitNewlines(callbacks.beforeLabel.call(me,tooltipItem,data)));pushOrConcat(bodyItem.lines,callbacks.label.call(me,tooltipItem,data));pushOrConcat(bodyItem.after,splitNewlines(callbacks.afterLabel.call(me,tooltipItem,data)));bodyItems.push(bodyItem);});return bodyItems;},// Args are: (tooltipItem, data)\ngetAfterBody:function getAfterBody(){return getBeforeAfterBodyLines(this._options.callbacks.afterBody.apply(this,arguments));},// Get the footer and beforeFooter and afterFooter lines\n// Args are: (tooltipItem, data)\ngetFooter:function getFooter(){var me=this;var callbacks=me._options.callbacks;var beforeFooter=callbacks.beforeFooter.apply(me,arguments);var footer=callbacks.footer.apply(me,arguments);var afterFooter=callbacks.afterFooter.apply(me,arguments);var lines=[];lines=pushOrConcat(lines,splitNewlines(beforeFooter));lines=pushOrConcat(lines,splitNewlines(footer));lines=pushOrConcat(lines,splitNewlines(afterFooter));return lines;},update:function update(changed){var me=this;var opts=me._options;// Need to regenerate the model because its faster than using extend and it is necessary due to the optimization in Chart.Element.transition\n// that does _view = _model if ease === 1. This causes the 2nd tooltip update to set properties in both the view and model at the same time\n// which breaks any animations.\nvar existingModel=me._model;var model=me._model=getBaseModel(opts);var active=me._active;var data=me._data;// In the case where active.length === 0 we need to keep these at existing values for good animations\nvar alignment={xAlign:existingModel.xAlign,yAlign:existingModel.yAlign};var backgroundPoint={x:existingModel.x,y:existingModel.y};var tooltipSize={width:existingModel.width,height:existingModel.height};var tooltipPosition={x:existingModel.caretX,y:existingModel.caretY};var i,len;if(active.length){model.opacity=1;var labelColors=[];var labelTextColors=[];tooltipPosition=positioners[opts.position].call(me,active,me._eventPosition);var tooltipItems=[];for(i=0,len=active.length;i<len;++i){tooltipItems.push(createTooltipItem(active[i]));}// If the user provided a filter function, use it to modify the tooltip items\nif(opts.filter){tooltipItems=tooltipItems.filter(function(a){return opts.filter(a,data);});}// If the user provided a sorting function, use it to modify the tooltip items\nif(opts.itemSort){tooltipItems=tooltipItems.sort(function(a,b){return opts.itemSort(a,b,data);});}// Determine colors for boxes\nhelpers$1.each(tooltipItems,function(tooltipItem){labelColors.push(opts.callbacks.labelColor.call(me,tooltipItem,me._chart));labelTextColors.push(opts.callbacks.labelTextColor.call(me,tooltipItem,me._chart));});// Build the Text Lines\nmodel.title=me.getTitle(tooltipItems,data);model.beforeBody=me.getBeforeBody(tooltipItems,data);model.body=me.getBody(tooltipItems,data);model.afterBody=me.getAfterBody(tooltipItems,data);model.footer=me.getFooter(tooltipItems,data);// Initial positioning and colors\nmodel.x=tooltipPosition.x;model.y=tooltipPosition.y;model.caretPadding=opts.caretPadding;model.labelColors=labelColors;model.labelTextColors=labelTextColors;// data points\nmodel.dataPoints=tooltipItems;// We need to determine alignment of the tooltip\ntooltipSize=getTooltipSize(this,model);alignment=determineAlignment(this,tooltipSize);// Final Size and Position\nbackgroundPoint=getBackgroundPoint(model,tooltipSize,alignment,me._chart);}else{model.opacity=0;}model.xAlign=alignment.xAlign;model.yAlign=alignment.yAlign;model.x=backgroundPoint.x;model.y=backgroundPoint.y;model.width=tooltipSize.width;model.height=tooltipSize.height;// Point where the caret on the tooltip points to\nmodel.caretX=tooltipPosition.x;model.caretY=tooltipPosition.y;me._model=model;if(changed&&opts.custom){opts.custom.call(me,model);}return me;},drawCaret:function drawCaret(tooltipPoint,size){var ctx=this._chart.ctx;var vm=this._view;var caretPosition=this.getCaretPosition(tooltipPoint,size,vm);ctx.lineTo(caretPosition.x1,caretPosition.y1);ctx.lineTo(caretPosition.x2,caretPosition.y2);ctx.lineTo(caretPosition.x3,caretPosition.y3);},getCaretPosition:function getCaretPosition(tooltipPoint,size,vm){var x1,x2,x3,y1,y2,y3;var caretSize=vm.caretSize;var cornerRadius=vm.cornerRadius;var xAlign=vm.xAlign;var yAlign=vm.yAlign;var ptX=tooltipPoint.x;var ptY=tooltipPoint.y;var width=size.width;var height=size.height;if(yAlign==='center'){y2=ptY+height/2;if(xAlign==='left'){x1=ptX;x2=x1-caretSize;x3=x1;y1=y2+caretSize;y3=y2-caretSize;}else{x1=ptX+width;x2=x1+caretSize;x3=x1;y1=y2-caretSize;y3=y2+caretSize;}}else{if(xAlign==='left'){x2=ptX+cornerRadius+caretSize;x1=x2-caretSize;x3=x2+caretSize;}else if(xAlign==='right'){x2=ptX+width-cornerRadius-caretSize;x1=x2-caretSize;x3=x2+caretSize;}else{x2=vm.caretX;x1=x2-caretSize;x3=x2+caretSize;}if(yAlign==='top'){y1=ptY;y2=y1-caretSize;y3=y1;}else{y1=ptY+height;y2=y1+caretSize;y3=y1;// invert drawing order\nvar tmp=x3;x3=x1;x1=tmp;}}return{x1:x1,x2:x2,x3:x3,y1:y1,y2:y2,y3:y3};},drawTitle:function drawTitle(pt,vm,ctx){var title=vm.title;var length=title.length;var titleFontSize,titleSpacing,i;if(length){var rtlHelper=getRtlHelper(vm.rtl,vm.x,vm.width);pt.x=getAlignedX(vm,vm._titleAlign);ctx.textAlign=rtlHelper.textAlign(vm._titleAlign);ctx.textBaseline='middle';titleFontSize=vm.titleFontSize;titleSpacing=vm.titleSpacing;ctx.fillStyle=vm.titleFontColor;ctx.font=helpers$1.fontString(titleFontSize,vm._titleFontStyle,vm._titleFontFamily);for(i=0;i<length;++i){ctx.fillText(title[i],rtlHelper.x(pt.x),pt.y+titleFontSize/2);pt.y+=titleFontSize+titleSpacing;// Line Height and spacing\nif(i+1===length){pt.y+=vm.titleMarginBottom-titleSpacing;// If Last, add margin, remove spacing\n}}}},drawBody:function drawBody(pt,vm,ctx){var bodyFontSize=vm.bodyFontSize;var bodySpacing=vm.bodySpacing;var bodyAlign=vm._bodyAlign;var body=vm.body;var drawColorBoxes=vm.displayColors;var xLinePadding=0;var colorX=drawColorBoxes?getAlignedX(vm,'left'):0;var rtlHelper=getRtlHelper(vm.rtl,vm.x,vm.width);var fillLineOfText=function fillLineOfText(line){ctx.fillText(line,rtlHelper.x(pt.x+xLinePadding),pt.y+bodyFontSize/2);pt.y+=bodyFontSize+bodySpacing;};var bodyItem,textColor,labelColors,lines,i,j,ilen,jlen;var bodyAlignForCalculation=rtlHelper.textAlign(bodyAlign);ctx.textAlign=bodyAlign;ctx.textBaseline='middle';ctx.font=helpers$1.fontString(bodyFontSize,vm._bodyFontStyle,vm._bodyFontFamily);pt.x=getAlignedX(vm,bodyAlignForCalculation);// Before body lines\nctx.fillStyle=vm.bodyFontColor;helpers$1.each(vm.beforeBody,fillLineOfText);xLinePadding=drawColorBoxes&&bodyAlignForCalculation!=='right'?bodyAlign==='center'?bodyFontSize/2+1:bodyFontSize+2:0;// Draw body lines now\nfor(i=0,ilen=body.length;i<ilen;++i){bodyItem=body[i];textColor=vm.labelTextColors[i];labelColors=vm.labelColors[i];ctx.fillStyle=textColor;helpers$1.each(bodyItem.before,fillLineOfText);lines=bodyItem.lines;for(j=0,jlen=lines.length;j<jlen;++j){// Draw Legend-like boxes if needed\nif(drawColorBoxes){var rtlColorX=rtlHelper.x(colorX);// Fill a white rect so that colours merge nicely if the opacity is < 1\nctx.fillStyle=vm.legendColorBackground;ctx.fillRect(rtlHelper.leftForLtr(rtlColorX,bodyFontSize),pt.y,bodyFontSize,bodyFontSize);// Border\nctx.lineWidth=1;ctx.strokeStyle=labelColors.borderColor;ctx.strokeRect(rtlHelper.leftForLtr(rtlColorX,bodyFontSize),pt.y,bodyFontSize,bodyFontSize);// Inner square\nctx.fillStyle=labelColors.backgroundColor;ctx.fillRect(rtlHelper.leftForLtr(rtlHelper.xPlus(rtlColorX,1),bodyFontSize-2),pt.y+1,bodyFontSize-2,bodyFontSize-2);ctx.fillStyle=textColor;}fillLineOfText(lines[j]);}helpers$1.each(bodyItem.after,fillLineOfText);}// Reset back to 0 for after body\nxLinePadding=0;// After body lines\nhelpers$1.each(vm.afterBody,fillLineOfText);pt.y-=bodySpacing;// Remove last body spacing\n},drawFooter:function drawFooter(pt,vm,ctx){var footer=vm.footer;var length=footer.length;var footerFontSize,i;if(length){var rtlHelper=getRtlHelper(vm.rtl,vm.x,vm.width);pt.x=getAlignedX(vm,vm._footerAlign);pt.y+=vm.footerMarginTop;ctx.textAlign=rtlHelper.textAlign(vm._footerAlign);ctx.textBaseline='middle';footerFontSize=vm.footerFontSize;ctx.fillStyle=vm.footerFontColor;ctx.font=helpers$1.fontString(footerFontSize,vm._footerFontStyle,vm._footerFontFamily);for(i=0;i<length;++i){ctx.fillText(footer[i],rtlHelper.x(pt.x),pt.y+footerFontSize/2);pt.y+=footerFontSize+vm.footerSpacing;}}},drawBackground:function drawBackground(pt,vm,ctx,tooltipSize){ctx.fillStyle=vm.backgroundColor;ctx.strokeStyle=vm.borderColor;ctx.lineWidth=vm.borderWidth;var xAlign=vm.xAlign;var yAlign=vm.yAlign;var x=pt.x;var y=pt.y;var width=tooltipSize.width;var height=tooltipSize.height;var radius=vm.cornerRadius;ctx.beginPath();ctx.moveTo(x+radius,y);if(yAlign==='top'){this.drawCaret(pt,tooltipSize);}ctx.lineTo(x+width-radius,y);ctx.quadraticCurveTo(x+width,y,x+width,y+radius);if(yAlign==='center'&&xAlign==='right'){this.drawCaret(pt,tooltipSize);}ctx.lineTo(x+width,y+height-radius);ctx.quadraticCurveTo(x+width,y+height,x+width-radius,y+height);if(yAlign==='bottom'){this.drawCaret(pt,tooltipSize);}ctx.lineTo(x+radius,y+height);ctx.quadraticCurveTo(x,y+height,x,y+height-radius);if(yAlign==='center'&&xAlign==='left'){this.drawCaret(pt,tooltipSize);}ctx.lineTo(x,y+radius);ctx.quadraticCurveTo(x,y,x+radius,y);ctx.closePath();ctx.fill();if(vm.borderWidth>0){ctx.stroke();}},draw:function draw(){var ctx=this._chart.ctx;var vm=this._view;if(vm.opacity===0){return;}var tooltipSize={width:vm.width,height:vm.height};var pt={x:vm.x,y:vm.y};// IE11/Edge does not like very small opacities, so snap to 0\nvar opacity=Math.abs(vm.opacity<1e-3)?0:vm.opacity;// Truthy/falsey value for empty tooltip\nvar hasTooltipContent=vm.title.length||vm.beforeBody.length||vm.body.length||vm.afterBody.length||vm.footer.length;if(this._options.enabled&&hasTooltipContent){ctx.save();ctx.globalAlpha=opacity;// Draw Background\nthis.drawBackground(pt,vm,ctx,tooltipSize);// Draw Title, Body, and Footer\npt.y+=vm.yPadding;helpers$1.rtl.overrideTextDirection(ctx,vm.textDirection);// Titles\nthis.drawTitle(pt,vm,ctx);// Body\nthis.drawBody(pt,vm,ctx);// Footer\nthis.drawFooter(pt,vm,ctx);helpers$1.rtl.restoreTextDirection(ctx,vm.textDirection);ctx.restore();}},/**\n\t * Handle an event\n\t * @private\n\t * @param {IEvent} event - The event to handle\n\t * @returns {boolean} true if the tooltip changed\n\t */handleEvent:function handleEvent(e){var me=this;var options=me._options;var changed=false;me._lastActive=me._lastActive||[];// Find Active Elements for tooltips\nif(e.type==='mouseout'){me._active=[];}else{me._active=me._chart.getElementsAtEventForMode(e,options.mode,options);if(options.reverse){me._active.reverse();}}// Remember Last Actives\nchanged=!helpers$1.arrayEquals(me._active,me._lastActive);// Only handle target event on tooltip change\nif(changed){me._lastActive=me._active;if(options.enabled||options.custom){me._eventPosition={x:e.x,y:e.y};me.update(true);me.pivot();}}return changed;}});/**\n * @namespace Chart.Tooltip.positioners\n */var positioners_1=positioners;var core_tooltip=exports$4;core_tooltip.positioners=positioners_1;var valueOrDefault$9=helpers$1.valueOrDefault;core_defaults._set('global',{elements:{},events:['mousemove','mouseout','click','touchstart','touchmove'],hover:{onHover:null,mode:'nearest',intersect:true,animationDuration:400},onClick:null,maintainAspectRatio:true,responsive:true,responsiveAnimationDuration:0});/**\n * Recursively merge the given config objects representing the `scales` option\n * by incorporating scale defaults in `xAxes` and `yAxes` array items, then\n * returns a deep copy of the result, thus doesn't alter inputs.\n */function mergeScaleConfig()/* config objects ... */{return helpers$1.merge({},[].slice.call(arguments),{merger:function merger(key,target,source,options){if(key==='xAxes'||key==='yAxes'){var slen=source[key].length;var i,type,scale;if(!target[key]){target[key]=[];}for(i=0;i<slen;++i){scale=source[key][i];type=valueOrDefault$9(scale.type,key==='xAxes'?'category':'linear');if(i>=target[key].length){target[key].push({});}if(!target[key][i].type||scale.type&&scale.type!==target[key][i].type){// new/untyped scale or type changed: let's apply the new defaults\n// then merge source scale to correctly overwrite the defaults.\nhelpers$1.merge(target[key][i],[core_scaleService.getScaleDefaults(type),scale]);}else{// scales type are the same\nhelpers$1.merge(target[key][i],scale);}}}else{helpers$1._merger(key,target,source,options);}}});}/**\n * Recursively merge the given config objects as the root options by handling\n * default scale options for the `scales` and `scale` properties, then returns\n * a deep copy of the result, thus doesn't alter inputs.\n */function mergeConfig()/* config objects ... */{return helpers$1.merge({},[].slice.call(arguments),{merger:function merger(key,target,source,options){var tval=target[key]||{};var sval=source[key];if(key==='scales'){// scale config merging is complex. Add our own function here for that\ntarget[key]=mergeScaleConfig(tval,sval);}else if(key==='scale'){// used in polar area & radar charts since there is only one scale\ntarget[key]=helpers$1.merge(tval,[core_scaleService.getScaleDefaults(sval.type),sval]);}else{helpers$1._merger(key,target,source,options);}}});}function initConfig(config){config=config||{};// Do NOT use mergeConfig for the data object because this method merges arrays\n// and so would change references to labels and datasets, preventing data updates.\nvar data=config.data=config.data||{};data.datasets=data.datasets||[];data.labels=data.labels||[];config.options=mergeConfig(core_defaults.global,core_defaults[config.type],config.options||{});return config;}function updateConfig(chart){var newOptions=chart.options;helpers$1.each(chart.scales,function(scale){core_layouts.removeBox(chart,scale);});newOptions=mergeConfig(core_defaults.global,core_defaults[chart.config.type],newOptions);chart.options=chart.config.options=newOptions;chart.ensureScalesHaveIDs();chart.buildOrUpdateScales();// Tooltip\nchart.tooltip._options=newOptions.tooltips;chart.tooltip.initialize();}function nextAvailableScaleId(axesOpts,prefix,index){var id;var hasId=function hasId(obj){return obj.id===id;};do{id=prefix+index++;}while(helpers$1.findIndex(axesOpts,hasId)>=0);return id;}function positionIsHorizontal(position){return position==='top'||position==='bottom';}function compare2Level(l1,l2){return function(a,b){return a[l1]===b[l1]?a[l2]-b[l2]:a[l1]-b[l1];};}var Chart=function Chart(item,config){this.construct(item,config);return this;};helpers$1.extend(Chart.prototype,/** @lends Chart */{/**\n\t * @private\n\t */construct:function construct(item,config){var me=this;config=initConfig(config);var context=platform.acquireContext(item,config);var canvas=context&&context.canvas;var height=canvas&&canvas.height;var width=canvas&&canvas.width;me.id=helpers$1.uid();me.ctx=context;me.canvas=canvas;me.config=config;me.width=width;me.height=height;me.aspectRatio=height?width/height:null;me.options=config.options;me._bufferedRender=false;me._layers=[];/**\n\t\t * Provided for backward compatibility, Chart and Chart.Controller have been merged,\n\t\t * the \"instance\" still need to be defined since it might be called from plugins.\n\t\t * @prop Chart#chart\n\t\t * @deprecated since version 2.6.0\n\t\t * @todo remove at version 3\n\t\t * @private\n\t\t */me.chart=me;me.controller=me;// chart.chart.controller #inception\n// Add the chart instance to the global namespace\nChart.instances[me.id]=me;// Define alias to the config data: `chart.data === chart.config.data`\nObject.defineProperty(me,'data',{get:function get(){return me.config.data;},set:function set(value){me.config.data=value;}});if(!context||!canvas){// The given item is not a compatible context2d element, let's return before finalizing\n// the chart initialization but after setting basic chart / controller properties that\n// can help to figure out that the chart is not valid (e.g chart.canvas !== null);\n// https://github.com/chartjs/Chart.js/issues/2807\nconsole.error(\"Failed to create chart: can't acquire context from the given item\");return;}me.initialize();me.update();},/**\n\t * @private\n\t */initialize:function initialize(){var me=this;// Before init plugin notification\ncore_plugins.notify(me,'beforeInit');helpers$1.retinaScale(me,me.options.devicePixelRatio);me.bindEvents();if(me.options.responsive){// Initial resize before chart draws (must be silent to preserve initial animations).\nme.resize(true);}me.initToolTip();// After init plugin notification\ncore_plugins.notify(me,'afterInit');return me;},clear:function clear(){helpers$1.canvas.clear(this);return this;},stop:function stop(){// Stops any current animation loop occurring\ncore_animations.cancelAnimation(this);return this;},resize:function resize(silent){var me=this;var options=me.options;var canvas=me.canvas;var aspectRatio=options.maintainAspectRatio&&me.aspectRatio||null;// the canvas render width and height will be casted to integers so make sure that\n// the canvas display style uses the same integer values to avoid blurring effect.\n// Set to 0 instead of canvas.size because the size defaults to 300x150 if the element is collapsed\nvar newWidth=Math.max(0,Math.floor(helpers$1.getMaximumWidth(canvas)));var newHeight=Math.max(0,Math.floor(aspectRatio?newWidth/aspectRatio:helpers$1.getMaximumHeight(canvas)));if(me.width===newWidth&&me.height===newHeight){return;}canvas.width=me.width=newWidth;canvas.height=me.height=newHeight;canvas.style.width=newWidth+'px';canvas.style.height=newHeight+'px';helpers$1.retinaScale(me,options.devicePixelRatio);if(!silent){// Notify any plugins about the resize\nvar newSize={width:newWidth,height:newHeight};core_plugins.notify(me,'resize',[newSize]);// Notify of resize\nif(options.onResize){options.onResize(me,newSize);}me.stop();me.update({duration:options.responsiveAnimationDuration});}},ensureScalesHaveIDs:function ensureScalesHaveIDs(){var options=this.options;var scalesOptions=options.scales||{};var scaleOptions=options.scale;helpers$1.each(scalesOptions.xAxes,function(xAxisOptions,index){if(!xAxisOptions.id){xAxisOptions.id=nextAvailableScaleId(scalesOptions.xAxes,'x-axis-',index);}});helpers$1.each(scalesOptions.yAxes,function(yAxisOptions,index){if(!yAxisOptions.id){yAxisOptions.id=nextAvailableScaleId(scalesOptions.yAxes,'y-axis-',index);}});if(scaleOptions){scaleOptions.id=scaleOptions.id||'scale';}},/**\n\t * Builds a map of scale ID to scale object for future lookup.\n\t */buildOrUpdateScales:function buildOrUpdateScales(){var me=this;var options=me.options;var scales=me.scales||{};var items=[];var updated=Object.keys(scales).reduce(function(obj,id){obj[id]=false;return obj;},{});if(options.scales){items=items.concat((options.scales.xAxes||[]).map(function(xAxisOptions){return{options:xAxisOptions,dtype:'category',dposition:'bottom'};}),(options.scales.yAxes||[]).map(function(yAxisOptions){return{options:yAxisOptions,dtype:'linear',dposition:'left'};}));}if(options.scale){items.push({options:options.scale,dtype:'radialLinear',isDefault:true,dposition:'chartArea'});}helpers$1.each(items,function(item){var scaleOptions=item.options;var id=scaleOptions.id;var scaleType=valueOrDefault$9(scaleOptions.type,item.dtype);if(positionIsHorizontal(scaleOptions.position)!==positionIsHorizontal(item.dposition)){scaleOptions.position=item.dposition;}updated[id]=true;var scale=null;if(id in scales&&scales[id].type===scaleType){scale=scales[id];scale.options=scaleOptions;scale.ctx=me.ctx;scale.chart=me;}else{var scaleClass=core_scaleService.getScaleConstructor(scaleType);if(!scaleClass){return;}scale=new scaleClass({id:id,type:scaleType,options:scaleOptions,ctx:me.ctx,chart:me});scales[scale.id]=scale;}scale.mergeTicksOptions();// TODO(SB): I think we should be able to remove this custom case (options.scale)\n// and consider it as a regular scale part of the \"scales\"\" map only! This would\n// make the logic easier and remove some useless? custom code.\nif(item.isDefault){me.scale=scale;}});// clear up discarded scales\nhelpers$1.each(updated,function(hasUpdated,id){if(!hasUpdated){delete scales[id];}});me.scales=scales;core_scaleService.addScalesToLayout(this);},buildOrUpdateControllers:function buildOrUpdateControllers(){var me=this;var newControllers=[];var datasets=me.data.datasets;var i,ilen;for(i=0,ilen=datasets.length;i<ilen;i++){var dataset=datasets[i];var meta=me.getDatasetMeta(i);var type=dataset.type||me.config.type;if(meta.type&&meta.type!==type){me.destroyDatasetMeta(i);meta=me.getDatasetMeta(i);}meta.type=type;meta.order=dataset.order||0;meta.index=i;if(meta.controller){meta.controller.updateIndex(i);meta.controller.linkScales();}else{var ControllerClass=controllers[meta.type];if(ControllerClass===undefined){throw new Error('\"'+meta.type+'\" is not a chart type.');}meta.controller=new ControllerClass(me,i);newControllers.push(meta.controller);}}return newControllers;},/**\n\t * Reset the elements of all datasets\n\t * @private\n\t */resetElements:function resetElements(){var me=this;helpers$1.each(me.data.datasets,function(dataset,datasetIndex){me.getDatasetMeta(datasetIndex).controller.reset();},me);},/**\n\t* Resets the chart back to it's state before the initial animation\n\t*/reset:function reset(){this.resetElements();this.tooltip.initialize();},update:function update(config){var me=this;var i,ilen;if(!config||_typeof2(config)!=='object'){// backwards compatibility\nconfig={duration:config,lazy:arguments[1]};}updateConfig(me);// plugins options references might have change, let's invalidate the cache\n// https://github.com/chartjs/Chart.js/issues/5111#issuecomment-355934167\ncore_plugins._invalidate(me);if(core_plugins.notify(me,'beforeUpdate')===false){return;}// In case the entire data object changed\nme.tooltip._data=me.data;// Make sure dataset controllers are updated and new controllers are reset\nvar newControllers=me.buildOrUpdateControllers();// Make sure all dataset controllers have correct meta data counts\nfor(i=0,ilen=me.data.datasets.length;i<ilen;i++){me.getDatasetMeta(i).controller.buildOrUpdateElements();}me.updateLayout();// Can only reset the new controllers after the scales have been updated\nif(me.options.animation&&me.options.animation.duration){helpers$1.each(newControllers,function(controller){controller.reset();});}me.updateDatasets();// Need to reset tooltip in case it is displayed with elements that are removed\n// after update.\nme.tooltip.initialize();// Last active contains items that were previously in the tooltip.\n// When we reset the tooltip, we need to clear it\nme.lastActive=[];// Do this before render so that any plugins that need final scale updates can use it\ncore_plugins.notify(me,'afterUpdate');me._layers.sort(compare2Level('z','_idx'));if(me._bufferedRender){me._bufferedRequest={duration:config.duration,easing:config.easing,lazy:config.lazy};}else{me.render(config);}},/**\n\t * Updates the chart layout unless a plugin returns `false` to the `beforeLayout`\n\t * hook, in which case, plugins will not be called on `afterLayout`.\n\t * @private\n\t */updateLayout:function updateLayout(){var me=this;if(core_plugins.notify(me,'beforeLayout')===false){return;}core_layouts.update(this,this.width,this.height);me._layers=[];helpers$1.each(me.boxes,function(box){// _configure is called twice, once in core.scale.update and once here.\n// Here the boxes are fully updated and at their final positions.\nif(box._configure){box._configure();}me._layers.push.apply(me._layers,box._layers());},me);me._layers.forEach(function(item,index){item._idx=index;});/**\n\t\t * Provided for backward compatibility, use `afterLayout` instead.\n\t\t * @method IPlugin#afterScaleUpdate\n\t\t * @deprecated since version 2.5.0\n\t\t * @todo remove at version 3\n\t\t * @private\n\t\t */core_plugins.notify(me,'afterScaleUpdate');core_plugins.notify(me,'afterLayout');},/**\n\t * Updates all datasets unless a plugin returns `false` to the `beforeDatasetsUpdate`\n\t * hook, in which case, plugins will not be called on `afterDatasetsUpdate`.\n\t * @private\n\t */updateDatasets:function updateDatasets(){var me=this;if(core_plugins.notify(me,'beforeDatasetsUpdate')===false){return;}for(var i=0,ilen=me.data.datasets.length;i<ilen;++i){me.updateDataset(i);}core_plugins.notify(me,'afterDatasetsUpdate');},/**\n\t * Updates dataset at index unless a plugin returns `false` to the `beforeDatasetUpdate`\n\t * hook, in which case, plugins will not be called on `afterDatasetUpdate`.\n\t * @private\n\t */updateDataset:function updateDataset(index){var me=this;var meta=me.getDatasetMeta(index);var args={meta:meta,index:index};if(core_plugins.notify(me,'beforeDatasetUpdate',[args])===false){return;}meta.controller._update();core_plugins.notify(me,'afterDatasetUpdate',[args]);},render:function render(config){var me=this;if(!config||_typeof2(config)!=='object'){// backwards compatibility\nconfig={duration:config,lazy:arguments[1]};}var animationOptions=me.options.animation;var duration=valueOrDefault$9(config.duration,animationOptions&&animationOptions.duration);var lazy=config.lazy;if(core_plugins.notify(me,'beforeRender')===false){return;}var onComplete=function onComplete(animation){core_plugins.notify(me,'afterRender');helpers$1.callback(animationOptions&&animationOptions.onComplete,[animation],me);};if(animationOptions&&duration){var animation=new core_animation({numSteps:duration/16.66,// 60 fps\neasing:config.easing||animationOptions.easing,render:function render(chart,animationObject){var easingFunction=helpers$1.easing.effects[animationObject.easing];var currentStep=animationObject.currentStep;var stepDecimal=currentStep/animationObject.numSteps;chart.draw(easingFunction(stepDecimal),stepDecimal,currentStep);},onAnimationProgress:animationOptions.onProgress,onAnimationComplete:onComplete});core_animations.addAnimation(me,animation,duration,lazy);}else{me.draw();// See https://github.com/chartjs/Chart.js/issues/3781\nonComplete(new core_animation({numSteps:0,chart:me}));}return me;},draw:function draw(easingValue){var me=this;var i,layers;me.clear();if(helpers$1.isNullOrUndef(easingValue)){easingValue=1;}me.transition(easingValue);if(me.width<=0||me.height<=0){return;}if(core_plugins.notify(me,'beforeDraw',[easingValue])===false){return;}// Because of plugin hooks (before/afterDatasetsDraw), datasets can't\n// currently be part of layers. Instead, we draw\n// layers <= 0 before(default, backward compat), and the rest after\nlayers=me._layers;for(i=0;i<layers.length&&layers[i].z<=0;++i){layers[i].draw(me.chartArea);}me.drawDatasets(easingValue);// Rest of layers\nfor(;i<layers.length;++i){layers[i].draw(me.chartArea);}me._drawTooltip(easingValue);core_plugins.notify(me,'afterDraw',[easingValue]);},/**\n\t * @private\n\t */transition:function transition(easingValue){var me=this;for(var i=0,ilen=(me.data.datasets||[]).length;i<ilen;++i){if(me.isDatasetVisible(i)){me.getDatasetMeta(i).controller.transition(easingValue);}}me.tooltip.transition(easingValue);},/**\n\t * @private\n\t */_getSortedDatasetMetas:function _getSortedDatasetMetas(filterVisible){var me=this;var datasets=me.data.datasets||[];var result=[];var i,ilen;for(i=0,ilen=datasets.length;i<ilen;++i){if(!filterVisible||me.isDatasetVisible(i)){result.push(me.getDatasetMeta(i));}}result.sort(compare2Level('order','index'));return result;},/**\n\t * @private\n\t */_getSortedVisibleDatasetMetas:function _getSortedVisibleDatasetMetas(){return this._getSortedDatasetMetas(true);},/**\n\t * Draws all datasets unless a plugin returns `false` to the `beforeDatasetsDraw`\n\t * hook, in which case, plugins will not be called on `afterDatasetsDraw`.\n\t * @private\n\t */drawDatasets:function drawDatasets(easingValue){var me=this;var metasets,i;if(core_plugins.notify(me,'beforeDatasetsDraw',[easingValue])===false){return;}metasets=me._getSortedVisibleDatasetMetas();for(i=metasets.length-1;i>=0;--i){me.drawDataset(metasets[i],easingValue);}core_plugins.notify(me,'afterDatasetsDraw',[easingValue]);},/**\n\t * Draws dataset at index unless a plugin returns `false` to the `beforeDatasetDraw`\n\t * hook, in which case, plugins will not be called on `afterDatasetDraw`.\n\t * @private\n\t */drawDataset:function drawDataset(meta,easingValue){var me=this;var args={meta:meta,index:meta.index,easingValue:easingValue};if(core_plugins.notify(me,'beforeDatasetDraw',[args])===false){return;}meta.controller.draw(easingValue);core_plugins.notify(me,'afterDatasetDraw',[args]);},/**\n\t * Draws tooltip unless a plugin returns `false` to the `beforeTooltipDraw`\n\t * hook, in which case, plugins will not be called on `afterTooltipDraw`.\n\t * @private\n\t */_drawTooltip:function _drawTooltip(easingValue){var me=this;var tooltip=me.tooltip;var args={tooltip:tooltip,easingValue:easingValue};if(core_plugins.notify(me,'beforeTooltipDraw',[args])===false){return;}tooltip.draw();core_plugins.notify(me,'afterTooltipDraw',[args]);},/**\n\t * Get the single element that was clicked on\n\t * @return An object containing the dataset index and element index of the matching element. Also contains the rectangle that was draw\n\t */getElementAtEvent:function getElementAtEvent(e){return core_interaction.modes.single(this,e);},getElementsAtEvent:function getElementsAtEvent(e){return core_interaction.modes.label(this,e,{intersect:true});},getElementsAtXAxis:function getElementsAtXAxis(e){return core_interaction.modes['x-axis'](this,e,{intersect:true});},getElementsAtEventForMode:function getElementsAtEventForMode(e,mode,options){var method=core_interaction.modes[mode];if(typeof method==='function'){return method(this,e,options);}return[];},getDatasetAtEvent:function getDatasetAtEvent(e){return core_interaction.modes.dataset(this,e,{intersect:true});},getDatasetMeta:function getDatasetMeta(datasetIndex){var me=this;var dataset=me.data.datasets[datasetIndex];if(!dataset._meta){dataset._meta={};}var meta=dataset._meta[me.id];if(!meta){meta=dataset._meta[me.id]={type:null,data:[],dataset:null,controller:null,hidden:null,// See isDatasetVisible() comment\nxAxisID:null,yAxisID:null,order:dataset.order||0,index:datasetIndex};}return meta;},getVisibleDatasetCount:function getVisibleDatasetCount(){var count=0;for(var i=0,ilen=this.data.datasets.length;i<ilen;++i){if(this.isDatasetVisible(i)){count++;}}return count;},isDatasetVisible:function isDatasetVisible(datasetIndex){var meta=this.getDatasetMeta(datasetIndex);// meta.hidden is a per chart dataset hidden flag override with 3 states: if true or false,\n// the dataset.hidden value is ignored, else if null, the dataset hidden state is returned.\nreturn typeof meta.hidden==='boolean'?!meta.hidden:!this.data.datasets[datasetIndex].hidden;},generateLegend:function generateLegend(){return this.options.legendCallback(this);},/**\n\t * @private\n\t */destroyDatasetMeta:function destroyDatasetMeta(datasetIndex){var id=this.id;var dataset=this.data.datasets[datasetIndex];var meta=dataset._meta&&dataset._meta[id];if(meta){meta.controller.destroy();delete dataset._meta[id];}},destroy:function destroy(){var me=this;var canvas=me.canvas;var i,ilen;me.stop();// dataset controllers need to cleanup associated data\nfor(i=0,ilen=me.data.datasets.length;i<ilen;++i){me.destroyDatasetMeta(i);}if(canvas){me.unbindEvents();helpers$1.canvas.clear(me);platform.releaseContext(me.ctx);me.canvas=null;me.ctx=null;}core_plugins.notify(me,'destroy');delete Chart.instances[me.id];},toBase64Image:function toBase64Image(){return this.canvas.toDataURL.apply(this.canvas,arguments);},initToolTip:function initToolTip(){var me=this;me.tooltip=new core_tooltip({_chart:me,_chartInstance:me,// deprecated, backward compatibility\n_data:me.data,_options:me.options.tooltips},me);},/**\n\t * @private\n\t */bindEvents:function bindEvents(){var me=this;var listeners=me._listeners={};var listener=function listener(){me.eventHandler.apply(me,arguments);};helpers$1.each(me.options.events,function(type){platform.addEventListener(me,type,listener);listeners[type]=listener;});// Elements used to detect size change should not be injected for non responsive charts.\n// See https://github.com/chartjs/Chart.js/issues/2210\nif(me.options.responsive){listener=function listener(){me.resize();};platform.addEventListener(me,'resize',listener);listeners.resize=listener;}},/**\n\t * @private\n\t */unbindEvents:function unbindEvents(){var me=this;var listeners=me._listeners;if(!listeners){return;}delete me._listeners;helpers$1.each(listeners,function(listener,type){platform.removeEventListener(me,type,listener);});},updateHoverStyle:function updateHoverStyle(elements,mode,enabled){var prefix=enabled?'set':'remove';var element,i,ilen;for(i=0,ilen=elements.length;i<ilen;++i){element=elements[i];if(element){this.getDatasetMeta(element._datasetIndex).controller[prefix+'HoverStyle'](element);}}if(mode==='dataset'){this.getDatasetMeta(elements[0]._datasetIndex).controller['_'+prefix+'DatasetHoverStyle']();}},/**\n\t * @private\n\t */eventHandler:function eventHandler(e){var me=this;var tooltip=me.tooltip;if(core_plugins.notify(me,'beforeEvent',[e])===false){return;}// Buffer any update calls so that renders do not occur\nme._bufferedRender=true;me._bufferedRequest=null;var changed=me.handleEvent(e);// for smooth tooltip animations issue #4989\n// the tooltip should be the source of change\n// Animation check workaround:\n// tooltip._start will be null when tooltip isn't animating\nif(tooltip){changed=tooltip._start?tooltip.handleEvent(e):changed|tooltip.handleEvent(e);}core_plugins.notify(me,'afterEvent',[e]);var bufferedRequest=me._bufferedRequest;if(bufferedRequest){// If we have an update that was triggered, we need to do a normal render\nme.render(bufferedRequest);}else if(changed&&!me.animating){// If entering, leaving, or changing elements, animate the change via pivot\nme.stop();// We only need to render at this point. Updating will cause scales to be\n// recomputed generating flicker & using more memory than necessary.\nme.render({duration:me.options.hover.animationDuration,lazy:true});}me._bufferedRender=false;me._bufferedRequest=null;return me;},/**\n\t * Handle an event\n\t * @private\n\t * @param {IEvent} event the event to handle\n\t * @return {boolean} true if the chart needs to re-render\n\t */handleEvent:function handleEvent(e){var me=this;var options=me.options||{};var hoverOptions=options.hover;var changed=false;me.lastActive=me.lastActive||[];// Find Active Elements for hover and tooltips\nif(e.type==='mouseout'){me.active=[];}else{me.active=me.getElementsAtEventForMode(e,hoverOptions.mode,hoverOptions);}// Invoke onHover hook\n// Need to call with native event here to not break backwards compatibility\nhelpers$1.callback(options.onHover||options.hover.onHover,[e[\"native\"],me.active],me);if(e.type==='mouseup'||e.type==='click'){if(options.onClick){// Use e.native here for backwards compatibility\noptions.onClick.call(me,e[\"native\"],me.active);}}// Remove styling for last active (even if it may still be active)\nif(me.lastActive.length){me.updateHoverStyle(me.lastActive,hoverOptions.mode,false);}// Built in hover styling\nif(me.active.length&&hoverOptions.mode){me.updateHoverStyle(me.active,hoverOptions.mode,true);}changed=!helpers$1.arrayEquals(me.active,me.lastActive);// Remember Last Actives\nme.lastActive=me.active;return changed;}});/**\n * NOTE(SB) We actually don't use this container anymore but we need to keep it\n * for backward compatibility. Though, it can still be useful for plugins that\n * would need to work on multiple charts?!\n */Chart.instances={};var core_controller=Chart;// DEPRECATIONS\n/**\n * Provided for backward compatibility, use Chart instead.\n * @class Chart.Controller\n * @deprecated since version 2.6\n * @todo remove at version 3\n * @private\n */Chart.Controller=Chart;/**\n * Provided for backward compatibility, not available anymore.\n * @namespace Chart\n * @deprecated since version 2.8\n * @todo remove at version 3\n * @private\n */Chart.types={};/**\n * Provided for backward compatibility, not available anymore.\n * @namespace Chart.helpers.configMerge\n * @deprecated since version 2.8.0\n * @todo remove at version 3\n * @private\n */helpers$1.configMerge=mergeConfig;/**\n * Provided for backward compatibility, not available anymore.\n * @namespace Chart.helpers.scaleMerge\n * @deprecated since version 2.8.0\n * @todo remove at version 3\n * @private\n */helpers$1.scaleMerge=mergeScaleConfig;var core_helpers=function core_helpers(){// -- Basic js utility methods\nhelpers$1.where=function(collection,filterCallback){if(helpers$1.isArray(collection)&&Array.prototype.filter){return collection.filter(filterCallback);}var filtered=[];helpers$1.each(collection,function(item){if(filterCallback(item)){filtered.push(item);}});return filtered;};helpers$1.findIndex=Array.prototype.findIndex?function(array,callback,scope){return array.findIndex(callback,scope);}:function(array,callback,scope){scope=scope===undefined?array:scope;for(var i=0,ilen=array.length;i<ilen;++i){if(callback.call(scope,array[i],i,array)){return i;}}return-1;};helpers$1.findNextWhere=function(arrayToSearch,filterCallback,startIndex){// Default to start of the array\nif(helpers$1.isNullOrUndef(startIndex)){startIndex=-1;}for(var i=startIndex+1;i<arrayToSearch.length;i++){var currentItem=arrayToSearch[i];if(filterCallback(currentItem)){return currentItem;}}};helpers$1.findPreviousWhere=function(arrayToSearch,filterCallback,startIndex){// Default to end of the array\nif(helpers$1.isNullOrUndef(startIndex)){startIndex=arrayToSearch.length;}for(var i=startIndex-1;i>=0;i--){var currentItem=arrayToSearch[i];if(filterCallback(currentItem)){return currentItem;}}};// -- Math methods\nhelpers$1.isNumber=function(n){return!isNaN(parseFloat(n))&&isFinite(n);};helpers$1.almostEquals=function(x,y,epsilon){return Math.abs(x-y)<epsilon;};helpers$1.almostWhole=function(x,epsilon){var rounded=Math.round(x);return rounded-epsilon<=x&&rounded+epsilon>=x;};helpers$1.max=function(array){return array.reduce(function(max,value){if(!isNaN(value)){return Math.max(max,value);}return max;},Number.NEGATIVE_INFINITY);};helpers$1.min=function(array){return array.reduce(function(min,value){if(!isNaN(value)){return Math.min(min,value);}return min;},Number.POSITIVE_INFINITY);};helpers$1.sign=Math.sign?function(x){return Math.sign(x);}:function(x){x=+x;// convert to a number\nif(x===0||isNaN(x)){return x;}return x>0?1:-1;};helpers$1.toRadians=function(degrees){return degrees*(Math.PI/180);};helpers$1.toDegrees=function(radians){return radians*(180/Math.PI);};/**\n\t * Returns the number of decimal places\n\t * i.e. the number of digits after the decimal point, of the value of this Number.\n\t * @param {number} x - A number.\n\t * @returns {number} The number of decimal places.\n\t * @private\n\t */helpers$1._decimalPlaces=function(x){if(!helpers$1.isFinite(x)){return;}var e=1;var p=0;while(Math.round(x*e)/e!==x){e*=10;p++;}return p;};// Gets the angle from vertical upright to the point about a centre.\nhelpers$1.getAngleFromPoint=function(centrePoint,anglePoint){var distanceFromXCenter=anglePoint.x-centrePoint.x;var distanceFromYCenter=anglePoint.y-centrePoint.y;var radialDistanceFromCenter=Math.sqrt(distanceFromXCenter*distanceFromXCenter+distanceFromYCenter*distanceFromYCenter);var angle=Math.atan2(distanceFromYCenter,distanceFromXCenter);if(angle<-0.5*Math.PI){angle+=2.0*Math.PI;// make sure the returned angle is in the range of (-PI/2, 3PI/2]\n}return{angle:angle,distance:radialDistanceFromCenter};};helpers$1.distanceBetweenPoints=function(pt1,pt2){return Math.sqrt(Math.pow(pt2.x-pt1.x,2)+Math.pow(pt2.y-pt1.y,2));};/**\n\t * Provided for backward compatibility, not available anymore\n\t * @function Chart.helpers.aliasPixel\n\t * @deprecated since version 2.8.0\n\t * @todo remove at version 3\n\t */helpers$1.aliasPixel=function(pixelWidth){return pixelWidth%2===0?0:0.5;};/**\n\t * Returns the aligned pixel value to avoid anti-aliasing blur\n\t * @param {Chart} chart - The chart instance.\n\t * @param {number} pixel - A pixel value.\n\t * @param {number} width - The width of the element.\n\t * @returns {number} The aligned pixel value.\n\t * @private\n\t */helpers$1._alignPixel=function(chart,pixel,width){var devicePixelRatio=chart.currentDevicePixelRatio;var halfWidth=width/2;return Math.round((pixel-halfWidth)*devicePixelRatio)/devicePixelRatio+halfWidth;};helpers$1.splineCurve=function(firstPoint,middlePoint,afterPoint,t){// Props to Rob Spencer at scaled innovation for his post on splining between points\n// http://scaledinnovation.com/analytics/splines/aboutSplines.html\n// This function must also respect \"skipped\" points\nvar previous=firstPoint.skip?middlePoint:firstPoint;var current=middlePoint;var next=afterPoint.skip?middlePoint:afterPoint;var d01=Math.sqrt(Math.pow(current.x-previous.x,2)+Math.pow(current.y-previous.y,2));var d12=Math.sqrt(Math.pow(next.x-current.x,2)+Math.pow(next.y-current.y,2));var s01=d01/(d01+d12);var s12=d12/(d01+d12);// If all points are the same, s01 & s02 will be inf\ns01=isNaN(s01)?0:s01;s12=isNaN(s12)?0:s12;var fa=t*s01;// scaling factor for triangle Ta\nvar fb=t*s12;return{previous:{x:current.x-fa*(next.x-previous.x),y:current.y-fa*(next.y-previous.y)},next:{x:current.x+fb*(next.x-previous.x),y:current.y+fb*(next.y-previous.y)}};};helpers$1.EPSILON=Number.EPSILON||1e-14;helpers$1.splineCurveMonotone=function(points){// This function calculates Bézier control points in a similar way than |splineCurve|,\n// but preserves monotonicity of the provided data and ensures no local extremums are added\n// between the dataset discrete points due to the interpolation.\n// See : https://en.wikipedia.org/wiki/Monotone_cubic_interpolation\nvar pointsWithTangents=(points||[]).map(function(point){return{model:point._model,deltaK:0,mK:0};});// Calculate slopes (deltaK) and initialize tangents (mK)\nvar pointsLen=pointsWithTangents.length;var i,pointBefore,pointCurrent,pointAfter;for(i=0;i<pointsLen;++i){pointCurrent=pointsWithTangents[i];if(pointCurrent.model.skip){continue;}pointBefore=i>0?pointsWithTangents[i-1]:null;pointAfter=i<pointsLen-1?pointsWithTangents[i+1]:null;if(pointAfter&&!pointAfter.model.skip){var slopeDeltaX=pointAfter.model.x-pointCurrent.model.x;// In the case of two points that appear at the same x pixel, slopeDeltaX is 0\npointCurrent.deltaK=slopeDeltaX!==0?(pointAfter.model.y-pointCurrent.model.y)/slopeDeltaX:0;}if(!pointBefore||pointBefore.model.skip){pointCurrent.mK=pointCurrent.deltaK;}else if(!pointAfter||pointAfter.model.skip){pointCurrent.mK=pointBefore.deltaK;}else if(this.sign(pointBefore.deltaK)!==this.sign(pointCurrent.deltaK)){pointCurrent.mK=0;}else{pointCurrent.mK=(pointBefore.deltaK+pointCurrent.deltaK)/2;}}// Adjust tangents to ensure monotonic properties\nvar alphaK,betaK,tauK,squaredMagnitude;for(i=0;i<pointsLen-1;++i){pointCurrent=pointsWithTangents[i];pointAfter=pointsWithTangents[i+1];if(pointCurrent.model.skip||pointAfter.model.skip){continue;}if(helpers$1.almostEquals(pointCurrent.deltaK,0,this.EPSILON)){pointCurrent.mK=pointAfter.mK=0;continue;}alphaK=pointCurrent.mK/pointCurrent.deltaK;betaK=pointAfter.mK/pointCurrent.deltaK;squaredMagnitude=Math.pow(alphaK,2)+Math.pow(betaK,2);if(squaredMagnitude<=9){continue;}tauK=3/Math.sqrt(squaredMagnitude);pointCurrent.mK=alphaK*tauK*pointCurrent.deltaK;pointAfter.mK=betaK*tauK*pointCurrent.deltaK;}// Compute control points\nvar deltaX;for(i=0;i<pointsLen;++i){pointCurrent=pointsWithTangents[i];if(pointCurrent.model.skip){continue;}pointBefore=i>0?pointsWithTangents[i-1]:null;pointAfter=i<pointsLen-1?pointsWithTangents[i+1]:null;if(pointBefore&&!pointBefore.model.skip){deltaX=(pointCurrent.model.x-pointBefore.model.x)/3;pointCurrent.model.controlPointPreviousX=pointCurrent.model.x-deltaX;pointCurrent.model.controlPointPreviousY=pointCurrent.model.y-deltaX*pointCurrent.mK;}if(pointAfter&&!pointAfter.model.skip){deltaX=(pointAfter.model.x-pointCurrent.model.x)/3;pointCurrent.model.controlPointNextX=pointCurrent.model.x+deltaX;pointCurrent.model.controlPointNextY=pointCurrent.model.y+deltaX*pointCurrent.mK;}}};helpers$1.nextItem=function(collection,index,loop){if(loop){return index>=collection.length-1?collection[0]:collection[index+1];}return index>=collection.length-1?collection[collection.length-1]:collection[index+1];};helpers$1.previousItem=function(collection,index,loop){if(loop){return index<=0?collection[collection.length-1]:collection[index-1];}return index<=0?collection[0]:collection[index-1];};// Implementation of the nice number algorithm used in determining where axis labels will go\nhelpers$1.niceNum=function(range,round){var exponent=Math.floor(helpers$1.log10(range));var fraction=range/Math.pow(10,exponent);var niceFraction;if(round){if(fraction<1.5){niceFraction=1;}else if(fraction<3){niceFraction=2;}else if(fraction<7){niceFraction=5;}else{niceFraction=10;}}else if(fraction<=1.0){niceFraction=1;}else if(fraction<=2){niceFraction=2;}else if(fraction<=5){niceFraction=5;}else{niceFraction=10;}return niceFraction*Math.pow(10,exponent);};// Request animation polyfill - https://www.paulirish.com/2011/requestanimationframe-for-smart-animating/\nhelpers$1.requestAnimFrame=function(){if(typeof window==='undefined'){return function(callback){callback();};}return window.requestAnimationFrame||window.webkitRequestAnimationFrame||window.mozRequestAnimationFrame||window.oRequestAnimationFrame||window.msRequestAnimationFrame||function(callback){return window.setTimeout(callback,1000/60);};}();// -- DOM methods\nhelpers$1.getRelativePosition=function(evt,chart){var mouseX,mouseY;var e=evt.originalEvent||evt;var canvas=evt.target||evt.srcElement;var boundingRect=canvas.getBoundingClientRect();var touches=e.touches;if(touches&&touches.length>0){mouseX=touches[0].clientX;mouseY=touches[0].clientY;}else{mouseX=e.clientX;mouseY=e.clientY;}// Scale mouse coordinates into canvas coordinates\n// by following the pattern laid out by 'jerryj' in the comments of\n// https://www.html5canvastutorials.com/advanced/html5-canvas-mouse-coordinates/\nvar paddingLeft=parseFloat(helpers$1.getStyle(canvas,'padding-left'));var paddingTop=parseFloat(helpers$1.getStyle(canvas,'padding-top'));var paddingRight=parseFloat(helpers$1.getStyle(canvas,'padding-right'));var paddingBottom=parseFloat(helpers$1.getStyle(canvas,'padding-bottom'));var width=boundingRect.right-boundingRect.left-paddingLeft-paddingRight;var height=boundingRect.bottom-boundingRect.top-paddingTop-paddingBottom;// We divide by the current device pixel ratio, because the canvas is scaled up by that amount in each direction. However\n// the backend model is in unscaled coordinates. Since we are going to deal with our model coordinates, we go back here\nmouseX=Math.round((mouseX-boundingRect.left-paddingLeft)/width*canvas.width/chart.currentDevicePixelRatio);mouseY=Math.round((mouseY-boundingRect.top-paddingTop)/height*canvas.height/chart.currentDevicePixelRatio);return{x:mouseX,y:mouseY};};// Private helper function to convert max-width/max-height values that may be percentages into a number\nfunction parseMaxStyle(styleValue,node,parentProperty){var valueInPixels;if(typeof styleValue==='string'){valueInPixels=parseInt(styleValue,10);if(styleValue.indexOf('%')!==-1){// percentage * size in dimension\nvalueInPixels=valueInPixels/100*node.parentNode[parentProperty];}}else{valueInPixels=styleValue;}return valueInPixels;}/**\n\t * Returns if the given value contains an effective constraint.\n\t * @private\n\t */function isConstrainedValue(value){return value!==undefined&&value!==null&&value!=='none';}/**\n\t * Returns the max width or height of the given DOM node in a cross-browser compatible fashion\n\t * @param {HTMLElement} domNode - the node to check the constraint on\n\t * @param {string} maxStyle - the style that defines the maximum for the direction we are using ('max-width' / 'max-height')\n\t * @param {string} percentageProperty - property of parent to use when calculating width as a percentage\n\t * @see {@link https://www.nathanaeljones.com/blog/2013/reading-max-width-cross-browser}\n\t */function getConstraintDimension(domNode,maxStyle,percentageProperty){var view=document.defaultView;var parentNode=helpers$1._getParentNode(domNode);var constrainedNode=view.getComputedStyle(domNode)[maxStyle];var constrainedContainer=view.getComputedStyle(parentNode)[maxStyle];var hasCNode=isConstrainedValue(constrainedNode);var hasCContainer=isConstrainedValue(constrainedContainer);var infinity=Number.POSITIVE_INFINITY;if(hasCNode||hasCContainer){return Math.min(hasCNode?parseMaxStyle(constrainedNode,domNode,percentageProperty):infinity,hasCContainer?parseMaxStyle(constrainedContainer,parentNode,percentageProperty):infinity);}return'none';}// returns Number or undefined if no constraint\nhelpers$1.getConstraintWidth=function(domNode){return getConstraintDimension(domNode,'max-width','clientWidth');};// returns Number or undefined if no constraint\nhelpers$1.getConstraintHeight=function(domNode){return getConstraintDimension(domNode,'max-height','clientHeight');};/**\n\t * @private\n \t */helpers$1._calculatePadding=function(container,padding,parentDimension){padding=helpers$1.getStyle(container,padding);return padding.indexOf('%')>-1?parentDimension*parseInt(padding,10)/100:parseInt(padding,10);};/**\n\t * @private\n\t */helpers$1._getParentNode=function(domNode){var parent=domNode.parentNode;if(parent&&parent.toString()==='[object ShadowRoot]'){parent=parent.host;}return parent;};helpers$1.getMaximumWidth=function(domNode){var container=helpers$1._getParentNode(domNode);if(!container){return domNode.clientWidth;}var clientWidth=container.clientWidth;var paddingLeft=helpers$1._calculatePadding(container,'padding-left',clientWidth);var paddingRight=helpers$1._calculatePadding(container,'padding-right',clientWidth);var w=clientWidth-paddingLeft-paddingRight;var cw=helpers$1.getConstraintWidth(domNode);return isNaN(cw)?w:Math.min(w,cw);};helpers$1.getMaximumHeight=function(domNode){var container=helpers$1._getParentNode(domNode);if(!container){return domNode.clientHeight;}var clientHeight=container.clientHeight;var paddingTop=helpers$1._calculatePadding(container,'padding-top',clientHeight);var paddingBottom=helpers$1._calculatePadding(container,'padding-bottom',clientHeight);var h=clientHeight-paddingTop-paddingBottom;var ch=helpers$1.getConstraintHeight(domNode);return isNaN(ch)?h:Math.min(h,ch);};helpers$1.getStyle=function(el,property){return el.currentStyle?el.currentStyle[property]:document.defaultView.getComputedStyle(el,null).getPropertyValue(property);};helpers$1.retinaScale=function(chart,forceRatio){var pixelRatio=chart.currentDevicePixelRatio=forceRatio||typeof window!=='undefined'&&window.devicePixelRatio||1;if(pixelRatio===1){return;}var canvas=chart.canvas;var height=chart.height;var width=chart.width;canvas.height=height*pixelRatio;canvas.width=width*pixelRatio;chart.ctx.scale(pixelRatio,pixelRatio);// If no style has been set on the canvas, the render size is used as display size,\n// making the chart visually bigger, so let's enforce it to the \"correct\" values.\n// See https://github.com/chartjs/Chart.js/issues/3575\nif(!canvas.style.height&&!canvas.style.width){canvas.style.height=height+'px';canvas.style.width=width+'px';}};// -- Canvas methods\nhelpers$1.fontString=function(pixelSize,fontStyle,fontFamily){return fontStyle+' '+pixelSize+'px '+fontFamily;};helpers$1.longestText=function(ctx,font,arrayOfThings,cache){cache=cache||{};var data=cache.data=cache.data||{};var gc=cache.garbageCollect=cache.garbageCollect||[];if(cache.font!==font){data=cache.data={};gc=cache.garbageCollect=[];cache.font=font;}ctx.font=font;var longest=0;var ilen=arrayOfThings.length;var i,j,jlen,thing,nestedThing;for(i=0;i<ilen;i++){thing=arrayOfThings[i];// Undefined strings and arrays should not be measured\nif(thing!==undefined&&thing!==null&&helpers$1.isArray(thing)!==true){longest=helpers$1.measureText(ctx,data,gc,longest,thing);}else if(helpers$1.isArray(thing)){// if it is an array lets measure each element\n// to do maybe simplify this function a bit so we can do this more recursively?\nfor(j=0,jlen=thing.length;j<jlen;j++){nestedThing=thing[j];// Undefined strings and arrays should not be measured\nif(nestedThing!==undefined&&nestedThing!==null&&!helpers$1.isArray(nestedThing)){longest=helpers$1.measureText(ctx,data,gc,longest,nestedThing);}}}}var gcLen=gc.length/2;if(gcLen>arrayOfThings.length){for(i=0;i<gcLen;i++){delete data[gc[i]];}gc.splice(0,gcLen);}return longest;};helpers$1.measureText=function(ctx,data,gc,longest,string){var textWidth=data[string];if(!textWidth){textWidth=data[string]=ctx.measureText(string).width;gc.push(string);}if(textWidth>longest){longest=textWidth;}return longest;};/**\n\t * @deprecated\n\t */helpers$1.numberOfLabelLines=function(arrayOfThings){var numberOfLines=1;helpers$1.each(arrayOfThings,function(thing){if(helpers$1.isArray(thing)){if(thing.length>numberOfLines){numberOfLines=thing.length;}}});return numberOfLines;};helpers$1.color=!chartjsColor?function(value){console.error('Color.js not found!');return value;}:function(value){/* global CanvasGradient */if(value instanceof CanvasGradient){value=core_defaults.global.defaultColor;}return chartjsColor(value);};helpers$1.getHoverColor=function(colorValue){/* global CanvasPattern */return colorValue instanceof CanvasPattern||colorValue instanceof CanvasGradient?colorValue:helpers$1.color(colorValue).saturate(0.5).darken(0.1).rgbString();};};function _abstract(){throw new Error('This method is not implemented: either no adapter can '+'be found or an incomplete integration was provided.');}/**\n * Date adapter (current used by the time scale)\n * @namespace Chart._adapters._date\n * @memberof Chart._adapters\n * @private\n */ /**\n * Currently supported unit string values.\n * @typedef {('millisecond'|'second'|'minute'|'hour'|'day'|'week'|'month'|'quarter'|'year')}\n * @memberof Chart._adapters._date\n * @name Unit\n */ /**\n * @class\n */function DateAdapter(options){this.options=options||{};}helpers$1.extend(DateAdapter.prototype,/** @lends DateAdapter */{/**\n\t * Returns a map of time formats for the supported formatting units defined\n\t * in Unit as well as 'datetime' representing a detailed date/time string.\n\t * @returns {{string: string}}\n\t */formats:_abstract,/**\n\t * Parses the given `value` and return the associated timestamp.\n\t * @param {any} value - the value to parse (usually comes from the data)\n\t * @param {string} [format] - the expected data format\n\t * @returns {(number|null)}\n\t * @function\n\t */parse:_abstract,/**\n\t * Returns the formatted date in the specified `format` for a given `timestamp`.\n\t * @param {number} timestamp - the timestamp to format\n\t * @param {string} format - the date/time token\n\t * @return {string}\n\t * @function\n\t */format:_abstract,/**\n\t * Adds the specified `amount` of `unit` to the given `timestamp`.\n\t * @param {number} timestamp - the input timestamp\n\t * @param {number} amount - the amount to add\n\t * @param {Unit} unit - the unit as string\n\t * @return {number}\n\t * @function\n\t */add:_abstract,/**\n\t * Returns the number of `unit` between the given timestamps.\n\t * @param {number} max - the input timestamp (reference)\n\t * @param {number} min - the timestamp to substract\n\t * @param {Unit} unit - the unit as string\n\t * @return {number}\n\t * @function\n\t */diff:_abstract,/**\n\t * Returns start of `unit` for the given `timestamp`.\n\t * @param {number} timestamp - the input timestamp\n\t * @param {Unit} unit - the unit as string\n\t * @param {number} [weekday] - the ISO day of the week with 1 being Monday\n\t * and 7 being Sunday (only needed if param *unit* is `isoWeek`).\n\t * @function\n\t */startOf:_abstract,/**\n\t * Returns end of `unit` for the given `timestamp`.\n\t * @param {number} timestamp - the input timestamp\n\t * @param {Unit} unit - the unit as string\n\t * @function\n\t */endOf:_abstract,// DEPRECATIONS\n/**\n\t * Provided for backward compatibility for scale.getValueForPixel(),\n\t * this method should be overridden only by the moment adapter.\n\t * @deprecated since version 2.8.0\n\t * @todo remove at version 3\n\t * @private\n\t */_create:function _create(value){return value;}});DateAdapter.override=function(members){helpers$1.extend(DateAdapter.prototype,members);};var _date=DateAdapter;var core_adapters={_date:_date};/**\n * Namespace to hold static tick generation functions\n * @namespace Chart.Ticks\n */var core_ticks={/**\n\t * Namespace to hold formatters for different types of ticks\n\t * @namespace Chart.Ticks.formatters\n\t */formatters:{/**\n\t\t * Formatter for value labels\n\t\t * @method Chart.Ticks.formatters.values\n\t\t * @param value the value to display\n\t\t * @return {string|string[]} the label to display\n\t\t */values:function values(value){return helpers$1.isArray(value)?value:''+value;},/**\n\t\t * Formatter for linear numeric ticks\n\t\t * @method Chart.Ticks.formatters.linear\n\t\t * @param tickValue {number} the value to be formatted\n\t\t * @param index {number} the position of the tickValue parameter in the ticks array\n\t\t * @param ticks {number[]} the list of ticks being converted\n\t\t * @return {string} string representation of the tickValue parameter\n\t\t */linear:function linear(tickValue,index,ticks){// If we have lots of ticks, don't use the ones\nvar delta=ticks.length>3?ticks[2]-ticks[1]:ticks[1]-ticks[0];// If we have a number like 2.5 as the delta, figure out how many decimal places we need\nif(Math.abs(delta)>1){if(tickValue!==Math.floor(tickValue)){// not an integer\ndelta=tickValue-Math.floor(tickValue);}}var logDelta=helpers$1.log10(Math.abs(delta));var tickString='';if(tickValue!==0){var maxTick=Math.max(Math.abs(ticks[0]),Math.abs(ticks[ticks.length-1]));if(maxTick<1e-4){// all ticks are small numbers; use scientific notation\nvar logTick=helpers$1.log10(Math.abs(tickValue));var numExponential=Math.floor(logTick)-Math.floor(logDelta);numExponential=Math.max(Math.min(numExponential,20),0);tickString=tickValue.toExponential(numExponential);}else{var numDecimal=-1*Math.floor(logDelta);numDecimal=Math.max(Math.min(numDecimal,20),0);// toFixed has a max of 20 decimal places\ntickString=tickValue.toFixed(numDecimal);}}else{tickString='0';// never show decimal places for 0\n}return tickString;},logarithmic:function logarithmic(tickValue,index,ticks){var remain=tickValue/Math.pow(10,Math.floor(helpers$1.log10(tickValue)));if(tickValue===0){return'0';}else if(remain===1||remain===2||remain===5||index===0||index===ticks.length-1){return tickValue.toExponential();}return'';}}};var isArray=helpers$1.isArray;var isNullOrUndef=helpers$1.isNullOrUndef;var valueOrDefault$a=helpers$1.valueOrDefault;var valueAtIndexOrDefault=helpers$1.valueAtIndexOrDefault;core_defaults._set('scale',{display:true,position:'left',offset:false,// grid line settings\ngridLines:{display:true,color:'rgba(0,0,0,0.1)',lineWidth:1,drawBorder:true,drawOnChartArea:true,drawTicks:true,tickMarkLength:10,zeroLineWidth:1,zeroLineColor:'rgba(0,0,0,0.25)',zeroLineBorderDash:[],zeroLineBorderDashOffset:0.0,offsetGridLines:false,borderDash:[],borderDashOffset:0.0},// scale label\nscaleLabel:{// display property\ndisplay:false,// actual label\nlabelString:'',// top/bottom padding\npadding:{top:4,bottom:4}},// label settings\nticks:{beginAtZero:false,minRotation:0,maxRotation:50,mirror:false,padding:0,reverse:false,display:true,autoSkip:true,autoSkipPadding:0,labelOffset:0,// We pass through arrays to be rendered as multiline labels, we convert Others to strings here.\ncallback:core_ticks.formatters.values,minor:{},major:{}}});/** Returns a new array containing numItems from arr */function sample(arr,numItems){var result=[];var increment=arr.length/numItems;var i=0;var len=arr.length;for(;i<len;i+=increment){result.push(arr[Math.floor(i)]);}return result;}function getPixelForGridLine(scale,index,offsetGridLines){var length=scale.getTicks().length;var validIndex=Math.min(index,length-1);var lineValue=scale.getPixelForTick(validIndex);var start=scale._startPixel;var end=scale._endPixel;var epsilon=1e-6;// 1e-6 is margin in pixels for accumulated error.\nvar offset;if(offsetGridLines){if(length===1){offset=Math.max(lineValue-start,end-lineValue);}else if(index===0){offset=(scale.getPixelForTick(1)-lineValue)/2;}else{offset=(lineValue-scale.getPixelForTick(validIndex-1))/2;}lineValue+=validIndex<index?offset:-offset;// Return undefined if the pixel is out of the range\nif(lineValue<start-epsilon||lineValue>end+epsilon){return;}}return lineValue;}function garbageCollect(caches,length){helpers$1.each(caches,function(cache){var gc=cache.gc;var gcLen=gc.length/2;var i;if(gcLen>length){for(i=0;i<gcLen;++i){delete cache.data[gc[i]];}gc.splice(0,gcLen);}});}/**\n * Returns {width, height, offset} objects for the first, last, widest, highest tick\n * labels where offset indicates the anchor point offset from the top in pixels.\n */function computeLabelSizes(ctx,tickFonts,ticks,caches){var length=ticks.length;var widths=[];var heights=[];var offsets=[];var i,j,jlen,label,tickFont,fontString,cache,lineHeight,width,height,nestedLabel,widest,highest;for(i=0;i<length;++i){label=ticks[i].label;tickFont=ticks[i].major?tickFonts.major:tickFonts.minor;ctx.font=fontString=tickFont.string;cache=caches[fontString]=caches[fontString]||{data:{},gc:[]};lineHeight=tickFont.lineHeight;width=height=0;// Undefined labels and arrays should not be measured\nif(!isNullOrUndef(label)&&!isArray(label)){width=helpers$1.measureText(ctx,cache.data,cache.gc,width,label);height=lineHeight;}else if(isArray(label)){// if it is an array let's measure each element\nfor(j=0,jlen=label.length;j<jlen;++j){nestedLabel=label[j];// Undefined labels and arrays should not be measured\nif(!isNullOrUndef(nestedLabel)&&!isArray(nestedLabel)){width=helpers$1.measureText(ctx,cache.data,cache.gc,width,nestedLabel);height+=lineHeight;}}}widths.push(width);heights.push(height);offsets.push(lineHeight/2);}garbageCollect(caches,length);widest=widths.indexOf(Math.max.apply(null,widths));highest=heights.indexOf(Math.max.apply(null,heights));function valueAt(idx){return{width:widths[idx]||0,height:heights[idx]||0,offset:offsets[idx]||0};}return{first:valueAt(0),last:valueAt(length-1),widest:valueAt(widest),highest:valueAt(highest)};}function getTickMarkLength(options){return options.drawTicks?options.tickMarkLength:0;}function getScaleLabelHeight(options){var font,padding;if(!options.display){return 0;}font=helpers$1.options._parseFont(options);padding=helpers$1.options.toPadding(options.padding);return font.lineHeight+padding.height;}function parseFontOptions(options,nestedOpts){return helpers$1.extend(helpers$1.options._parseFont({fontFamily:valueOrDefault$a(nestedOpts.fontFamily,options.fontFamily),fontSize:valueOrDefault$a(nestedOpts.fontSize,options.fontSize),fontStyle:valueOrDefault$a(nestedOpts.fontStyle,options.fontStyle),lineHeight:valueOrDefault$a(nestedOpts.lineHeight,options.lineHeight)}),{color:helpers$1.options.resolve([nestedOpts.fontColor,options.fontColor,core_defaults.global.defaultFontColor])});}function parseTickFontOptions(options){var minor=parseFontOptions(options,options.minor);var major=options.major.enabled?parseFontOptions(options,options.major):minor;return{minor:minor,major:major};}function nonSkipped(ticksToFilter){var filtered=[];var item,index,len;for(index=0,len=ticksToFilter.length;index<len;++index){item=ticksToFilter[index];if(typeof item._index!=='undefined'){filtered.push(item);}}return filtered;}function getEvenSpacing(arr){var len=arr.length;var i,diff;if(len<2){return false;}for(diff=arr[0],i=1;i<len;++i){if(arr[i]-arr[i-1]!==diff){return false;}}return diff;}function calculateSpacing(majorIndices,ticks,axisLength,ticksLimit){var evenMajorSpacing=getEvenSpacing(majorIndices);var spacing=(ticks.length-1)/ticksLimit;var factors,factor,i,ilen;// If the major ticks are evenly spaced apart, place the minor ticks\n// so that they divide the major ticks into even chunks\nif(!evenMajorSpacing){return Math.max(spacing,1);}factors=helpers$1.math._factorize(evenMajorSpacing);for(i=0,ilen=factors.length-1;i<ilen;i++){factor=factors[i];if(factor>spacing){return factor;}}return Math.max(spacing,1);}function getMajorIndices(ticks){var result=[];var i,ilen;for(i=0,ilen=ticks.length;i<ilen;i++){if(ticks[i].major){result.push(i);}}return result;}function skipMajors(ticks,majorIndices,spacing){var count=0;var next=majorIndices[0];var i,tick;spacing=Math.ceil(spacing);for(i=0;i<ticks.length;i++){tick=ticks[i];if(i===next){tick._index=i;count++;next=majorIndices[count*spacing];}else{delete tick.label;}}}function skip(ticks,spacing,majorStart,majorEnd){var start=valueOrDefault$a(majorStart,0);var end=Math.min(valueOrDefault$a(majorEnd,ticks.length),ticks.length);var count=0;var length,i,tick,next;spacing=Math.ceil(spacing);if(majorEnd){length=majorEnd-majorStart;spacing=length/Math.floor(length/spacing);}next=start;while(next<0){count++;next=Math.round(start+count*spacing);}for(i=Math.max(start,0);i<end;i++){tick=ticks[i];if(i===next){tick._index=i;count++;next=Math.round(start+count*spacing);}else{delete tick.label;}}}var Scale=core_element.extend({zeroLineIndex:0,/**\n\t * Get the padding needed for the scale\n\t * @method getPadding\n\t * @private\n\t * @returns {Padding} the necessary padding\n\t */getPadding:function getPadding(){var me=this;return{left:me.paddingLeft||0,top:me.paddingTop||0,right:me.paddingRight||0,bottom:me.paddingBottom||0};},/**\n\t * Returns the scale tick objects ({label, major})\n\t * @since 2.7\n\t */getTicks:function getTicks(){return this._ticks;},/**\n\t* @private\n\t*/_getLabels:function _getLabels(){var data=this.chart.data;return this.options.labels||(this.isHorizontal()?data.xLabels:data.yLabels)||data.labels||[];},// These methods are ordered by lifecyle. Utilities then follow.\n// Any function defined here is inherited by all scale types.\n// Any function can be extended by the scale type\n/**\n\t * Provided for backward compatibility, not available anymore\n\t * @function Chart.Scale.mergeTicksOptions\n\t * @deprecated since version 2.8.0\n\t * @todo remove at version 3\n\t */mergeTicksOptions:function mergeTicksOptions(){// noop\n},beforeUpdate:function beforeUpdate(){helpers$1.callback(this.options.beforeUpdate,[this]);},/**\n\t * @param {number} maxWidth - the max width in pixels\n\t * @param {number} maxHeight - the max height in pixels\n\t * @param {object} margins - the space between the edge of the other scales and edge of the chart\n\t *   This space comes from two sources:\n\t *     - padding - space that's required to show the labels at the edges of the scale\n\t *     - thickness of scales or legends in another orientation\n\t */update:function update(maxWidth,maxHeight,margins){var me=this;var tickOpts=me.options.ticks;var sampleSize=tickOpts.sampleSize;var i,ilen,labels,ticks,samplingEnabled;// Update Lifecycle - Probably don't want to ever extend or overwrite this function ;)\nme.beforeUpdate();// Absorb the master measurements\nme.maxWidth=maxWidth;me.maxHeight=maxHeight;me.margins=helpers$1.extend({left:0,right:0,top:0,bottom:0},margins);me._ticks=null;me.ticks=null;me._labelSizes=null;me._maxLabelLines=0;me.longestLabelWidth=0;me.longestTextCache=me.longestTextCache||{};me._gridLineItems=null;me._labelItems=null;// Dimensions\nme.beforeSetDimensions();me.setDimensions();me.afterSetDimensions();// Data min/max\nme.beforeDataLimits();me.determineDataLimits();me.afterDataLimits();// Ticks - `this.ticks` is now DEPRECATED!\n// Internal ticks are now stored as objects in the PRIVATE `this._ticks` member\n// and must not be accessed directly from outside this class. `this.ticks` being\n// around for long time and not marked as private, we can't change its structure\n// without unexpected breaking changes. If you need to access the scale ticks,\n// use scale.getTicks() instead.\nme.beforeBuildTicks();// New implementations should return an array of objects but for BACKWARD COMPAT,\n// we still support no return (`this.ticks` internally set by calling this method).\nticks=me.buildTicks()||[];// Allow modification of ticks in callback.\nticks=me.afterBuildTicks(ticks)||ticks;// Ensure ticks contains ticks in new tick format\nif((!ticks||!ticks.length)&&me.ticks){ticks=[];for(i=0,ilen=me.ticks.length;i<ilen;++i){ticks.push({value:me.ticks[i],major:false});}}me._ticks=ticks;// Compute tick rotation and fit using a sampled subset of labels\n// We generally don't need to compute the size of every single label for determining scale size\nsamplingEnabled=sampleSize<ticks.length;labels=me._convertTicksToLabels(samplingEnabled?sample(ticks,sampleSize):ticks);// _configure is called twice, once here, once from core.controller.updateLayout.\n// Here we haven't been positioned yet, but dimensions are correct.\n// Variables set in _configure are needed for calculateTickRotation, and\n// it's ok that coordinates are not correct there, only dimensions matter.\nme._configure();// Tick Rotation\nme.beforeCalculateTickRotation();me.calculateTickRotation();me.afterCalculateTickRotation();me.beforeFit();me.fit();me.afterFit();// Auto-skip\nme._ticksToDraw=tickOpts.display&&(tickOpts.autoSkip||tickOpts.source==='auto')?me._autoSkip(ticks):ticks;if(samplingEnabled){// Generate labels using all non-skipped ticks\nlabels=me._convertTicksToLabels(me._ticksToDraw);}me.ticks=labels;// BACKWARD COMPATIBILITY\n// IMPORTANT: after this point, we consider that `this.ticks` will NEVER change!\nme.afterUpdate();// TODO(v3): remove minSize as a public property and return value from all layout boxes. It is unused\n// make maxWidth and maxHeight private\nreturn me.minSize;},/**\n\t * @private\n\t */_configure:function _configure(){var me=this;var reversePixels=me.options.ticks.reverse;var startPixel,endPixel;if(me.isHorizontal()){startPixel=me.left;endPixel=me.right;}else{startPixel=me.top;endPixel=me.bottom;// by default vertical scales are from bottom to top, so pixels are reversed\nreversePixels=!reversePixels;}me._startPixel=startPixel;me._endPixel=endPixel;me._reversePixels=reversePixels;me._length=endPixel-startPixel;},afterUpdate:function afterUpdate(){helpers$1.callback(this.options.afterUpdate,[this]);},//\nbeforeSetDimensions:function beforeSetDimensions(){helpers$1.callback(this.options.beforeSetDimensions,[this]);},setDimensions:function setDimensions(){var me=this;// Set the unconstrained dimension before label rotation\nif(me.isHorizontal()){// Reset position before calculating rotation\nme.width=me.maxWidth;me.left=0;me.right=me.width;}else{me.height=me.maxHeight;// Reset position before calculating rotation\nme.top=0;me.bottom=me.height;}// Reset padding\nme.paddingLeft=0;me.paddingTop=0;me.paddingRight=0;me.paddingBottom=0;},afterSetDimensions:function afterSetDimensions(){helpers$1.callback(this.options.afterSetDimensions,[this]);},// Data limits\nbeforeDataLimits:function beforeDataLimits(){helpers$1.callback(this.options.beforeDataLimits,[this]);},determineDataLimits:helpers$1.noop,afterDataLimits:function afterDataLimits(){helpers$1.callback(this.options.afterDataLimits,[this]);},//\nbeforeBuildTicks:function beforeBuildTicks(){helpers$1.callback(this.options.beforeBuildTicks,[this]);},buildTicks:helpers$1.noop,afterBuildTicks:function afterBuildTicks(ticks){var me=this;// ticks is empty for old axis implementations here\nif(isArray(ticks)&&ticks.length){return helpers$1.callback(me.options.afterBuildTicks,[me,ticks]);}// Support old implementations (that modified `this.ticks` directly in buildTicks)\nme.ticks=helpers$1.callback(me.options.afterBuildTicks,[me,me.ticks])||me.ticks;return ticks;},beforeTickToLabelConversion:function beforeTickToLabelConversion(){helpers$1.callback(this.options.beforeTickToLabelConversion,[this]);},convertTicksToLabels:function convertTicksToLabels(){var me=this;// Convert ticks to strings\nvar tickOpts=me.options.ticks;me.ticks=me.ticks.map(tickOpts.userCallback||tickOpts.callback,this);},afterTickToLabelConversion:function afterTickToLabelConversion(){helpers$1.callback(this.options.afterTickToLabelConversion,[this]);},//\nbeforeCalculateTickRotation:function beforeCalculateTickRotation(){helpers$1.callback(this.options.beforeCalculateTickRotation,[this]);},calculateTickRotation:function calculateTickRotation(){var me=this;var options=me.options;var tickOpts=options.ticks;var numTicks=me.getTicks().length;var minRotation=tickOpts.minRotation||0;var maxRotation=tickOpts.maxRotation;var labelRotation=minRotation;var labelSizes,maxLabelWidth,maxLabelHeight,maxWidth,tickWidth,maxHeight,maxLabelDiagonal;if(!me._isVisible()||!tickOpts.display||minRotation>=maxRotation||numTicks<=1||!me.isHorizontal()){me.labelRotation=minRotation;return;}labelSizes=me._getLabelSizes();maxLabelWidth=labelSizes.widest.width;maxLabelHeight=labelSizes.highest.height-labelSizes.highest.offset;// Estimate the width of each grid based on the canvas width, the maximum\n// label width and the number of tick intervals\nmaxWidth=Math.min(me.maxWidth,me.chart.width-maxLabelWidth);tickWidth=options.offset?me.maxWidth/numTicks:maxWidth/(numTicks-1);// Allow 3 pixels x2 padding either side for label readability\nif(maxLabelWidth+6>tickWidth){tickWidth=maxWidth/(numTicks-(options.offset?0.5:1));maxHeight=me.maxHeight-getTickMarkLength(options.gridLines)-tickOpts.padding-getScaleLabelHeight(options.scaleLabel);maxLabelDiagonal=Math.sqrt(maxLabelWidth*maxLabelWidth+maxLabelHeight*maxLabelHeight);labelRotation=helpers$1.toDegrees(Math.min(Math.asin(Math.min((labelSizes.highest.height+6)/tickWidth,1)),Math.asin(Math.min(maxHeight/maxLabelDiagonal,1))-Math.asin(maxLabelHeight/maxLabelDiagonal)));labelRotation=Math.max(minRotation,Math.min(maxRotation,labelRotation));}me.labelRotation=labelRotation;},afterCalculateTickRotation:function afterCalculateTickRotation(){helpers$1.callback(this.options.afterCalculateTickRotation,[this]);},//\nbeforeFit:function beforeFit(){helpers$1.callback(this.options.beforeFit,[this]);},fit:function fit(){var me=this;// Reset\nvar minSize=me.minSize={width:0,height:0};var chart=me.chart;var opts=me.options;var tickOpts=opts.ticks;var scaleLabelOpts=opts.scaleLabel;var gridLineOpts=opts.gridLines;var display=me._isVisible();var isBottom=opts.position==='bottom';var isHorizontal=me.isHorizontal();// Width\nif(isHorizontal){minSize.width=me.maxWidth;}else if(display){minSize.width=getTickMarkLength(gridLineOpts)+getScaleLabelHeight(scaleLabelOpts);}// height\nif(!isHorizontal){minSize.height=me.maxHeight;// fill all the height\n}else if(display){minSize.height=getTickMarkLength(gridLineOpts)+getScaleLabelHeight(scaleLabelOpts);}// Don't bother fitting the ticks if we are not showing the labels\nif(tickOpts.display&&display){var tickFonts=parseTickFontOptions(tickOpts);var labelSizes=me._getLabelSizes();var firstLabelSize=labelSizes.first;var lastLabelSize=labelSizes.last;var widestLabelSize=labelSizes.widest;var highestLabelSize=labelSizes.highest;var lineSpace=tickFonts.minor.lineHeight*0.4;var tickPadding=tickOpts.padding;if(isHorizontal){// A horizontal axis is more constrained by the height.\nvar isRotated=me.labelRotation!==0;var angleRadians=helpers$1.toRadians(me.labelRotation);var cosRotation=Math.cos(angleRadians);var sinRotation=Math.sin(angleRadians);var labelHeight=sinRotation*widestLabelSize.width+cosRotation*(highestLabelSize.height-(isRotated?highestLabelSize.offset:0))+(isRotated?0:lineSpace);// padding\nminSize.height=Math.min(me.maxHeight,minSize.height+labelHeight+tickPadding);var offsetLeft=me.getPixelForTick(0)-me.left;var offsetRight=me.right-me.getPixelForTick(me.getTicks().length-1);var paddingLeft,paddingRight;// Ensure that our ticks are always inside the canvas. When rotated, ticks are right aligned\n// which means that the right padding is dominated by the font height\nif(isRotated){paddingLeft=isBottom?cosRotation*firstLabelSize.width+sinRotation*firstLabelSize.offset:sinRotation*(firstLabelSize.height-firstLabelSize.offset);paddingRight=isBottom?sinRotation*(lastLabelSize.height-lastLabelSize.offset):cosRotation*lastLabelSize.width+sinRotation*lastLabelSize.offset;}else{paddingLeft=firstLabelSize.width/2;paddingRight=lastLabelSize.width/2;}// Adjust padding taking into account changes in offsets\n// and add 3 px to move away from canvas edges\nme.paddingLeft=Math.max((paddingLeft-offsetLeft)*me.width/(me.width-offsetLeft),0)+3;me.paddingRight=Math.max((paddingRight-offsetRight)*me.width/(me.width-offsetRight),0)+3;}else{// A vertical axis is more constrained by the width. Labels are the\n// dominant factor here, so get that length first and account for padding\nvar labelWidth=tickOpts.mirror?0:// use lineSpace for consistency with horizontal axis\n// tickPadding is not implemented for horizontal\nwidestLabelSize.width+tickPadding+lineSpace;minSize.width=Math.min(me.maxWidth,minSize.width+labelWidth);me.paddingTop=firstLabelSize.height/2;me.paddingBottom=lastLabelSize.height/2;}}me.handleMargins();if(isHorizontal){me.width=me._length=chart.width-me.margins.left-me.margins.right;me.height=minSize.height;}else{me.width=minSize.width;me.height=me._length=chart.height-me.margins.top-me.margins.bottom;}},/**\n\t * Handle margins and padding interactions\n\t * @private\n\t */handleMargins:function handleMargins(){var me=this;if(me.margins){me.margins.left=Math.max(me.paddingLeft,me.margins.left);me.margins.top=Math.max(me.paddingTop,me.margins.top);me.margins.right=Math.max(me.paddingRight,me.margins.right);me.margins.bottom=Math.max(me.paddingBottom,me.margins.bottom);}},afterFit:function afterFit(){helpers$1.callback(this.options.afterFit,[this]);},// Shared Methods\nisHorizontal:function isHorizontal(){var pos=this.options.position;return pos==='top'||pos==='bottom';},isFullWidth:function isFullWidth(){return this.options.fullWidth;},// Get the correct value. NaN bad inputs, If the value type is object get the x or y based on whether we are horizontal or not\ngetRightValue:function getRightValue(rawValue){// Null and undefined values first\nif(isNullOrUndef(rawValue)){return NaN;}// isNaN(object) returns true, so make sure NaN is checking for a number; Discard Infinite values\nif((typeof rawValue==='number'||rawValue instanceof Number)&&!isFinite(rawValue)){return NaN;}// If it is in fact an object, dive in one more level\nif(rawValue){if(this.isHorizontal()){if(rawValue.x!==undefined){return this.getRightValue(rawValue.x);}}else if(rawValue.y!==undefined){return this.getRightValue(rawValue.y);}}// Value is good, return it\nreturn rawValue;},_convertTicksToLabels:function _convertTicksToLabels(ticks){var me=this;var labels,i,ilen;me.ticks=ticks.map(function(tick){return tick.value;});me.beforeTickToLabelConversion();// New implementations should return the formatted tick labels but for BACKWARD\n// COMPAT, we still support no return (`this.ticks` internally changed by calling\n// this method and supposed to contain only string values).\nlabels=me.convertTicksToLabels(ticks)||me.ticks;me.afterTickToLabelConversion();// BACKWARD COMPAT: synchronize `_ticks` with labels (so potentially `this.ticks`)\nfor(i=0,ilen=ticks.length;i<ilen;++i){ticks[i].label=labels[i];}return labels;},/**\n\t * @private\n\t */_getLabelSizes:function _getLabelSizes(){var me=this;var labelSizes=me._labelSizes;if(!labelSizes){me._labelSizes=labelSizes=computeLabelSizes(me.ctx,parseTickFontOptions(me.options.ticks),me.getTicks(),me.longestTextCache);me.longestLabelWidth=labelSizes.widest.width;}return labelSizes;},/**\n\t * @private\n\t */_parseValue:function _parseValue(value){var start,end,min,max;if(isArray(value)){start=+this.getRightValue(value[0]);end=+this.getRightValue(value[1]);min=Math.min(start,end);max=Math.max(start,end);}else{value=+this.getRightValue(value);start=undefined;end=value;min=value;max=value;}return{min:min,max:max,start:start,end:end};},/**\n\t* @private\n\t*/_getScaleLabel:function _getScaleLabel(rawValue){var v=this._parseValue(rawValue);if(v.start!==undefined){return'['+v.start+', '+v.end+']';}return+this.getRightValue(rawValue);},/**\n\t * Used to get the value to display in the tooltip for the data at the given index\n\t * @param index\n\t * @param datasetIndex\n\t */getLabelForIndex:helpers$1.noop,/**\n\t * Returns the location of the given data point. Value can either be an index or a numerical value\n\t * The coordinate (0, 0) is at the upper-left corner of the canvas\n\t * @param value\n\t * @param index\n\t * @param datasetIndex\n\t */getPixelForValue:helpers$1.noop,/**\n\t * Used to get the data value from a given pixel. This is the inverse of getPixelForValue\n\t * The coordinate (0, 0) is at the upper-left corner of the canvas\n\t * @param pixel\n\t */getValueForPixel:helpers$1.noop,/**\n\t * Returns the location of the tick at the given index\n\t * The coordinate (0, 0) is at the upper-left corner of the canvas\n\t */getPixelForTick:function getPixelForTick(index){var me=this;var offset=me.options.offset;var numTicks=me._ticks.length;var tickWidth=1/Math.max(numTicks-(offset?0:1),1);return index<0||index>numTicks-1?null:me.getPixelForDecimal(index*tickWidth+(offset?tickWidth/2:0));},/**\n\t * Utility for getting the pixel location of a percentage of scale\n\t * The coordinate (0, 0) is at the upper-left corner of the canvas\n\t */getPixelForDecimal:function getPixelForDecimal(decimal){var me=this;if(me._reversePixels){decimal=1-decimal;}return me._startPixel+decimal*me._length;},getDecimalForPixel:function getDecimalForPixel(pixel){var decimal=(pixel-this._startPixel)/this._length;return this._reversePixels?1-decimal:decimal;},/**\n\t * Returns the pixel for the minimum chart value\n\t * The coordinate (0, 0) is at the upper-left corner of the canvas\n\t */getBasePixel:function getBasePixel(){return this.getPixelForValue(this.getBaseValue());},getBaseValue:function getBaseValue(){var me=this;var min=me.min;var max=me.max;return me.beginAtZero?0:min<0&&max<0?max:min>0&&max>0?min:0;},/**\n\t * Returns a subset of ticks to be plotted to avoid overlapping labels.\n\t * @private\n\t */_autoSkip:function _autoSkip(ticks){var me=this;var tickOpts=me.options.ticks;var axisLength=me._length;var ticksLimit=tickOpts.maxTicksLimit||axisLength/me._tickSize()+1;var majorIndices=tickOpts.major.enabled?getMajorIndices(ticks):[];var numMajorIndices=majorIndices.length;var first=majorIndices[0];var last=majorIndices[numMajorIndices-1];var i,ilen,spacing,avgMajorSpacing;// If there are too many major ticks to display them all\nif(numMajorIndices>ticksLimit){skipMajors(ticks,majorIndices,numMajorIndices/ticksLimit);return nonSkipped(ticks);}spacing=calculateSpacing(majorIndices,ticks,axisLength,ticksLimit);if(numMajorIndices>0){for(i=0,ilen=numMajorIndices-1;i<ilen;i++){skip(ticks,spacing,majorIndices[i],majorIndices[i+1]);}avgMajorSpacing=numMajorIndices>1?(last-first)/(numMajorIndices-1):null;skip(ticks,spacing,helpers$1.isNullOrUndef(avgMajorSpacing)?0:first-avgMajorSpacing,first);skip(ticks,spacing,last,helpers$1.isNullOrUndef(avgMajorSpacing)?ticks.length:last+avgMajorSpacing);return nonSkipped(ticks);}skip(ticks,spacing);return nonSkipped(ticks);},/**\n\t * @private\n\t */_tickSize:function _tickSize(){var me=this;var optionTicks=me.options.ticks;// Calculate space needed by label in axis direction.\nvar rot=helpers$1.toRadians(me.labelRotation);var cos=Math.abs(Math.cos(rot));var sin=Math.abs(Math.sin(rot));var labelSizes=me._getLabelSizes();var padding=optionTicks.autoSkipPadding||0;var w=labelSizes?labelSizes.widest.width+padding:0;var h=labelSizes?labelSizes.highest.height+padding:0;// Calculate space needed for 1 tick in axis direction.\nreturn me.isHorizontal()?h*cos>w*sin?w/cos:h/sin:h*sin<w*cos?h/cos:w/sin;},/**\n\t * @private\n\t */_isVisible:function _isVisible(){var me=this;var chart=me.chart;var display=me.options.display;var i,ilen,meta;if(display!=='auto'){return!!display;}// When 'auto', the scale is visible if at least one associated dataset is visible.\nfor(i=0,ilen=chart.data.datasets.length;i<ilen;++i){if(chart.isDatasetVisible(i)){meta=chart.getDatasetMeta(i);if(meta.xAxisID===me.id||meta.yAxisID===me.id){return true;}}}return false;},/**\n\t * @private\n\t */_computeGridLineItems:function _computeGridLineItems(chartArea){var me=this;var chart=me.chart;var options=me.options;var gridLines=options.gridLines;var position=options.position;var offsetGridLines=gridLines.offsetGridLines;var isHorizontal=me.isHorizontal();var ticks=me._ticksToDraw;var ticksLength=ticks.length+(offsetGridLines?1:0);var tl=getTickMarkLength(gridLines);var items=[];var axisWidth=gridLines.drawBorder?valueAtIndexOrDefault(gridLines.lineWidth,0,0):0;var axisHalfWidth=axisWidth/2;var alignPixel=helpers$1._alignPixel;var alignBorderValue=function alignBorderValue(pixel){return alignPixel(chart,pixel,axisWidth);};var borderValue,i,tick,lineValue,alignedLineValue;var tx1,ty1,tx2,ty2,x1,y1,x2,y2,lineWidth,lineColor,borderDash,borderDashOffset;if(position==='top'){borderValue=alignBorderValue(me.bottom);ty1=me.bottom-tl;ty2=borderValue-axisHalfWidth;y1=alignBorderValue(chartArea.top)+axisHalfWidth;y2=chartArea.bottom;}else if(position==='bottom'){borderValue=alignBorderValue(me.top);y1=chartArea.top;y2=alignBorderValue(chartArea.bottom)-axisHalfWidth;ty1=borderValue+axisHalfWidth;ty2=me.top+tl;}else if(position==='left'){borderValue=alignBorderValue(me.right);tx1=me.right-tl;tx2=borderValue-axisHalfWidth;x1=alignBorderValue(chartArea.left)+axisHalfWidth;x2=chartArea.right;}else{borderValue=alignBorderValue(me.left);x1=chartArea.left;x2=alignBorderValue(chartArea.right)-axisHalfWidth;tx1=borderValue+axisHalfWidth;tx2=me.left+tl;}for(i=0;i<ticksLength;++i){tick=ticks[i]||{};// autoskipper skipped this tick (#4635)\nif(isNullOrUndef(tick.label)&&i<ticks.length){continue;}if(i===me.zeroLineIndex&&options.offset===offsetGridLines){// Draw the first index specially\nlineWidth=gridLines.zeroLineWidth;lineColor=gridLines.zeroLineColor;borderDash=gridLines.zeroLineBorderDash||[];borderDashOffset=gridLines.zeroLineBorderDashOffset||0.0;}else{lineWidth=valueAtIndexOrDefault(gridLines.lineWidth,i,1);lineColor=valueAtIndexOrDefault(gridLines.color,i,'rgba(0,0,0,0.1)');borderDash=gridLines.borderDash||[];borderDashOffset=gridLines.borderDashOffset||0.0;}lineValue=getPixelForGridLine(me,tick._index||i,offsetGridLines);// Skip if the pixel is out of the range\nif(lineValue===undefined){continue;}alignedLineValue=alignPixel(chart,lineValue,lineWidth);if(isHorizontal){tx1=tx2=x1=x2=alignedLineValue;}else{ty1=ty2=y1=y2=alignedLineValue;}items.push({tx1:tx1,ty1:ty1,tx2:tx2,ty2:ty2,x1:x1,y1:y1,x2:x2,y2:y2,width:lineWidth,color:lineColor,borderDash:borderDash,borderDashOffset:borderDashOffset});}items.ticksLength=ticksLength;items.borderValue=borderValue;return items;},/**\n\t * @private\n\t */_computeLabelItems:function _computeLabelItems(){var me=this;var options=me.options;var optionTicks=options.ticks;var position=options.position;var isMirrored=optionTicks.mirror;var isHorizontal=me.isHorizontal();var ticks=me._ticksToDraw;var fonts=parseTickFontOptions(optionTicks);var tickPadding=optionTicks.padding;var tl=getTickMarkLength(options.gridLines);var rotation=-helpers$1.toRadians(me.labelRotation);var items=[];var i,ilen,tick,label,x,y,textAlign,pixel,font,lineHeight,lineCount,textOffset;if(position==='top'){y=me.bottom-tl-tickPadding;textAlign=!rotation?'center':'left';}else if(position==='bottom'){y=me.top+tl+tickPadding;textAlign=!rotation?'center':'right';}else if(position==='left'){x=me.right-(isMirrored?0:tl)-tickPadding;textAlign=isMirrored?'left':'right';}else{x=me.left+(isMirrored?0:tl)+tickPadding;textAlign=isMirrored?'right':'left';}for(i=0,ilen=ticks.length;i<ilen;++i){tick=ticks[i];label=tick.label;// autoskipper skipped this tick (#4635)\nif(isNullOrUndef(label)){continue;}pixel=me.getPixelForTick(tick._index||i)+optionTicks.labelOffset;font=tick.major?fonts.major:fonts.minor;lineHeight=font.lineHeight;lineCount=isArray(label)?label.length:1;if(isHorizontal){x=pixel;textOffset=position==='top'?((!rotation?0.5:1)-lineCount)*lineHeight:(!rotation?0.5:0)*lineHeight;}else{y=pixel;textOffset=(1-lineCount)*lineHeight/2;}items.push({x:x,y:y,rotation:rotation,label:label,font:font,textOffset:textOffset,textAlign:textAlign});}return items;},/**\n\t * @private\n\t */_drawGrid:function _drawGrid(chartArea){var me=this;var gridLines=me.options.gridLines;if(!gridLines.display){return;}var ctx=me.ctx;var chart=me.chart;var alignPixel=helpers$1._alignPixel;var axisWidth=gridLines.drawBorder?valueAtIndexOrDefault(gridLines.lineWidth,0,0):0;var items=me._gridLineItems||(me._gridLineItems=me._computeGridLineItems(chartArea));var width,color,i,ilen,item;for(i=0,ilen=items.length;i<ilen;++i){item=items[i];width=item.width;color=item.color;if(width&&color){ctx.save();ctx.lineWidth=width;ctx.strokeStyle=color;if(ctx.setLineDash){ctx.setLineDash(item.borderDash);ctx.lineDashOffset=item.borderDashOffset;}ctx.beginPath();if(gridLines.drawTicks){ctx.moveTo(item.tx1,item.ty1);ctx.lineTo(item.tx2,item.ty2);}if(gridLines.drawOnChartArea){ctx.moveTo(item.x1,item.y1);ctx.lineTo(item.x2,item.y2);}ctx.stroke();ctx.restore();}}if(axisWidth){// Draw the line at the edge of the axis\nvar firstLineWidth=axisWidth;var lastLineWidth=valueAtIndexOrDefault(gridLines.lineWidth,items.ticksLength-1,1);var borderValue=items.borderValue;var x1,x2,y1,y2;if(me.isHorizontal()){x1=alignPixel(chart,me.left,firstLineWidth)-firstLineWidth/2;x2=alignPixel(chart,me.right,lastLineWidth)+lastLineWidth/2;y1=y2=borderValue;}else{y1=alignPixel(chart,me.top,firstLineWidth)-firstLineWidth/2;y2=alignPixel(chart,me.bottom,lastLineWidth)+lastLineWidth/2;x1=x2=borderValue;}ctx.lineWidth=axisWidth;ctx.strokeStyle=valueAtIndexOrDefault(gridLines.color,0);ctx.beginPath();ctx.moveTo(x1,y1);ctx.lineTo(x2,y2);ctx.stroke();}},/**\n\t * @private\n\t */_drawLabels:function _drawLabels(){var me=this;var optionTicks=me.options.ticks;if(!optionTicks.display){return;}var ctx=me.ctx;var items=me._labelItems||(me._labelItems=me._computeLabelItems());var i,j,ilen,jlen,item,tickFont,label,y;for(i=0,ilen=items.length;i<ilen;++i){item=items[i];tickFont=item.font;// Make sure we draw text in the correct color and font\nctx.save();ctx.translate(item.x,item.y);ctx.rotate(item.rotation);ctx.font=tickFont.string;ctx.fillStyle=tickFont.color;ctx.textBaseline='middle';ctx.textAlign=item.textAlign;label=item.label;y=item.textOffset;if(isArray(label)){for(j=0,jlen=label.length;j<jlen;++j){// We just make sure the multiline element is a string here..\nctx.fillText(''+label[j],0,y);y+=tickFont.lineHeight;}}else{ctx.fillText(label,0,y);}ctx.restore();}},/**\n\t * @private\n\t */_drawTitle:function _drawTitle(){var me=this;var ctx=me.ctx;var options=me.options;var scaleLabel=options.scaleLabel;if(!scaleLabel.display){return;}var scaleLabelFontColor=valueOrDefault$a(scaleLabel.fontColor,core_defaults.global.defaultFontColor);var scaleLabelFont=helpers$1.options._parseFont(scaleLabel);var scaleLabelPadding=helpers$1.options.toPadding(scaleLabel.padding);var halfLineHeight=scaleLabelFont.lineHeight/2;var position=options.position;var rotation=0;var scaleLabelX,scaleLabelY;if(me.isHorizontal()){scaleLabelX=me.left+me.width/2;// midpoint of the width\nscaleLabelY=position==='bottom'?me.bottom-halfLineHeight-scaleLabelPadding.bottom:me.top+halfLineHeight+scaleLabelPadding.top;}else{var isLeft=position==='left';scaleLabelX=isLeft?me.left+halfLineHeight+scaleLabelPadding.top:me.right-halfLineHeight-scaleLabelPadding.top;scaleLabelY=me.top+me.height/2;rotation=isLeft?-0.5*Math.PI:0.5*Math.PI;}ctx.save();ctx.translate(scaleLabelX,scaleLabelY);ctx.rotate(rotation);ctx.textAlign='center';ctx.textBaseline='middle';ctx.fillStyle=scaleLabelFontColor;// render in correct colour\nctx.font=scaleLabelFont.string;ctx.fillText(scaleLabel.labelString,0,0);ctx.restore();},draw:function draw(chartArea){var me=this;if(!me._isVisible()){return;}me._drawGrid(chartArea);me._drawTitle();me._drawLabels();},/**\n\t * @private\n\t */_layers:function _layers(){var me=this;var opts=me.options;var tz=opts.ticks&&opts.ticks.z||0;var gz=opts.gridLines&&opts.gridLines.z||0;if(!me._isVisible()||tz===gz||me.draw!==me._draw){// backward compatibility: draw has been overridden by custom scale\nreturn[{z:tz,draw:function draw(){me.draw.apply(me,arguments);}}];}return[{z:gz,draw:function draw(){me._drawGrid.apply(me,arguments);me._drawTitle.apply(me,arguments);}},{z:tz,draw:function draw(){me._drawLabels.apply(me,arguments);}}];},/**\n\t * @private\n\t */_getMatchingVisibleMetas:function _getMatchingVisibleMetas(type){var me=this;var isHorizontal=me.isHorizontal();return me.chart._getSortedVisibleDatasetMetas().filter(function(meta){return(!type||meta.type===type)&&(isHorizontal?meta.xAxisID===me.id:meta.yAxisID===me.id);});}});Scale.prototype._draw=Scale.prototype.draw;var core_scale=Scale;var isNullOrUndef$1=helpers$1.isNullOrUndef;var defaultConfig={position:'bottom'};var scale_category=core_scale.extend({determineDataLimits:function determineDataLimits(){var me=this;var labels=me._getLabels();var ticksOpts=me.options.ticks;var min=ticksOpts.min;var max=ticksOpts.max;var minIndex=0;var maxIndex=labels.length-1;var findIndex;if(min!==undefined){// user specified min value\nfindIndex=labels.indexOf(min);if(findIndex>=0){minIndex=findIndex;}}if(max!==undefined){// user specified max value\nfindIndex=labels.indexOf(max);if(findIndex>=0){maxIndex=findIndex;}}me.minIndex=minIndex;me.maxIndex=maxIndex;me.min=labels[minIndex];me.max=labels[maxIndex];},buildTicks:function buildTicks(){var me=this;var labels=me._getLabels();var minIndex=me.minIndex;var maxIndex=me.maxIndex;// If we are viewing some subset of labels, slice the original array\nme.ticks=minIndex===0&&maxIndex===labels.length-1?labels:labels.slice(minIndex,maxIndex+1);},getLabelForIndex:function getLabelForIndex(index,datasetIndex){var me=this;var chart=me.chart;if(chart.getDatasetMeta(datasetIndex).controller._getValueScaleId()===me.id){return me.getRightValue(chart.data.datasets[datasetIndex].data[index]);}return me._getLabels()[index];},_configure:function _configure(){var me=this;var offset=me.options.offset;var ticks=me.ticks;core_scale.prototype._configure.call(me);if(!me.isHorizontal()){// For backward compatibility, vertical category scale reverse is inverted.\nme._reversePixels=!me._reversePixels;}if(!ticks){return;}me._startValue=me.minIndex-(offset?0.5:0);me._valueRange=Math.max(ticks.length-(offset?0:1),1);},// Used to get data value locations.  Value can either be an index or a numerical value\ngetPixelForValue:function getPixelForValue(value,index,datasetIndex){var me=this;var valueCategory,labels,idx;if(!isNullOrUndef$1(index)&&!isNullOrUndef$1(datasetIndex)){value=me.chart.data.datasets[datasetIndex].data[index];}// If value is a data object, then index is the index in the data array,\n// not the index of the scale. We need to change that.\nif(!isNullOrUndef$1(value)){valueCategory=me.isHorizontal()?value.x:value.y;}if(valueCategory!==undefined||value!==undefined&&isNaN(index)){labels=me._getLabels();value=helpers$1.valueOrDefault(valueCategory,value);idx=labels.indexOf(value);index=idx!==-1?idx:index;if(isNaN(index)){index=value;}}return me.getPixelForDecimal((index-me._startValue)/me._valueRange);},getPixelForTick:function getPixelForTick(index){var ticks=this.ticks;return index<0||index>ticks.length-1?null:this.getPixelForValue(ticks[index],index+this.minIndex);},getValueForPixel:function getValueForPixel(pixel){var me=this;var value=Math.round(me._startValue+me.getDecimalForPixel(pixel)*me._valueRange);return Math.min(Math.max(value,0),me.ticks.length-1);},getBasePixel:function getBasePixel(){return this.bottom;}});// INTERNAL: static default options, registered in src/index.js\nvar _defaults=defaultConfig;scale_category._defaults=_defaults;var noop=helpers$1.noop;var isNullOrUndef$2=helpers$1.isNullOrUndef;/**\n * Generate a set of linear ticks\n * @param generationOptions the options used to generate the ticks\n * @param dataRange the range of the data\n * @returns {number[]} array of tick values\n */function generateTicks(generationOptions,dataRange){var ticks=[];// To get a \"nice\" value for the tick spacing, we will use the appropriately named\n// \"nice number\" algorithm. See https://stackoverflow.com/questions/8506881/nice-label-algorithm-for-charts-with-minimum-ticks\n// for details.\nvar MIN_SPACING=1e-14;var stepSize=generationOptions.stepSize;var unit=stepSize||1;var maxNumSpaces=generationOptions.maxTicks-1;var min=generationOptions.min;var max=generationOptions.max;var precision=generationOptions.precision;var rmin=dataRange.min;var rmax=dataRange.max;var spacing=helpers$1.niceNum((rmax-rmin)/maxNumSpaces/unit)*unit;var factor,niceMin,niceMax,numSpaces;// Beyond MIN_SPACING floating point numbers being to lose precision\n// such that we can't do the math necessary to generate ticks\nif(spacing<MIN_SPACING&&isNullOrUndef$2(min)&&isNullOrUndef$2(max)){return[rmin,rmax];}numSpaces=Math.ceil(rmax/spacing)-Math.floor(rmin/spacing);if(numSpaces>maxNumSpaces){// If the calculated num of spaces exceeds maxNumSpaces, recalculate it\nspacing=helpers$1.niceNum(numSpaces*spacing/maxNumSpaces/unit)*unit;}if(stepSize||isNullOrUndef$2(precision)){// If a precision is not specified, calculate factor based on spacing\nfactor=Math.pow(10,helpers$1._decimalPlaces(spacing));}else{// If the user specified a precision, round to that number of decimal places\nfactor=Math.pow(10,precision);spacing=Math.ceil(spacing*factor)/factor;}niceMin=Math.floor(rmin/spacing)*spacing;niceMax=Math.ceil(rmax/spacing)*spacing;// If min, max and stepSize is set and they make an evenly spaced scale use it.\nif(stepSize){// If very close to our whole number, use it.\nif(!isNullOrUndef$2(min)&&helpers$1.almostWhole(min/spacing,spacing/1000)){niceMin=min;}if(!isNullOrUndef$2(max)&&helpers$1.almostWhole(max/spacing,spacing/1000)){niceMax=max;}}numSpaces=(niceMax-niceMin)/spacing;// If very close to our rounded value, use it.\nif(helpers$1.almostEquals(numSpaces,Math.round(numSpaces),spacing/1000)){numSpaces=Math.round(numSpaces);}else{numSpaces=Math.ceil(numSpaces);}niceMin=Math.round(niceMin*factor)/factor;niceMax=Math.round(niceMax*factor)/factor;ticks.push(isNullOrUndef$2(min)?niceMin:min);for(var j=1;j<numSpaces;++j){ticks.push(Math.round((niceMin+j*spacing)*factor)/factor);}ticks.push(isNullOrUndef$2(max)?niceMax:max);return ticks;}var scale_linearbase=core_scale.extend({getRightValue:function getRightValue(value){if(typeof value==='string'){return+value;}return core_scale.prototype.getRightValue.call(this,value);},handleTickRangeOptions:function handleTickRangeOptions(){var me=this;var opts=me.options;var tickOpts=opts.ticks;// If we are forcing it to begin at 0, but 0 will already be rendered on the chart,\n// do nothing since that would make the chart weird. If the user really wants a weird chart\n// axis, they can manually override it\nif(tickOpts.beginAtZero){var minSign=helpers$1.sign(me.min);var maxSign=helpers$1.sign(me.max);if(minSign<0&&maxSign<0){// move the top up to 0\nme.max=0;}else if(minSign>0&&maxSign>0){// move the bottom down to 0\nme.min=0;}}var setMin=tickOpts.min!==undefined||tickOpts.suggestedMin!==undefined;var setMax=tickOpts.max!==undefined||tickOpts.suggestedMax!==undefined;if(tickOpts.min!==undefined){me.min=tickOpts.min;}else if(tickOpts.suggestedMin!==undefined){if(me.min===null){me.min=tickOpts.suggestedMin;}else{me.min=Math.min(me.min,tickOpts.suggestedMin);}}if(tickOpts.max!==undefined){me.max=tickOpts.max;}else if(tickOpts.suggestedMax!==undefined){if(me.max===null){me.max=tickOpts.suggestedMax;}else{me.max=Math.max(me.max,tickOpts.suggestedMax);}}if(setMin!==setMax){// We set the min or the max but not both.\n// So ensure that our range is good\n// Inverted or 0 length range can happen when\n// ticks.min is set, and no datasets are visible\nif(me.min>=me.max){if(setMin){me.max=me.min+1;}else{me.min=me.max-1;}}}if(me.min===me.max){me.max++;if(!tickOpts.beginAtZero){me.min--;}}},getTickLimit:function getTickLimit(){var me=this;var tickOpts=me.options.ticks;var stepSize=tickOpts.stepSize;var maxTicksLimit=tickOpts.maxTicksLimit;var maxTicks;if(stepSize){maxTicks=Math.ceil(me.max/stepSize)-Math.floor(me.min/stepSize)+1;}else{maxTicks=me._computeTickLimit();maxTicksLimit=maxTicksLimit||11;}if(maxTicksLimit){maxTicks=Math.min(maxTicksLimit,maxTicks);}return maxTicks;},_computeTickLimit:function _computeTickLimit(){return Number.POSITIVE_INFINITY;},handleDirectionalChanges:noop,buildTicks:function buildTicks(){var me=this;var opts=me.options;var tickOpts=opts.ticks;// Figure out what the max number of ticks we can support it is based on the size of\n// the axis area. For now, we say that the minimum tick spacing in pixels must be 40\n// We also limit the maximum number of ticks to 11 which gives a nice 10 squares on\n// the graph. Make sure we always have at least 2 ticks\nvar maxTicks=me.getTickLimit();maxTicks=Math.max(2,maxTicks);var numericGeneratorOptions={maxTicks:maxTicks,min:tickOpts.min,max:tickOpts.max,precision:tickOpts.precision,stepSize:helpers$1.valueOrDefault(tickOpts.fixedStepSize,tickOpts.stepSize)};var ticks=me.ticks=generateTicks(numericGeneratorOptions,me);me.handleDirectionalChanges();// At this point, we need to update our max and min given the tick values since we have expanded the\n// range of the scale\nme.max=helpers$1.max(ticks);me.min=helpers$1.min(ticks);if(tickOpts.reverse){ticks.reverse();me.start=me.max;me.end=me.min;}else{me.start=me.min;me.end=me.max;}},convertTicksToLabels:function convertTicksToLabels(){var me=this;me.ticksAsNumbers=me.ticks.slice();me.zeroLineIndex=me.ticks.indexOf(0);core_scale.prototype.convertTicksToLabels.call(me);},_configure:function _configure(){var me=this;var ticks=me.getTicks();var start=me.min;var end=me.max;var offset;core_scale.prototype._configure.call(me);if(me.options.offset&&ticks.length){offset=(end-start)/Math.max(ticks.length-1,1)/2;start-=offset;end+=offset;}me._startValue=start;me._endValue=end;me._valueRange=end-start;}});var defaultConfig$1={position:'left',ticks:{callback:core_ticks.formatters.linear}};var DEFAULT_MIN=0;var DEFAULT_MAX=1;function getOrCreateStack(stacks,stacked,meta){var key=[meta.type,// we have a separate stack for stack=undefined datasets when the opts.stacked is undefined\nstacked===undefined&&meta.stack===undefined?meta.index:'',meta.stack].join('.');if(stacks[key]===undefined){stacks[key]={pos:[],neg:[]};}return stacks[key];}function stackData(scale,stacks,meta,data){var opts=scale.options;var stacked=opts.stacked;var stack=getOrCreateStack(stacks,stacked,meta);var pos=stack.pos;var neg=stack.neg;var ilen=data.length;var i,value;for(i=0;i<ilen;++i){value=scale._parseValue(data[i]);if(isNaN(value.min)||isNaN(value.max)||meta.data[i].hidden){continue;}pos[i]=pos[i]||0;neg[i]=neg[i]||0;if(opts.relativePoints){pos[i]=100;}else if(value.min<0||value.max<0){neg[i]+=value.min;}else{pos[i]+=value.max;}}}function updateMinMax(scale,meta,data){var ilen=data.length;var i,value;for(i=0;i<ilen;++i){value=scale._parseValue(data[i]);if(isNaN(value.min)||isNaN(value.max)||meta.data[i].hidden){continue;}scale.min=Math.min(scale.min,value.min);scale.max=Math.max(scale.max,value.max);}}var scale_linear=scale_linearbase.extend({determineDataLimits:function determineDataLimits(){var me=this;var opts=me.options;var chart=me.chart;var datasets=chart.data.datasets;var metasets=me._getMatchingVisibleMetas();var hasStacks=opts.stacked;var stacks={};var ilen=metasets.length;var i,meta,data,values;me.min=Number.POSITIVE_INFINITY;me.max=Number.NEGATIVE_INFINITY;if(hasStacks===undefined){for(i=0;!hasStacks&&i<ilen;++i){meta=metasets[i];hasStacks=meta.stack!==undefined;}}for(i=0;i<ilen;++i){meta=metasets[i];data=datasets[meta.index].data;if(hasStacks){stackData(me,stacks,meta,data);}else{updateMinMax(me,meta,data);}}helpers$1.each(stacks,function(stackValues){values=stackValues.pos.concat(stackValues.neg);me.min=Math.min(me.min,helpers$1.min(values));me.max=Math.max(me.max,helpers$1.max(values));});me.min=helpers$1.isFinite(me.min)&&!isNaN(me.min)?me.min:DEFAULT_MIN;me.max=helpers$1.isFinite(me.max)&&!isNaN(me.max)?me.max:DEFAULT_MAX;// Common base implementation to handle ticks.min, ticks.max, ticks.beginAtZero\nme.handleTickRangeOptions();},// Returns the maximum number of ticks based on the scale dimension\n_computeTickLimit:function _computeTickLimit(){var me=this;var tickFont;if(me.isHorizontal()){return Math.ceil(me.width/40);}tickFont=helpers$1.options._parseFont(me.options.ticks);return Math.ceil(me.height/tickFont.lineHeight);},// Called after the ticks are built. We need\nhandleDirectionalChanges:function handleDirectionalChanges(){if(!this.isHorizontal()){// We are in a vertical orientation. The top value is the highest. So reverse the array\nthis.ticks.reverse();}},getLabelForIndex:function getLabelForIndex(index,datasetIndex){return this._getScaleLabel(this.chart.data.datasets[datasetIndex].data[index]);},// Utils\ngetPixelForValue:function getPixelForValue(value){var me=this;return me.getPixelForDecimal((+me.getRightValue(value)-me._startValue)/me._valueRange);},getValueForPixel:function getValueForPixel(pixel){return this._startValue+this.getDecimalForPixel(pixel)*this._valueRange;},getPixelForTick:function getPixelForTick(index){var ticks=this.ticksAsNumbers;if(index<0||index>ticks.length-1){return null;}return this.getPixelForValue(ticks[index]);}});// INTERNAL: static default options, registered in src/index.js\nvar _defaults$1=defaultConfig$1;scale_linear._defaults=_defaults$1;var valueOrDefault$b=helpers$1.valueOrDefault;var log10=helpers$1.math.log10;/**\n * Generate a set of logarithmic ticks\n * @param generationOptions the options used to generate the ticks\n * @param dataRange the range of the data\n * @returns {number[]} array of tick values\n */function generateTicks$1(generationOptions,dataRange){var ticks=[];var tickVal=valueOrDefault$b(generationOptions.min,Math.pow(10,Math.floor(log10(dataRange.min))));var endExp=Math.floor(log10(dataRange.max));var endSignificand=Math.ceil(dataRange.max/Math.pow(10,endExp));var exp,significand;if(tickVal===0){exp=Math.floor(log10(dataRange.minNotZero));significand=Math.floor(dataRange.minNotZero/Math.pow(10,exp));ticks.push(tickVal);tickVal=significand*Math.pow(10,exp);}else{exp=Math.floor(log10(tickVal));significand=Math.floor(tickVal/Math.pow(10,exp));}var precision=exp<0?Math.pow(10,Math.abs(exp)):1;do{ticks.push(tickVal);++significand;if(significand===10){significand=1;++exp;precision=exp>=0?1:precision;}tickVal=Math.round(significand*Math.pow(10,exp)*precision)/precision;}while(exp<endExp||exp===endExp&&significand<endSignificand);var lastTick=valueOrDefault$b(generationOptions.max,tickVal);ticks.push(lastTick);return ticks;}var defaultConfig$2={position:'left',// label settings\nticks:{callback:core_ticks.formatters.logarithmic}};// TODO(v3): change this to positiveOrDefault\nfunction nonNegativeOrDefault(value,defaultValue){return helpers$1.isFinite(value)&&value>=0?value:defaultValue;}var scale_logarithmic=core_scale.extend({determineDataLimits:function determineDataLimits(){var me=this;var opts=me.options;var chart=me.chart;var datasets=chart.data.datasets;var isHorizontal=me.isHorizontal();function IDMatches(meta){return isHorizontal?meta.xAxisID===me.id:meta.yAxisID===me.id;}var datasetIndex,meta,value,data,i,ilen;// Calculate Range\nme.min=Number.POSITIVE_INFINITY;me.max=Number.NEGATIVE_INFINITY;me.minNotZero=Number.POSITIVE_INFINITY;var hasStacks=opts.stacked;if(hasStacks===undefined){for(datasetIndex=0;datasetIndex<datasets.length;datasetIndex++){meta=chart.getDatasetMeta(datasetIndex);if(chart.isDatasetVisible(datasetIndex)&&IDMatches(meta)&&meta.stack!==undefined){hasStacks=true;break;}}}if(opts.stacked||hasStacks){var valuesPerStack={};for(datasetIndex=0;datasetIndex<datasets.length;datasetIndex++){meta=chart.getDatasetMeta(datasetIndex);var key=[meta.type,// we have a separate stack for stack=undefined datasets when the opts.stacked is undefined\nopts.stacked===undefined&&meta.stack===undefined?datasetIndex:'',meta.stack].join('.');if(chart.isDatasetVisible(datasetIndex)&&IDMatches(meta)){if(valuesPerStack[key]===undefined){valuesPerStack[key]=[];}data=datasets[datasetIndex].data;for(i=0,ilen=data.length;i<ilen;i++){var values=valuesPerStack[key];value=me._parseValue(data[i]);// invalid, hidden and negative values are ignored\nif(isNaN(value.min)||isNaN(value.max)||meta.data[i].hidden||value.min<0||value.max<0){continue;}values[i]=values[i]||0;values[i]+=value.max;}}}helpers$1.each(valuesPerStack,function(valuesForType){if(valuesForType.length>0){var minVal=helpers$1.min(valuesForType);var maxVal=helpers$1.max(valuesForType);me.min=Math.min(me.min,minVal);me.max=Math.max(me.max,maxVal);}});}else{for(datasetIndex=0;datasetIndex<datasets.length;datasetIndex++){meta=chart.getDatasetMeta(datasetIndex);if(chart.isDatasetVisible(datasetIndex)&&IDMatches(meta)){data=datasets[datasetIndex].data;for(i=0,ilen=data.length;i<ilen;i++){value=me._parseValue(data[i]);// invalid, hidden and negative values are ignored\nif(isNaN(value.min)||isNaN(value.max)||meta.data[i].hidden||value.min<0||value.max<0){continue;}me.min=Math.min(value.min,me.min);me.max=Math.max(value.max,me.max);if(value.min!==0){me.minNotZero=Math.min(value.min,me.minNotZero);}}}}}me.min=helpers$1.isFinite(me.min)?me.min:null;me.max=helpers$1.isFinite(me.max)?me.max:null;me.minNotZero=helpers$1.isFinite(me.minNotZero)?me.minNotZero:null;// Common base implementation to handle ticks.min, ticks.max\nthis.handleTickRangeOptions();},handleTickRangeOptions:function handleTickRangeOptions(){var me=this;var tickOpts=me.options.ticks;var DEFAULT_MIN=1;var DEFAULT_MAX=10;me.min=nonNegativeOrDefault(tickOpts.min,me.min);me.max=nonNegativeOrDefault(tickOpts.max,me.max);if(me.min===me.max){if(me.min!==0&&me.min!==null){me.min=Math.pow(10,Math.floor(log10(me.min))-1);me.max=Math.pow(10,Math.floor(log10(me.max))+1);}else{me.min=DEFAULT_MIN;me.max=DEFAULT_MAX;}}if(me.min===null){me.min=Math.pow(10,Math.floor(log10(me.max))-1);}if(me.max===null){me.max=me.min!==0?Math.pow(10,Math.floor(log10(me.min))+1):DEFAULT_MAX;}if(me.minNotZero===null){if(me.min>0){me.minNotZero=me.min;}else if(me.max<1){me.minNotZero=Math.pow(10,Math.floor(log10(me.max)));}else{me.minNotZero=DEFAULT_MIN;}}},buildTicks:function buildTicks(){var me=this;var tickOpts=me.options.ticks;var reverse=!me.isHorizontal();var generationOptions={min:nonNegativeOrDefault(tickOpts.min),max:nonNegativeOrDefault(tickOpts.max)};var ticks=me.ticks=generateTicks$1(generationOptions,me);// At this point, we need to update our max and min given the tick values since we have expanded the\n// range of the scale\nme.max=helpers$1.max(ticks);me.min=helpers$1.min(ticks);if(tickOpts.reverse){reverse=!reverse;me.start=me.max;me.end=me.min;}else{me.start=me.min;me.end=me.max;}if(reverse){ticks.reverse();}},convertTicksToLabels:function convertTicksToLabels(){this.tickValues=this.ticks.slice();core_scale.prototype.convertTicksToLabels.call(this);},// Get the correct tooltip label\ngetLabelForIndex:function getLabelForIndex(index,datasetIndex){return this._getScaleLabel(this.chart.data.datasets[datasetIndex].data[index]);},getPixelForTick:function getPixelForTick(index){var ticks=this.tickValues;if(index<0||index>ticks.length-1){return null;}return this.getPixelForValue(ticks[index]);},/**\n\t * Returns the value of the first tick.\n\t * @param {number} value - The minimum not zero value.\n\t * @return {number} The first tick value.\n\t * @private\n\t */_getFirstTickValue:function _getFirstTickValue(value){var exp=Math.floor(log10(value));var significand=Math.floor(value/Math.pow(10,exp));return significand*Math.pow(10,exp);},_configure:function _configure(){var me=this;var start=me.min;var offset=0;core_scale.prototype._configure.call(me);if(start===0){start=me._getFirstTickValue(me.minNotZero);offset=valueOrDefault$b(me.options.ticks.fontSize,core_defaults.global.defaultFontSize)/me._length;}me._startValue=log10(start);me._valueOffset=offset;me._valueRange=(log10(me.max)-log10(start))/(1-offset);},getPixelForValue:function getPixelForValue(value){var me=this;var decimal=0;value=+me.getRightValue(value);if(value>me.min&&value>0){decimal=(log10(value)-me._startValue)/me._valueRange+me._valueOffset;}return me.getPixelForDecimal(decimal);},getValueForPixel:function getValueForPixel(pixel){var me=this;var decimal=me.getDecimalForPixel(pixel);return decimal===0&&me.min===0?0:Math.pow(10,me._startValue+(decimal-me._valueOffset)*me._valueRange);}});// INTERNAL: static default options, registered in src/index.js\nvar _defaults$2=defaultConfig$2;scale_logarithmic._defaults=_defaults$2;var valueOrDefault$c=helpers$1.valueOrDefault;var valueAtIndexOrDefault$1=helpers$1.valueAtIndexOrDefault;var resolve$4=helpers$1.options.resolve;var defaultConfig$3={display:true,// Boolean - Whether to animate scaling the chart from the centre\nanimate:true,position:'chartArea',angleLines:{display:true,color:'rgba(0,0,0,0.1)',lineWidth:1,borderDash:[],borderDashOffset:0.0},gridLines:{circular:false},// label settings\nticks:{// Boolean - Show a backdrop to the scale label\nshowLabelBackdrop:true,// String - The colour of the label backdrop\nbackdropColor:'rgba(255,255,255,0.75)',// Number - The backdrop padding above & below the label in pixels\nbackdropPaddingY:2,// Number - The backdrop padding to the side of the label in pixels\nbackdropPaddingX:2,callback:core_ticks.formatters.linear},pointLabels:{// Boolean - if true, show point labels\ndisplay:true,// Number - Point label font size in pixels\nfontSize:10,// Function - Used to convert point labels\ncallback:function callback(label){return label;}}};function getTickBackdropHeight(opts){var tickOpts=opts.ticks;if(tickOpts.display&&opts.display){return valueOrDefault$c(tickOpts.fontSize,core_defaults.global.defaultFontSize)+tickOpts.backdropPaddingY*2;}return 0;}function measureLabelSize(ctx,lineHeight,label){if(helpers$1.isArray(label)){return{w:helpers$1.longestText(ctx,ctx.font,label),h:label.length*lineHeight};}return{w:ctx.measureText(label).width,h:lineHeight};}function determineLimits(angle,pos,size,min,max){if(angle===min||angle===max){return{start:pos-size/2,end:pos+size/2};}else if(angle<min||angle>max){return{start:pos-size,end:pos};}return{start:pos,end:pos+size};}/**\n * Helper function to fit a radial linear scale with point labels\n */function fitWithPointLabels(scale){// Right, this is really confusing and there is a lot of maths going on here\n// The gist of the problem is here: https://gist.github.com/nnnick/696cc9c55f4b0beb8fe9\n//\n// Reaction: https://dl.dropboxusercontent.com/u/34601363/toomuchscience.gif\n//\n// Solution:\n//\n// We assume the radius of the polygon is half the size of the canvas at first\n// at each index we check if the text overlaps.\n//\n// Where it does, we store that angle and that index.\n//\n// After finding the largest index and angle we calculate how much we need to remove\n// from the shape radius to move the point inwards by that x.\n//\n// We average the left and right distances to get the maximum shape radius that can fit in the box\n// along with labels.\n//\n// Once we have that, we can find the centre point for the chart, by taking the x text protrusion\n// on each side, removing that from the size, halving it and adding the left x protrusion width.\n//\n// This will mean we have a shape fitted to the canvas, as large as it can be with the labels\n// and position it in the most space efficient manner\n//\n// https://dl.dropboxusercontent.com/u/34601363/yeahscience.gif\nvar plFont=helpers$1.options._parseFont(scale.options.pointLabels);// Get maximum radius of the polygon. Either half the height (minus the text width) or half the width.\n// Use this to calculate the offset + change. - Make sure L/R protrusion is at least 0 to stop issues with centre points\nvar furthestLimits={l:0,r:scale.width,t:0,b:scale.height-scale.paddingTop};var furthestAngles={};var i,textSize,pointPosition;scale.ctx.font=plFont.string;scale._pointLabelSizes=[];var valueCount=scale.chart.data.labels.length;for(i=0;i<valueCount;i++){pointPosition=scale.getPointPosition(i,scale.drawingArea+5);textSize=measureLabelSize(scale.ctx,plFont.lineHeight,scale.pointLabels[i]);scale._pointLabelSizes[i]=textSize;// Add quarter circle to make degree 0 mean top of circle\nvar angleRadians=scale.getIndexAngle(i);var angle=helpers$1.toDegrees(angleRadians)%360;var hLimits=determineLimits(angle,pointPosition.x,textSize.w,0,180);var vLimits=determineLimits(angle,pointPosition.y,textSize.h,90,270);if(hLimits.start<furthestLimits.l){furthestLimits.l=hLimits.start;furthestAngles.l=angleRadians;}if(hLimits.end>furthestLimits.r){furthestLimits.r=hLimits.end;furthestAngles.r=angleRadians;}if(vLimits.start<furthestLimits.t){furthestLimits.t=vLimits.start;furthestAngles.t=angleRadians;}if(vLimits.end>furthestLimits.b){furthestLimits.b=vLimits.end;furthestAngles.b=angleRadians;}}scale.setReductions(scale.drawingArea,furthestLimits,furthestAngles);}function getTextAlignForAngle(angle){if(angle===0||angle===180){return'center';}else if(angle<180){return'left';}return'right';}function fillText(ctx,text,position,lineHeight){var y=position.y+lineHeight/2;var i,ilen;if(helpers$1.isArray(text)){for(i=0,ilen=text.length;i<ilen;++i){ctx.fillText(text[i],position.x,y);y+=lineHeight;}}else{ctx.fillText(text,position.x,y);}}function adjustPointPositionForLabelHeight(angle,textSize,position){if(angle===90||angle===270){position.y-=textSize.h/2;}else if(angle>270||angle<90){position.y-=textSize.h;}}function drawPointLabels(scale){var ctx=scale.ctx;var opts=scale.options;var pointLabelOpts=opts.pointLabels;var tickBackdropHeight=getTickBackdropHeight(opts);var outerDistance=scale.getDistanceFromCenterForValue(opts.ticks.reverse?scale.min:scale.max);var plFont=helpers$1.options._parseFont(pointLabelOpts);ctx.save();ctx.font=plFont.string;ctx.textBaseline='middle';for(var i=scale.chart.data.labels.length-1;i>=0;i--){// Extra pixels out for some label spacing\nvar extra=i===0?tickBackdropHeight/2:0;var pointLabelPosition=scale.getPointPosition(i,outerDistance+extra+5);// Keep this in loop since we may support array properties here\nvar pointLabelFontColor=valueAtIndexOrDefault$1(pointLabelOpts.fontColor,i,core_defaults.global.defaultFontColor);ctx.fillStyle=pointLabelFontColor;var angleRadians=scale.getIndexAngle(i);var angle=helpers$1.toDegrees(angleRadians);ctx.textAlign=getTextAlignForAngle(angle);adjustPointPositionForLabelHeight(angle,scale._pointLabelSizes[i],pointLabelPosition);fillText(ctx,scale.pointLabels[i],pointLabelPosition,plFont.lineHeight);}ctx.restore();}function drawRadiusLine(scale,gridLineOpts,radius,index){var ctx=scale.ctx;var circular=gridLineOpts.circular;var valueCount=scale.chart.data.labels.length;var lineColor=valueAtIndexOrDefault$1(gridLineOpts.color,index-1);var lineWidth=valueAtIndexOrDefault$1(gridLineOpts.lineWidth,index-1);var pointPosition;if(!circular&&!valueCount||!lineColor||!lineWidth){return;}ctx.save();ctx.strokeStyle=lineColor;ctx.lineWidth=lineWidth;if(ctx.setLineDash){ctx.setLineDash(gridLineOpts.borderDash||[]);ctx.lineDashOffset=gridLineOpts.borderDashOffset||0.0;}ctx.beginPath();if(circular){// Draw circular arcs between the points\nctx.arc(scale.xCenter,scale.yCenter,radius,0,Math.PI*2);}else{// Draw straight lines connecting each index\npointPosition=scale.getPointPosition(0,radius);ctx.moveTo(pointPosition.x,pointPosition.y);for(var i=1;i<valueCount;i++){pointPosition=scale.getPointPosition(i,radius);ctx.lineTo(pointPosition.x,pointPosition.y);}}ctx.closePath();ctx.stroke();ctx.restore();}function numberOrZero(param){return helpers$1.isNumber(param)?param:0;}var scale_radialLinear=scale_linearbase.extend({setDimensions:function setDimensions(){var me=this;// Set the unconstrained dimension before label rotation\nme.width=me.maxWidth;me.height=me.maxHeight;me.paddingTop=getTickBackdropHeight(me.options)/2;me.xCenter=Math.floor(me.width/2);me.yCenter=Math.floor((me.height-me.paddingTop)/2);me.drawingArea=Math.min(me.height-me.paddingTop,me.width)/2;},determineDataLimits:function determineDataLimits(){var me=this;var chart=me.chart;var min=Number.POSITIVE_INFINITY;var max=Number.NEGATIVE_INFINITY;helpers$1.each(chart.data.datasets,function(dataset,datasetIndex){if(chart.isDatasetVisible(datasetIndex)){var meta=chart.getDatasetMeta(datasetIndex);helpers$1.each(dataset.data,function(rawValue,index){var value=+me.getRightValue(rawValue);if(isNaN(value)||meta.data[index].hidden){return;}min=Math.min(value,min);max=Math.max(value,max);});}});me.min=min===Number.POSITIVE_INFINITY?0:min;me.max=max===Number.NEGATIVE_INFINITY?0:max;// Common base implementation to handle ticks.min, ticks.max, ticks.beginAtZero\nme.handleTickRangeOptions();},// Returns the maximum number of ticks based on the scale dimension\n_computeTickLimit:function _computeTickLimit(){return Math.ceil(this.drawingArea/getTickBackdropHeight(this.options));},convertTicksToLabels:function convertTicksToLabels(){var me=this;scale_linearbase.prototype.convertTicksToLabels.call(me);// Point labels\nme.pointLabels=me.chart.data.labels.map(function(){var label=helpers$1.callback(me.options.pointLabels.callback,arguments,me);return label||label===0?label:'';});},getLabelForIndex:function getLabelForIndex(index,datasetIndex){return+this.getRightValue(this.chart.data.datasets[datasetIndex].data[index]);},fit:function fit(){var me=this;var opts=me.options;if(opts.display&&opts.pointLabels.display){fitWithPointLabels(me);}else{me.setCenterPoint(0,0,0,0);}},/**\n\t * Set radius reductions and determine new radius and center point\n\t * @private\n\t */setReductions:function setReductions(largestPossibleRadius,furthestLimits,furthestAngles){var me=this;var radiusReductionLeft=furthestLimits.l/Math.sin(furthestAngles.l);var radiusReductionRight=Math.max(furthestLimits.r-me.width,0)/Math.sin(furthestAngles.r);var radiusReductionTop=-furthestLimits.t/Math.cos(furthestAngles.t);var radiusReductionBottom=-Math.max(furthestLimits.b-(me.height-me.paddingTop),0)/Math.cos(furthestAngles.b);radiusReductionLeft=numberOrZero(radiusReductionLeft);radiusReductionRight=numberOrZero(radiusReductionRight);radiusReductionTop=numberOrZero(radiusReductionTop);radiusReductionBottom=numberOrZero(radiusReductionBottom);me.drawingArea=Math.min(Math.floor(largestPossibleRadius-(radiusReductionLeft+radiusReductionRight)/2),Math.floor(largestPossibleRadius-(radiusReductionTop+radiusReductionBottom)/2));me.setCenterPoint(radiusReductionLeft,radiusReductionRight,radiusReductionTop,radiusReductionBottom);},setCenterPoint:function setCenterPoint(leftMovement,rightMovement,topMovement,bottomMovement){var me=this;var maxRight=me.width-rightMovement-me.drawingArea;var maxLeft=leftMovement+me.drawingArea;var maxTop=topMovement+me.drawingArea;var maxBottom=me.height-me.paddingTop-bottomMovement-me.drawingArea;me.xCenter=Math.floor((maxLeft+maxRight)/2+me.left);me.yCenter=Math.floor((maxTop+maxBottom)/2+me.top+me.paddingTop);},getIndexAngle:function getIndexAngle(index){var chart=this.chart;var angleMultiplier=360/chart.data.labels.length;var options=chart.options||{};var startAngle=options.startAngle||0;// Start from the top instead of right, so remove a quarter of the circle\nvar angle=(index*angleMultiplier+startAngle)%360;return(angle<0?angle+360:angle)*Math.PI*2/360;},getDistanceFromCenterForValue:function getDistanceFromCenterForValue(value){var me=this;if(helpers$1.isNullOrUndef(value)){return NaN;}// Take into account half font size + the yPadding of the top value\nvar scalingFactor=me.drawingArea/(me.max-me.min);if(me.options.ticks.reverse){return(me.max-value)*scalingFactor;}return(value-me.min)*scalingFactor;},getPointPosition:function getPointPosition(index,distanceFromCenter){var me=this;var thisAngle=me.getIndexAngle(index)-Math.PI/2;return{x:Math.cos(thisAngle)*distanceFromCenter+me.xCenter,y:Math.sin(thisAngle)*distanceFromCenter+me.yCenter};},getPointPositionForValue:function getPointPositionForValue(index,value){return this.getPointPosition(index,this.getDistanceFromCenterForValue(value));},getBasePosition:function getBasePosition(index){var me=this;var min=me.min;var max=me.max;return me.getPointPositionForValue(index||0,me.beginAtZero?0:min<0&&max<0?max:min>0&&max>0?min:0);},/**\n\t * @private\n\t */_drawGrid:function _drawGrid(){var me=this;var ctx=me.ctx;var opts=me.options;var gridLineOpts=opts.gridLines;var angleLineOpts=opts.angleLines;var lineWidth=valueOrDefault$c(angleLineOpts.lineWidth,gridLineOpts.lineWidth);var lineColor=valueOrDefault$c(angleLineOpts.color,gridLineOpts.color);var i,offset,position;if(opts.pointLabels.display){drawPointLabels(me);}if(gridLineOpts.display){helpers$1.each(me.ticks,function(label,index){if(index!==0){offset=me.getDistanceFromCenterForValue(me.ticksAsNumbers[index]);drawRadiusLine(me,gridLineOpts,offset,index);}});}if(angleLineOpts.display&&lineWidth&&lineColor){ctx.save();ctx.lineWidth=lineWidth;ctx.strokeStyle=lineColor;if(ctx.setLineDash){ctx.setLineDash(resolve$4([angleLineOpts.borderDash,gridLineOpts.borderDash,[]]));ctx.lineDashOffset=resolve$4([angleLineOpts.borderDashOffset,gridLineOpts.borderDashOffset,0.0]);}for(i=me.chart.data.labels.length-1;i>=0;i--){offset=me.getDistanceFromCenterForValue(opts.ticks.reverse?me.min:me.max);position=me.getPointPosition(i,offset);ctx.beginPath();ctx.moveTo(me.xCenter,me.yCenter);ctx.lineTo(position.x,position.y);ctx.stroke();}ctx.restore();}},/**\n\t * @private\n\t */_drawLabels:function _drawLabels(){var me=this;var ctx=me.ctx;var opts=me.options;var tickOpts=opts.ticks;if(!tickOpts.display){return;}var startAngle=me.getIndexAngle(0);var tickFont=helpers$1.options._parseFont(tickOpts);var tickFontColor=valueOrDefault$c(tickOpts.fontColor,core_defaults.global.defaultFontColor);var offset,width;ctx.save();ctx.font=tickFont.string;ctx.translate(me.xCenter,me.yCenter);ctx.rotate(startAngle);ctx.textAlign='center';ctx.textBaseline='middle';helpers$1.each(me.ticks,function(label,index){if(index===0&&!tickOpts.reverse){return;}offset=me.getDistanceFromCenterForValue(me.ticksAsNumbers[index]);if(tickOpts.showLabelBackdrop){width=ctx.measureText(label).width;ctx.fillStyle=tickOpts.backdropColor;ctx.fillRect(-width/2-tickOpts.backdropPaddingX,-offset-tickFont.size/2-tickOpts.backdropPaddingY,width+tickOpts.backdropPaddingX*2,tickFont.size+tickOpts.backdropPaddingY*2);}ctx.fillStyle=tickFontColor;ctx.fillText(label,0,-offset);});ctx.restore();},/**\n\t * @private\n\t */_drawTitle:helpers$1.noop});// INTERNAL: static default options, registered in src/index.js\nvar _defaults$3=defaultConfig$3;scale_radialLinear._defaults=_defaults$3;var deprecated$1=helpers$1._deprecated;var resolve$5=helpers$1.options.resolve;var valueOrDefault$d=helpers$1.valueOrDefault;// Integer constants are from the ES6 spec.\nvar MIN_INTEGER=Number.MIN_SAFE_INTEGER||-9007199254740991;var MAX_INTEGER=Number.MAX_SAFE_INTEGER||9007199254740991;var INTERVALS={millisecond:{common:true,size:1,steps:1000},second:{common:true,size:1000,steps:60},minute:{common:true,size:60000,steps:60},hour:{common:true,size:3600000,steps:24},day:{common:true,size:86400000,steps:30},week:{common:false,size:604800000,steps:4},month:{common:true,size:2.628e9,steps:12},quarter:{common:false,size:7.884e9,steps:4},year:{common:true,size:3.154e10}};var UNITS=Object.keys(INTERVALS);function sorter(a,b){return a-b;}function arrayUnique(items){var hash={};var out=[];var i,ilen,item;for(i=0,ilen=items.length;i<ilen;++i){item=items[i];if(!hash[item]){hash[item]=true;out.push(item);}}return out;}function getMin(options){return helpers$1.valueOrDefault(options.time.min,options.ticks.min);}function getMax(options){return helpers$1.valueOrDefault(options.time.max,options.ticks.max);}/**\n * Returns an array of {time, pos} objects used to interpolate a specific `time` or position\n * (`pos`) on the scale, by searching entries before and after the requested value. `pos` is\n * a decimal between 0 and 1: 0 being the start of the scale (left or top) and 1 the other\n * extremity (left + width or top + height). Note that it would be more optimized to directly\n * store pre-computed pixels, but the scale dimensions are not guaranteed at the time we need\n * to create the lookup table. The table ALWAYS contains at least two items: min and max.\n *\n * @param {number[]} timestamps - timestamps sorted from lowest to highest.\n * @param {string} distribution - If 'linear', timestamps will be spread linearly along the min\n * and max range, so basically, the table will contains only two items: {min, 0} and {max, 1}.\n * If 'series', timestamps will be positioned at the same distance from each other. In this\n * case, only timestamps that break the time linearity are registered, meaning that in the\n * best case, all timestamps are linear, the table contains only min and max.\n */function buildLookupTable(timestamps,min,max,distribution){if(distribution==='linear'||!timestamps.length){return[{time:min,pos:0},{time:max,pos:1}];}var table=[];var items=[min];var i,ilen,prev,curr,next;for(i=0,ilen=timestamps.length;i<ilen;++i){curr=timestamps[i];if(curr>min&&curr<max){items.push(curr);}}items.push(max);for(i=0,ilen=items.length;i<ilen;++i){next=items[i+1];prev=items[i-1];curr=items[i];// only add points that breaks the scale linearity\nif(prev===undefined||next===undefined||Math.round((next+prev)/2)!==curr){table.push({time:curr,pos:i/(ilen-1)});}}return table;}// @see adapted from https://www.anujgakhar.com/2014/03/01/binary-search-in-javascript/\nfunction lookup(table,key,value){var lo=0;var hi=table.length-1;var mid,i0,i1;while(lo>=0&&lo<=hi){mid=lo+hi>>1;i0=table[mid-1]||null;i1=table[mid];if(!i0){// given value is outside table (before first item)\nreturn{lo:null,hi:i1};}else if(i1[key]<value){lo=mid+1;}else if(i0[key]>value){hi=mid-1;}else{return{lo:i0,hi:i1};}}// given value is outside table (after last item)\nreturn{lo:i1,hi:null};}/**\n * Linearly interpolates the given source `value` using the table items `skey` values and\n * returns the associated `tkey` value. For example, interpolate(table, 'time', 42, 'pos')\n * returns the position for a timestamp equal to 42. If value is out of bounds, values at\n * index [0, 1] or [n - 1, n] are used for the interpolation.\n */function interpolate$1(table,skey,sval,tkey){var range=lookup(table,skey,sval);// Note: the lookup table ALWAYS contains at least 2 items (min and max)\nvar prev=!range.lo?table[0]:!range.hi?table[table.length-2]:range.lo;var next=!range.lo?table[1]:!range.hi?table[table.length-1]:range.hi;var span=next[skey]-prev[skey];var ratio=span?(sval-prev[skey])/span:0;var offset=(next[tkey]-prev[tkey])*ratio;return prev[tkey]+offset;}function toTimestamp(scale,input){var adapter=scale._adapter;var options=scale.options.time;var parser=options.parser;var format=parser||options.format;var value=input;if(typeof parser==='function'){value=parser(value);}// Only parse if its not a timestamp already\nif(!helpers$1.isFinite(value)){value=typeof format==='string'?adapter.parse(value,format):adapter.parse(value);}if(value!==null){return+value;}// Labels are in an incompatible format and no `parser` has been provided.\n// The user might still use the deprecated `format` option for parsing.\nif(!parser&&typeof format==='function'){value=format(input);// `format` could return something else than a timestamp, if so, parse it\nif(!helpers$1.isFinite(value)){value=adapter.parse(value);}}return value;}function parse(scale,input){if(helpers$1.isNullOrUndef(input)){return null;}var options=scale.options.time;var value=toTimestamp(scale,scale.getRightValue(input));if(value===null){return value;}if(options.round){value=+scale._adapter.startOf(value,options.round);}return value;}/**\n * Figures out what unit results in an appropriate number of auto-generated ticks\n */function determineUnitForAutoTicks(minUnit,min,max,capacity){var ilen=UNITS.length;var i,interval,factor;for(i=UNITS.indexOf(minUnit);i<ilen-1;++i){interval=INTERVALS[UNITS[i]];factor=interval.steps?interval.steps:MAX_INTEGER;if(interval.common&&Math.ceil((max-min)/(factor*interval.size))<=capacity){return UNITS[i];}}return UNITS[ilen-1];}/**\n * Figures out what unit to format a set of ticks with\n */function determineUnitForFormatting(scale,numTicks,minUnit,min,max){var i,unit;for(i=UNITS.length-1;i>=UNITS.indexOf(minUnit);i--){unit=UNITS[i];if(INTERVALS[unit].common&&scale._adapter.diff(max,min,unit)>=numTicks-1){return unit;}}return UNITS[minUnit?UNITS.indexOf(minUnit):0];}function determineMajorUnit(unit){for(var i=UNITS.indexOf(unit)+1,ilen=UNITS.length;i<ilen;++i){if(INTERVALS[UNITS[i]].common){return UNITS[i];}}}/**\n * Generates a maximum of `capacity` timestamps between min and max, rounded to the\n * `minor` unit using the given scale time `options`.\n * Important: this method can return ticks outside the min and max range, it's the\n * responsibility of the calling code to clamp values if needed.\n */function generate(scale,min,max,capacity){var adapter=scale._adapter;var options=scale.options;var timeOpts=options.time;var minor=timeOpts.unit||determineUnitForAutoTicks(timeOpts.minUnit,min,max,capacity);var stepSize=resolve$5([timeOpts.stepSize,timeOpts.unitStepSize,1]);var weekday=minor==='week'?timeOpts.isoWeekday:false;var first=min;var ticks=[];var time;// For 'week' unit, handle the first day of week option\nif(weekday){first=+adapter.startOf(first,'isoWeek',weekday);}// Align first ticks on unit\nfirst=+adapter.startOf(first,weekday?'day':minor);// Prevent browser from freezing in case user options request millions of milliseconds\nif(adapter.diff(max,min,minor)>100000*stepSize){throw min+' and '+max+' are too far apart with stepSize of '+stepSize+' '+minor;}for(time=first;time<max;time=+adapter.add(time,stepSize,minor)){ticks.push(time);}if(time===max||options.bounds==='ticks'){ticks.push(time);}return ticks;}/**\n * Returns the start and end offsets from edges in the form of {start, end}\n * where each value is a relative width to the scale and ranges between 0 and 1.\n * They add extra margins on the both sides by scaling down the original scale.\n * Offsets are added when the `offset` option is true.\n */function computeOffsets(table,ticks,min,max,options){var start=0;var end=0;var first,last;if(options.offset&&ticks.length){first=interpolate$1(table,'time',ticks[0],'pos');if(ticks.length===1){start=1-first;}else{start=(interpolate$1(table,'time',ticks[1],'pos')-first)/2;}last=interpolate$1(table,'time',ticks[ticks.length-1],'pos');if(ticks.length===1){end=last;}else{end=(last-interpolate$1(table,'time',ticks[ticks.length-2],'pos'))/2;}}return{start:start,end:end,factor:1/(start+1+end)};}function setMajorTicks(scale,ticks,map,majorUnit){var adapter=scale._adapter;var first=+adapter.startOf(ticks[0].value,majorUnit);var last=ticks[ticks.length-1].value;var major,index;for(major=first;major<=last;major=+adapter.add(major,1,majorUnit)){index=map[major];if(index>=0){ticks[index].major=true;}}return ticks;}function ticksFromTimestamps(scale,values,majorUnit){var ticks=[];var map={};var ilen=values.length;var i,value;for(i=0;i<ilen;++i){value=values[i];map[value]=i;ticks.push({value:value,major:false});}// We set the major ticks separately from the above loop because calling startOf for every tick\n// is expensive when there is a large number of ticks\nreturn ilen===0||!majorUnit?ticks:setMajorTicks(scale,ticks,map,majorUnit);}var defaultConfig$4={position:'bottom',/**\n\t * Data distribution along the scale:\n\t * - 'linear': data are spread according to their time (distances can vary),\n\t * - 'series': data are spread at the same distance from each other.\n\t * @see https://github.com/chartjs/Chart.js/pull/4507\n\t * @since 2.7.0\n\t */distribution:'linear',/**\n\t * Scale boundary strategy (bypassed by min/max time options)\n\t * - `data`: make sure data are fully visible, ticks outside are removed\n\t * - `ticks`: make sure ticks are fully visible, data outside are truncated\n\t * @see https://github.com/chartjs/Chart.js/pull/4556\n\t * @since 2.7.0\n\t */bounds:'data',adapters:{},time:{parser:false,// false == a pattern string from https://momentjs.com/docs/#/parsing/string-format/ or a custom callback that converts its argument to a moment\nunit:false,// false == automatic or override with week, month, year, etc.\nround:false,// none, or override with week, month, year, etc.\ndisplayFormat:false,// DEPRECATED\nisoWeekday:false,// override week start day - see https://momentjs.com/docs/#/get-set/iso-weekday/\nminUnit:'millisecond',displayFormats:{}},ticks:{autoSkip:false,/**\n\t\t * Ticks generation input values:\n\t\t * - 'auto': generates \"optimal\" ticks based on scale size and time options.\n\t\t * - 'data': generates ticks from data (including labels from data {t|x|y} objects).\n\t\t * - 'labels': generates ticks from user given `data.labels` values ONLY.\n\t\t * @see https://github.com/chartjs/Chart.js/pull/4507\n\t\t * @since 2.7.0\n\t\t */source:'auto',major:{enabled:false}}};var scale_time=core_scale.extend({initialize:function initialize(){this.mergeTicksOptions();core_scale.prototype.initialize.call(this);},update:function update(){var me=this;var options=me.options;var time=options.time||(options.time={});var adapter=me._adapter=new core_adapters._date(options.adapters.date);// DEPRECATIONS: output a message only one time per update\ndeprecated$1('time scale',time.format,'time.format','time.parser');deprecated$1('time scale',time.min,'time.min','ticks.min');deprecated$1('time scale',time.max,'time.max','ticks.max');// Backward compatibility: before introducing adapter, `displayFormats` was\n// supposed to contain *all* unit/string pairs but this can't be resolved\n// when loading the scale (adapters are loaded afterward), so let's populate\n// missing formats on update\nhelpers$1.mergeIf(time.displayFormats,adapter.formats());return core_scale.prototype.update.apply(me,arguments);},/**\n\t * Allows data to be referenced via 't' attribute\n\t */getRightValue:function getRightValue(rawValue){if(rawValue&&rawValue.t!==undefined){rawValue=rawValue.t;}return core_scale.prototype.getRightValue.call(this,rawValue);},determineDataLimits:function determineDataLimits(){var me=this;var chart=me.chart;var adapter=me._adapter;var options=me.options;var unit=options.time.unit||'day';var min=MAX_INTEGER;var max=MIN_INTEGER;var timestamps=[];var datasets=[];var labels=[];var i,j,ilen,jlen,data,timestamp,labelsAdded;var dataLabels=me._getLabels();for(i=0,ilen=dataLabels.length;i<ilen;++i){labels.push(parse(me,dataLabels[i]));}for(i=0,ilen=(chart.data.datasets||[]).length;i<ilen;++i){if(chart.isDatasetVisible(i)){data=chart.data.datasets[i].data;// Let's consider that all data have the same format.\nif(helpers$1.isObject(data[0])){datasets[i]=[];for(j=0,jlen=data.length;j<jlen;++j){timestamp=parse(me,data[j]);timestamps.push(timestamp);datasets[i][j]=timestamp;}}else{datasets[i]=labels.slice(0);if(!labelsAdded){timestamps=timestamps.concat(labels);labelsAdded=true;}}}else{datasets[i]=[];}}if(labels.length){min=Math.min(min,labels[0]);max=Math.max(max,labels[labels.length-1]);}if(timestamps.length){timestamps=ilen>1?arrayUnique(timestamps).sort(sorter):timestamps.sort(sorter);min=Math.min(min,timestamps[0]);max=Math.max(max,timestamps[timestamps.length-1]);}min=parse(me,getMin(options))||min;max=parse(me,getMax(options))||max;// In case there is no valid min/max, set limits based on unit time option\nmin=min===MAX_INTEGER?+adapter.startOf(Date.now(),unit):min;max=max===MIN_INTEGER?+adapter.endOf(Date.now(),unit)+1:max;// Make sure that max is strictly higher than min (required by the lookup table)\nme.min=Math.min(min,max);me.max=Math.max(min+1,max);// PRIVATE\nme._table=[];me._timestamps={data:timestamps,datasets:datasets,labels:labels};},buildTicks:function buildTicks(){var me=this;var min=me.min;var max=me.max;var options=me.options;var tickOpts=options.ticks;var timeOpts=options.time;var timestamps=me._timestamps;var ticks=[];var capacity=me.getLabelCapacity(min);var source=tickOpts.source;var distribution=options.distribution;var i,ilen,timestamp;if(source==='data'||source==='auto'&&distribution==='series'){timestamps=timestamps.data;}else if(source==='labels'){timestamps=timestamps.labels;}else{timestamps=generate(me,min,max,capacity);}if(options.bounds==='ticks'&&timestamps.length){min=timestamps[0];max=timestamps[timestamps.length-1];}// Enforce limits with user min/max options\nmin=parse(me,getMin(options))||min;max=parse(me,getMax(options))||max;// Remove ticks outside the min/max range\nfor(i=0,ilen=timestamps.length;i<ilen;++i){timestamp=timestamps[i];if(timestamp>=min&&timestamp<=max){ticks.push(timestamp);}}me.min=min;me.max=max;// PRIVATE\n// determineUnitForFormatting relies on the number of ticks so we don't use it when\n// autoSkip is enabled because we don't yet know what the final number of ticks will be\nme._unit=timeOpts.unit||(tickOpts.autoSkip?determineUnitForAutoTicks(timeOpts.minUnit,me.min,me.max,capacity):determineUnitForFormatting(me,ticks.length,timeOpts.minUnit,me.min,me.max));me._majorUnit=!tickOpts.major.enabled||me._unit==='year'?undefined:determineMajorUnit(me._unit);me._table=buildLookupTable(me._timestamps.data,min,max,distribution);me._offsets=computeOffsets(me._table,ticks,min,max,options);if(tickOpts.reverse){ticks.reverse();}return ticksFromTimestamps(me,ticks,me._majorUnit);},getLabelForIndex:function getLabelForIndex(index,datasetIndex){var me=this;var adapter=me._adapter;var data=me.chart.data;var timeOpts=me.options.time;var label=data.labels&&index<data.labels.length?data.labels[index]:'';var value=data.datasets[datasetIndex].data[index];if(helpers$1.isObject(value)){label=me.getRightValue(value);}if(timeOpts.tooltipFormat){return adapter.format(toTimestamp(me,label),timeOpts.tooltipFormat);}if(typeof label==='string'){return label;}return adapter.format(toTimestamp(me,label),timeOpts.displayFormats.datetime);},/**\n\t * Function to format an individual tick mark\n\t * @private\n\t */tickFormatFunction:function tickFormatFunction(time,index,ticks,format){var me=this;var adapter=me._adapter;var options=me.options;var formats=options.time.displayFormats;var minorFormat=formats[me._unit];var majorUnit=me._majorUnit;var majorFormat=formats[majorUnit];var tick=ticks[index];var tickOpts=options.ticks;var major=majorUnit&&majorFormat&&tick&&tick.major;var label=adapter.format(time,format?format:major?majorFormat:minorFormat);var nestedTickOpts=major?tickOpts.major:tickOpts.minor;var formatter=resolve$5([nestedTickOpts.callback,nestedTickOpts.userCallback,tickOpts.callback,tickOpts.userCallback]);return formatter?formatter(label,index,ticks):label;},convertTicksToLabels:function convertTicksToLabels(ticks){var labels=[];var i,ilen;for(i=0,ilen=ticks.length;i<ilen;++i){labels.push(this.tickFormatFunction(ticks[i].value,i,ticks));}return labels;},/**\n\t * @private\n\t */getPixelForOffset:function getPixelForOffset(time){var me=this;var offsets=me._offsets;var pos=interpolate$1(me._table,'time',time,'pos');return me.getPixelForDecimal((offsets.start+pos)*offsets.factor);},getPixelForValue:function getPixelForValue(value,index,datasetIndex){var me=this;var time=null;if(index!==undefined&&datasetIndex!==undefined){time=me._timestamps.datasets[datasetIndex][index];}if(time===null){time=parse(me,value);}if(time!==null){return me.getPixelForOffset(time);}},getPixelForTick:function getPixelForTick(index){var ticks=this.getTicks();return index>=0&&index<ticks.length?this.getPixelForOffset(ticks[index].value):null;},getValueForPixel:function getValueForPixel(pixel){var me=this;var offsets=me._offsets;var pos=me.getDecimalForPixel(pixel)/offsets.factor-offsets.end;var time=interpolate$1(me._table,'pos',pos,'time');// DEPRECATION, we should return time directly\nreturn me._adapter._create(time);},/**\n\t * @private\n\t */_getLabelSize:function _getLabelSize(label){var me=this;var ticksOpts=me.options.ticks;var tickLabelWidth=me.ctx.measureText(label).width;var angle=helpers$1.toRadians(me.isHorizontal()?ticksOpts.maxRotation:ticksOpts.minRotation);var cosRotation=Math.cos(angle);var sinRotation=Math.sin(angle);var tickFontSize=valueOrDefault$d(ticksOpts.fontSize,core_defaults.global.defaultFontSize);return{w:tickLabelWidth*cosRotation+tickFontSize*sinRotation,h:tickLabelWidth*sinRotation+tickFontSize*cosRotation};},/**\n\t * Crude approximation of what the label width might be\n\t * @private\n\t */getLabelWidth:function getLabelWidth(label){return this._getLabelSize(label).w;},/**\n\t * @private\n\t */getLabelCapacity:function getLabelCapacity(exampleTime){var me=this;var timeOpts=me.options.time;var displayFormats=timeOpts.displayFormats;// pick the longest format (milliseconds) for guestimation\nvar format=displayFormats[timeOpts.unit]||displayFormats.millisecond;var exampleLabel=me.tickFormatFunction(exampleTime,0,ticksFromTimestamps(me,[exampleTime],me._majorUnit),format);var size=me._getLabelSize(exampleLabel);var capacity=Math.floor(me.isHorizontal()?me.width/size.w:me.height/size.h);if(me.options.offset){capacity--;}return capacity>0?capacity:1;}});// INTERNAL: static default options, registered in src/index.js\nvar _defaults$4=defaultConfig$4;scale_time._defaults=_defaults$4;var scales={category:scale_category,linear:scale_linear,logarithmic:scale_logarithmic,radialLinear:scale_radialLinear,time:scale_time};var FORMATS={datetime:'MMM D, YYYY, h:mm:ss a',millisecond:'h:mm:ss.SSS a',second:'h:mm:ss a',minute:'h:mm a',hour:'hA',day:'MMM D',week:'ll',month:'MMM YYYY',quarter:'[Q]Q - YYYY',year:'YYYY'};core_adapters._date.override(typeof moment==='function'?{_id:'moment',// DEBUG ONLY\nformats:function formats(){return FORMATS;},parse:function parse(value,format){if(typeof value==='string'&&typeof format==='string'){value=moment(value,format);}else if(!(value instanceof moment)){value=moment(value);}return value.isValid()?value.valueOf():null;},format:function format(time,_format){return moment(time).format(_format);},add:function add(time,amount,unit){return moment(time).add(amount,unit).valueOf();},diff:function diff(max,min,unit){return moment(max).diff(moment(min),unit);},startOf:function startOf(time,unit,weekday){time=moment(time);if(unit==='isoWeek'){return time.isoWeekday(weekday).valueOf();}return time.startOf(unit).valueOf();},endOf:function endOf(time,unit){return moment(time).endOf(unit).valueOf();},// DEPRECATIONS\n/**\n\t * Provided for backward compatibility with scale.getValueForPixel().\n\t * @deprecated since version 2.8.0\n\t * @todo remove at version 3\n\t * @private\n\t */_create:function _create(time){return moment(time);}}:{});core_defaults._set('global',{plugins:{filler:{propagate:true}}});var mappers={dataset:function dataset(source){var index=source.fill;var chart=source.chart;var meta=chart.getDatasetMeta(index);var visible=meta&&chart.isDatasetVisible(index);var points=visible&&meta.dataset._children||[];var length=points.length||0;return!length?null:function(point,i){return i<length&&points[i]._view||null;};},boundary:function boundary(source){var boundary=source.boundary;var x=boundary?boundary.x:null;var y=boundary?boundary.y:null;if(helpers$1.isArray(boundary)){return function(point,i){return boundary[i];};}return function(point){return{x:x===null?point.x:x,y:y===null?point.y:y};};}};// @todo if (fill[0] === '#')\nfunction decodeFill(el,index,count){var model=el._model||{};var fill=model.fill;var target;if(fill===undefined){fill=!!model.backgroundColor;}if(fill===false||fill===null){return false;}if(fill===true){return'origin';}target=parseFloat(fill,10);if(isFinite(target)&&Math.floor(target)===target){if(fill[0]==='-'||fill[0]==='+'){target=index+target;}if(target===index||target<0||target>=count){return false;}return target;}switch(fill){// compatibility\ncase'bottom':return'start';case'top':return'end';case'zero':return'origin';// supported boundaries\ncase'origin':case'start':case'end':return fill;// invalid fill values\ndefault:return false;}}function computeLinearBoundary(source){var model=source.el._model||{};var scale=source.el._scale||{};var fill=source.fill;var target=null;var horizontal;if(isFinite(fill)){return null;}// Backward compatibility: until v3, we still need to support boundary values set on\n// the model (scaleTop, scaleBottom and scaleZero) because some external plugins and\n// controllers might still use it (e.g. the Smith chart).\nif(fill==='start'){target=model.scaleBottom===undefined?scale.bottom:model.scaleBottom;}else if(fill==='end'){target=model.scaleTop===undefined?scale.top:model.scaleTop;}else if(model.scaleZero!==undefined){target=model.scaleZero;}else if(scale.getBasePixel){target=scale.getBasePixel();}if(target!==undefined&&target!==null){if(target.x!==undefined&&target.y!==undefined){return target;}if(helpers$1.isFinite(target)){horizontal=scale.isHorizontal();return{x:horizontal?target:null,y:horizontal?null:target};}}return null;}function computeCircularBoundary(source){var scale=source.el._scale;var options=scale.options;var length=scale.chart.data.labels.length;var fill=source.fill;var target=[];var start,end,center,i,point;if(!length){return null;}start=options.ticks.reverse?scale.max:scale.min;end=options.ticks.reverse?scale.min:scale.max;center=scale.getPointPositionForValue(0,start);for(i=0;i<length;++i){point=fill==='start'||fill==='end'?scale.getPointPositionForValue(i,fill==='start'?start:end):scale.getBasePosition(i);if(options.gridLines.circular){point.cx=center.x;point.cy=center.y;point.angle=scale.getIndexAngle(i)-Math.PI/2;}target.push(point);}return target;}function computeBoundary(source){var scale=source.el._scale||{};if(scale.getPointPositionForValue){return computeCircularBoundary(source);}return computeLinearBoundary(source);}function resolveTarget(sources,index,propagate){var source=sources[index];var fill=source.fill;var visited=[index];var target;if(!propagate){return fill;}while(fill!==false&&visited.indexOf(fill)===-1){if(!isFinite(fill)){return fill;}target=sources[fill];if(!target){return false;}if(target.visible){return fill;}visited.push(fill);fill=target.fill;}return false;}function createMapper(source){var fill=source.fill;var type='dataset';if(fill===false){return null;}if(!isFinite(fill)){type='boundary';}return mappers[type](source);}function isDrawable(point){return point&&!point.skip;}function drawArea(ctx,curve0,curve1,len0,len1){var i,cx,cy,r;if(!len0||!len1){return;}// building first area curve (normal)\nctx.moveTo(curve0[0].x,curve0[0].y);for(i=1;i<len0;++i){helpers$1.canvas.lineTo(ctx,curve0[i-1],curve0[i]);}if(curve1[0].angle!==undefined){cx=curve1[0].cx;cy=curve1[0].cy;r=Math.sqrt(Math.pow(curve1[0].x-cx,2)+Math.pow(curve1[0].y-cy,2));for(i=len1-1;i>0;--i){ctx.arc(cx,cy,r,curve1[i].angle,curve1[i-1].angle,true);}return;}// joining the two area curves\nctx.lineTo(curve1[len1-1].x,curve1[len1-1].y);// building opposite area curve (reverse)\nfor(i=len1-1;i>0;--i){helpers$1.canvas.lineTo(ctx,curve1[i],curve1[i-1],true);}}function doFill(ctx,points,mapper,view,color,loop){var count=points.length;var span=view.spanGaps;var curve0=[];var curve1=[];var len0=0;var len1=0;var i,ilen,index,p0,p1,d0,d1,loopOffset;ctx.beginPath();for(i=0,ilen=count;i<ilen;++i){index=i%count;p0=points[index]._view;p1=mapper(p0,index,view);d0=isDrawable(p0);d1=isDrawable(p1);if(loop&&loopOffset===undefined&&d0){loopOffset=i+1;ilen=count+loopOffset;}if(d0&&d1){len0=curve0.push(p0);len1=curve1.push(p1);}else if(len0&&len1){if(!span){drawArea(ctx,curve0,curve1,len0,len1);len0=len1=0;curve0=[];curve1=[];}else{if(d0){curve0.push(p0);}if(d1){curve1.push(p1);}}}}drawArea(ctx,curve0,curve1,len0,len1);ctx.closePath();ctx.fillStyle=color;ctx.fill();}var plugin_filler={id:'filler',afterDatasetsUpdate:function afterDatasetsUpdate(chart,options){var count=(chart.data.datasets||[]).length;var propagate=options.propagate;var sources=[];var meta,i,el,source;for(i=0;i<count;++i){meta=chart.getDatasetMeta(i);el=meta.dataset;source=null;if(el&&el._model&&el instanceof elements.Line){source={visible:chart.isDatasetVisible(i),fill:decodeFill(el,i,count),chart:chart,el:el};}meta.$filler=source;sources.push(source);}for(i=0;i<count;++i){source=sources[i];if(!source){continue;}source.fill=resolveTarget(sources,i,propagate);source.boundary=computeBoundary(source);source.mapper=createMapper(source);}},beforeDatasetsDraw:function beforeDatasetsDraw(chart){var metasets=chart._getSortedVisibleDatasetMetas();var ctx=chart.ctx;var meta,i,el,view,points,mapper,color;for(i=metasets.length-1;i>=0;--i){meta=metasets[i].$filler;if(!meta||!meta.visible){continue;}el=meta.el;view=el._view;points=el._children||[];mapper=meta.mapper;color=view.backgroundColor||core_defaults.global.defaultColor;if(mapper&&color&&points.length){helpers$1.canvas.clipArea(ctx,chart.chartArea);doFill(ctx,points,mapper,view,color,el._loop);helpers$1.canvas.unclipArea(ctx);}}}};var getRtlHelper$1=helpers$1.rtl.getRtlAdapter;var noop$1=helpers$1.noop;var valueOrDefault$e=helpers$1.valueOrDefault;core_defaults._set('global',{legend:{display:true,position:'top',align:'center',fullWidth:true,reverse:false,weight:1000,// a callback that will handle\nonClick:function onClick(e,legendItem){var index=legendItem.datasetIndex;var ci=this.chart;var meta=ci.getDatasetMeta(index);// See controller.isDatasetVisible comment\nmeta.hidden=meta.hidden===null?!ci.data.datasets[index].hidden:null;// We hid a dataset ... rerender the chart\nci.update();},onHover:null,onLeave:null,labels:{boxWidth:40,padding:10,// Generates labels shown in the legend\n// Valid properties to return:\n// text : text to display\n// fillStyle : fill of coloured box\n// strokeStyle: stroke of coloured box\n// hidden : if this legend item refers to a hidden item\n// lineCap : cap style for line\n// lineDash\n// lineDashOffset :\n// lineJoin :\n// lineWidth :\ngenerateLabels:function generateLabels(chart){var datasets=chart.data.datasets;var options=chart.options.legend||{};var usePointStyle=options.labels&&options.labels.usePointStyle;return chart._getSortedDatasetMetas().map(function(meta){var style=meta.controller.getStyle(usePointStyle?0:undefined);return{text:datasets[meta.index].label,fillStyle:style.backgroundColor,hidden:!chart.isDatasetVisible(meta.index),lineCap:style.borderCapStyle,lineDash:style.borderDash,lineDashOffset:style.borderDashOffset,lineJoin:style.borderJoinStyle,lineWidth:style.borderWidth,strokeStyle:style.borderColor,pointStyle:style.pointStyle,rotation:style.rotation,// Below is extra data used for toggling the datasets\ndatasetIndex:meta.index};},this);}}},legendCallback:function legendCallback(chart){var list=document.createElement('ul');var datasets=chart.data.datasets;var i,ilen,listItem,listItemSpan;list.setAttribute('class',chart.id+'-legend');for(i=0,ilen=datasets.length;i<ilen;i++){listItem=list.appendChild(document.createElement('li'));listItemSpan=listItem.appendChild(document.createElement('span'));listItemSpan.style.backgroundColor=datasets[i].backgroundColor;if(datasets[i].label){listItem.appendChild(document.createTextNode(datasets[i].label));}}return list.outerHTML;}});/**\n * Helper function to get the box width based on the usePointStyle option\n * @param {object} labelopts - the label options on the legend\n * @param {number} fontSize - the label font size\n * @return {number} width of the color box area\n */function getBoxWidth(labelOpts,fontSize){return labelOpts.usePointStyle&&labelOpts.boxWidth>fontSize?fontSize:labelOpts.boxWidth;}/**\n * IMPORTANT: this class is exposed publicly as Chart.Legend, backward compatibility required!\n */var Legend=core_element.extend({initialize:function initialize(config){var me=this;helpers$1.extend(me,config);// Contains hit boxes for each dataset (in dataset order)\nme.legendHitBoxes=[];/**\n \t\t * @private\n \t\t */me._hoveredItem=null;// Are we in doughnut mode which has a different data type\nme.doughnutMode=false;},// These methods are ordered by lifecycle. Utilities then follow.\n// Any function defined here is inherited by all legend types.\n// Any function can be extended by the legend type\nbeforeUpdate:noop$1,update:function update(maxWidth,maxHeight,margins){var me=this;// Update Lifecycle - Probably don't want to ever extend or overwrite this function ;)\nme.beforeUpdate();// Absorb the master measurements\nme.maxWidth=maxWidth;me.maxHeight=maxHeight;me.margins=margins;// Dimensions\nme.beforeSetDimensions();me.setDimensions();me.afterSetDimensions();// Labels\nme.beforeBuildLabels();me.buildLabels();me.afterBuildLabels();// Fit\nme.beforeFit();me.fit();me.afterFit();//\nme.afterUpdate();return me.minSize;},afterUpdate:noop$1,//\nbeforeSetDimensions:noop$1,setDimensions:function setDimensions(){var me=this;// Set the unconstrained dimension before label rotation\nif(me.isHorizontal()){// Reset position before calculating rotation\nme.width=me.maxWidth;me.left=0;me.right=me.width;}else{me.height=me.maxHeight;// Reset position before calculating rotation\nme.top=0;me.bottom=me.height;}// Reset padding\nme.paddingLeft=0;me.paddingTop=0;me.paddingRight=0;me.paddingBottom=0;// Reset minSize\nme.minSize={width:0,height:0};},afterSetDimensions:noop$1,//\nbeforeBuildLabels:noop$1,buildLabels:function buildLabels(){var me=this;var labelOpts=me.options.labels||{};var legendItems=helpers$1.callback(labelOpts.generateLabels,[me.chart],me)||[];if(labelOpts.filter){legendItems=legendItems.filter(function(item){return labelOpts.filter(item,me.chart.data);});}if(me.options.reverse){legendItems.reverse();}me.legendItems=legendItems;},afterBuildLabels:noop$1,//\nbeforeFit:noop$1,fit:function fit(){var me=this;var opts=me.options;var labelOpts=opts.labels;var display=opts.display;var ctx=me.ctx;var labelFont=helpers$1.options._parseFont(labelOpts);var fontSize=labelFont.size;// Reset hit boxes\nvar hitboxes=me.legendHitBoxes=[];var minSize=me.minSize;var isHorizontal=me.isHorizontal();if(isHorizontal){minSize.width=me.maxWidth;// fill all the width\nminSize.height=display?10:0;}else{minSize.width=display?10:0;minSize.height=me.maxHeight;// fill all the height\n}// Increase sizes here\nif(!display){me.width=minSize.width=me.height=minSize.height=0;return;}ctx.font=labelFont.string;if(isHorizontal){// Labels\n// Width of each line of legend boxes. Labels wrap onto multiple lines when there are too many to fit on one\nvar lineWidths=me.lineWidths=[0];var totalHeight=0;ctx.textAlign='left';ctx.textBaseline='middle';helpers$1.each(me.legendItems,function(legendItem,i){var boxWidth=getBoxWidth(labelOpts,fontSize);var width=boxWidth+fontSize/2+ctx.measureText(legendItem.text).width;if(i===0||lineWidths[lineWidths.length-1]+width+2*labelOpts.padding>minSize.width){totalHeight+=fontSize+labelOpts.padding;lineWidths[lineWidths.length-(i>0?0:1)]=0;}// Store the hitbox width and height here. Final position will be updated in `draw`\nhitboxes[i]={left:0,top:0,width:width,height:fontSize};lineWidths[lineWidths.length-1]+=width+labelOpts.padding;});minSize.height+=totalHeight;}else{var vPadding=labelOpts.padding;var columnWidths=me.columnWidths=[];var columnHeights=me.columnHeights=[];var totalWidth=labelOpts.padding;var currentColWidth=0;var currentColHeight=0;helpers$1.each(me.legendItems,function(legendItem,i){var boxWidth=getBoxWidth(labelOpts,fontSize);var itemWidth=boxWidth+fontSize/2+ctx.measureText(legendItem.text).width;// If too tall, go to new column\nif(i>0&&currentColHeight+fontSize+2*vPadding>minSize.height){totalWidth+=currentColWidth+labelOpts.padding;columnWidths.push(currentColWidth);// previous column width\ncolumnHeights.push(currentColHeight);currentColWidth=0;currentColHeight=0;}// Get max width\ncurrentColWidth=Math.max(currentColWidth,itemWidth);currentColHeight+=fontSize+vPadding;// Store the hitbox width and height here. Final position will be updated in `draw`\nhitboxes[i]={left:0,top:0,width:itemWidth,height:fontSize};});totalWidth+=currentColWidth;columnWidths.push(currentColWidth);columnHeights.push(currentColHeight);minSize.width+=totalWidth;}me.width=minSize.width;me.height=minSize.height;},afterFit:noop$1,// Shared Methods\nisHorizontal:function isHorizontal(){return this.options.position==='top'||this.options.position==='bottom';},// Actually draw the legend on the canvas\ndraw:function draw(){var me=this;var opts=me.options;var labelOpts=opts.labels;var globalDefaults=core_defaults.global;var defaultColor=globalDefaults.defaultColor;var lineDefault=globalDefaults.elements.line;var legendHeight=me.height;var columnHeights=me.columnHeights;var legendWidth=me.width;var lineWidths=me.lineWidths;if(!opts.display){return;}var rtlHelper=getRtlHelper$1(opts.rtl,me.left,me.minSize.width);var ctx=me.ctx;var fontColor=valueOrDefault$e(labelOpts.fontColor,globalDefaults.defaultFontColor);var labelFont=helpers$1.options._parseFont(labelOpts);var fontSize=labelFont.size;var cursor;// Canvas setup\nctx.textAlign=rtlHelper.textAlign('left');ctx.textBaseline='middle';ctx.lineWidth=0.5;ctx.strokeStyle=fontColor;// for strikethrough effect\nctx.fillStyle=fontColor;// render in correct colour\nctx.font=labelFont.string;var boxWidth=getBoxWidth(labelOpts,fontSize);var hitboxes=me.legendHitBoxes;// current position\nvar drawLegendBox=function drawLegendBox(x,y,legendItem){if(isNaN(boxWidth)||boxWidth<=0){return;}// Set the ctx for the box\nctx.save();var lineWidth=valueOrDefault$e(legendItem.lineWidth,lineDefault.borderWidth);ctx.fillStyle=valueOrDefault$e(legendItem.fillStyle,defaultColor);ctx.lineCap=valueOrDefault$e(legendItem.lineCap,lineDefault.borderCapStyle);ctx.lineDashOffset=valueOrDefault$e(legendItem.lineDashOffset,lineDefault.borderDashOffset);ctx.lineJoin=valueOrDefault$e(legendItem.lineJoin,lineDefault.borderJoinStyle);ctx.lineWidth=lineWidth;ctx.strokeStyle=valueOrDefault$e(legendItem.strokeStyle,defaultColor);if(ctx.setLineDash){// IE 9 and 10 do not support line dash\nctx.setLineDash(valueOrDefault$e(legendItem.lineDash,lineDefault.borderDash));}if(labelOpts&&labelOpts.usePointStyle){// Recalculate x and y for drawPoint() because its expecting\n// x and y to be center of figure (instead of top left)\nvar radius=boxWidth*Math.SQRT2/2;var centerX=rtlHelper.xPlus(x,boxWidth/2);var centerY=y+fontSize/2;// Draw pointStyle as legend symbol\nhelpers$1.canvas.drawPoint(ctx,legendItem.pointStyle,radius,centerX,centerY,legendItem.rotation);}else{// Draw box as legend symbol\nctx.fillRect(rtlHelper.leftForLtr(x,boxWidth),y,boxWidth,fontSize);if(lineWidth!==0){ctx.strokeRect(rtlHelper.leftForLtr(x,boxWidth),y,boxWidth,fontSize);}}ctx.restore();};var fillText=function fillText(x,y,legendItem,textWidth){var halfFontSize=fontSize/2;var xLeft=rtlHelper.xPlus(x,boxWidth+halfFontSize);var yMiddle=y+halfFontSize;ctx.fillText(legendItem.text,xLeft,yMiddle);if(legendItem.hidden){// Strikethrough the text if hidden\nctx.beginPath();ctx.lineWidth=2;ctx.moveTo(xLeft,yMiddle);ctx.lineTo(rtlHelper.xPlus(xLeft,textWidth),yMiddle);ctx.stroke();}};var alignmentOffset=function alignmentOffset(dimension,blockSize){switch(opts.align){case'start':return labelOpts.padding;case'end':return dimension-blockSize;default:// center\nreturn(dimension-blockSize+labelOpts.padding)/2;}};// Horizontal\nvar isHorizontal=me.isHorizontal();if(isHorizontal){cursor={x:me.left+alignmentOffset(legendWidth,lineWidths[0]),y:me.top+labelOpts.padding,line:0};}else{cursor={x:me.left+labelOpts.padding,y:me.top+alignmentOffset(legendHeight,columnHeights[0]),line:0};}helpers$1.rtl.overrideTextDirection(me.ctx,opts.textDirection);var itemHeight=fontSize+labelOpts.padding;helpers$1.each(me.legendItems,function(legendItem,i){var textWidth=ctx.measureText(legendItem.text).width;var width=boxWidth+fontSize/2+textWidth;var x=cursor.x;var y=cursor.y;rtlHelper.setWidth(me.minSize.width);// Use (me.left + me.minSize.width) and (me.top + me.minSize.height)\n// instead of me.right and me.bottom because me.width and me.height\n// may have been changed since me.minSize was calculated\nif(isHorizontal){if(i>0&&x+width+labelOpts.padding>me.left+me.minSize.width){y=cursor.y+=itemHeight;cursor.line++;x=cursor.x=me.left+alignmentOffset(legendWidth,lineWidths[cursor.line]);}}else if(i>0&&y+itemHeight>me.top+me.minSize.height){x=cursor.x=x+me.columnWidths[cursor.line]+labelOpts.padding;cursor.line++;y=cursor.y=me.top+alignmentOffset(legendHeight,columnHeights[cursor.line]);}var realX=rtlHelper.x(x);drawLegendBox(realX,y,legendItem);hitboxes[i].left=rtlHelper.leftForLtr(realX,hitboxes[i].width);hitboxes[i].top=y;// Fill the actual label\nfillText(realX,y,legendItem,textWidth);if(isHorizontal){cursor.x+=width+labelOpts.padding;}else{cursor.y+=itemHeight;}});helpers$1.rtl.restoreTextDirection(me.ctx,opts.textDirection);},/**\n\t * @private\n\t */_getLegendItemAt:function _getLegendItemAt(x,y){var me=this;var i,hitBox,lh;if(x>=me.left&&x<=me.right&&y>=me.top&&y<=me.bottom){// See if we are touching one of the dataset boxes\nlh=me.legendHitBoxes;for(i=0;i<lh.length;++i){hitBox=lh[i];if(x>=hitBox.left&&x<=hitBox.left+hitBox.width&&y>=hitBox.top&&y<=hitBox.top+hitBox.height){// Touching an element\nreturn me.legendItems[i];}}}return null;},/**\n\t * Handle an event\n\t * @private\n\t * @param {IEvent} event - The event to handle\n\t */handleEvent:function handleEvent(e){var me=this;var opts=me.options;var type=e.type==='mouseup'?'click':e.type;var hoveredItem;if(type==='mousemove'){if(!opts.onHover&&!opts.onLeave){return;}}else if(type==='click'){if(!opts.onClick){return;}}else{return;}// Chart event already has relative position in it\nhoveredItem=me._getLegendItemAt(e.x,e.y);if(type==='click'){if(hoveredItem&&opts.onClick){// use e.native for backwards compatibility\nopts.onClick.call(me,e[\"native\"],hoveredItem);}}else{if(opts.onLeave&&hoveredItem!==me._hoveredItem){if(me._hoveredItem){opts.onLeave.call(me,e[\"native\"],me._hoveredItem);}me._hoveredItem=hoveredItem;}if(opts.onHover&&hoveredItem){// use e.native for backwards compatibility\nopts.onHover.call(me,e[\"native\"],hoveredItem);}}}});function createNewLegendAndAttach(chart,legendOpts){var legend=new Legend({ctx:chart.ctx,options:legendOpts,chart:chart});core_layouts.configure(chart,legend,legendOpts);core_layouts.addBox(chart,legend);chart.legend=legend;}var plugin_legend={id:'legend',/**\n\t * Backward compatibility: since 2.1.5, the legend is registered as a plugin, making\n\t * Chart.Legend obsolete. To avoid a breaking change, we export the Legend as part of\n\t * the plugin, which one will be re-exposed in the chart.js file.\n\t * https://github.com/chartjs/Chart.js/pull/2640\n\t * @private\n\t */_element:Legend,beforeInit:function beforeInit(chart){var legendOpts=chart.options.legend;if(legendOpts){createNewLegendAndAttach(chart,legendOpts);}},beforeUpdate:function beforeUpdate(chart){var legendOpts=chart.options.legend;var legend=chart.legend;if(legendOpts){helpers$1.mergeIf(legendOpts,core_defaults.global.legend);if(legend){core_layouts.configure(chart,legend,legendOpts);legend.options=legendOpts;}else{createNewLegendAndAttach(chart,legendOpts);}}else if(legend){core_layouts.removeBox(chart,legend);delete chart.legend;}},afterEvent:function afterEvent(chart,e){var legend=chart.legend;if(legend){legend.handleEvent(e);}}};var noop$2=helpers$1.noop;core_defaults._set('global',{title:{display:false,fontStyle:'bold',fullWidth:true,padding:10,position:'top',text:'',weight:2000// by default greater than legend (1000) to be above\n}});/**\n * IMPORTANT: this class is exposed publicly as Chart.Legend, backward compatibility required!\n */var Title=core_element.extend({initialize:function initialize(config){var me=this;helpers$1.extend(me,config);// Contains hit boxes for each dataset (in dataset order)\nme.legendHitBoxes=[];},// These methods are ordered by lifecycle. Utilities then follow.\nbeforeUpdate:noop$2,update:function update(maxWidth,maxHeight,margins){var me=this;// Update Lifecycle - Probably don't want to ever extend or overwrite this function ;)\nme.beforeUpdate();// Absorb the master measurements\nme.maxWidth=maxWidth;me.maxHeight=maxHeight;me.margins=margins;// Dimensions\nme.beforeSetDimensions();me.setDimensions();me.afterSetDimensions();// Labels\nme.beforeBuildLabels();me.buildLabels();me.afterBuildLabels();// Fit\nme.beforeFit();me.fit();me.afterFit();//\nme.afterUpdate();return me.minSize;},afterUpdate:noop$2,//\nbeforeSetDimensions:noop$2,setDimensions:function setDimensions(){var me=this;// Set the unconstrained dimension before label rotation\nif(me.isHorizontal()){// Reset position before calculating rotation\nme.width=me.maxWidth;me.left=0;me.right=me.width;}else{me.height=me.maxHeight;// Reset position before calculating rotation\nme.top=0;me.bottom=me.height;}// Reset padding\nme.paddingLeft=0;me.paddingTop=0;me.paddingRight=0;me.paddingBottom=0;// Reset minSize\nme.minSize={width:0,height:0};},afterSetDimensions:noop$2,//\nbeforeBuildLabels:noop$2,buildLabels:noop$2,afterBuildLabels:noop$2,//\nbeforeFit:noop$2,fit:function fit(){var me=this;var opts=me.options;var minSize=me.minSize={};var isHorizontal=me.isHorizontal();var lineCount,textSize;if(!opts.display){me.width=minSize.width=me.height=minSize.height=0;return;}lineCount=helpers$1.isArray(opts.text)?opts.text.length:1;textSize=lineCount*helpers$1.options._parseFont(opts).lineHeight+opts.padding*2;me.width=minSize.width=isHorizontal?me.maxWidth:textSize;me.height=minSize.height=isHorizontal?textSize:me.maxHeight;},afterFit:noop$2,// Shared Methods\nisHorizontal:function isHorizontal(){var pos=this.options.position;return pos==='top'||pos==='bottom';},// Actually draw the title block on the canvas\ndraw:function draw(){var me=this;var ctx=me.ctx;var opts=me.options;if(!opts.display){return;}var fontOpts=helpers$1.options._parseFont(opts);var lineHeight=fontOpts.lineHeight;var offset=lineHeight/2+opts.padding;var rotation=0;var top=me.top;var left=me.left;var bottom=me.bottom;var right=me.right;var maxWidth,titleX,titleY;ctx.fillStyle=helpers$1.valueOrDefault(opts.fontColor,core_defaults.global.defaultFontColor);// render in correct colour\nctx.font=fontOpts.string;// Horizontal\nif(me.isHorizontal()){titleX=left+(right-left)/2;// midpoint of the width\ntitleY=top+offset;maxWidth=right-left;}else{titleX=opts.position==='left'?left+offset:right-offset;titleY=top+(bottom-top)/2;maxWidth=bottom-top;rotation=Math.PI*(opts.position==='left'?-0.5:0.5);}ctx.save();ctx.translate(titleX,titleY);ctx.rotate(rotation);ctx.textAlign='center';ctx.textBaseline='middle';var text=opts.text;if(helpers$1.isArray(text)){var y=0;for(var i=0;i<text.length;++i){ctx.fillText(text[i],0,y,maxWidth);y+=lineHeight;}}else{ctx.fillText(text,0,0,maxWidth);}ctx.restore();}});function createNewTitleBlockAndAttach(chart,titleOpts){var title=new Title({ctx:chart.ctx,options:titleOpts,chart:chart});core_layouts.configure(chart,title,titleOpts);core_layouts.addBox(chart,title);chart.titleBlock=title;}var plugin_title={id:'title',/**\n\t * Backward compatibility: since 2.1.5, the title is registered as a plugin, making\n\t * Chart.Title obsolete. To avoid a breaking change, we export the Title as part of\n\t * the plugin, which one will be re-exposed in the chart.js file.\n\t * https://github.com/chartjs/Chart.js/pull/2640\n\t * @private\n\t */_element:Title,beforeInit:function beforeInit(chart){var titleOpts=chart.options.title;if(titleOpts){createNewTitleBlockAndAttach(chart,titleOpts);}},beforeUpdate:function beforeUpdate(chart){var titleOpts=chart.options.title;var titleBlock=chart.titleBlock;if(titleOpts){helpers$1.mergeIf(titleOpts,core_defaults.global.title);if(titleBlock){core_layouts.configure(chart,titleBlock,titleOpts);titleBlock.options=titleOpts;}else{createNewTitleBlockAndAttach(chart,titleOpts);}}else if(titleBlock){core_layouts.removeBox(chart,titleBlock);delete chart.titleBlock;}}};var plugins={};var filler=plugin_filler;var legend=plugin_legend;var title=plugin_title;plugins.filler=filler;plugins.legend=legend;plugins.title=title;/**\n * @namespace Chart\n */core_controller.helpers=helpers$1;// @todo dispatch these helpers into appropriated helpers/helpers.* file and write unit tests!\ncore_helpers();core_controller._adapters=core_adapters;core_controller.Animation=core_animation;core_controller.animationService=core_animations;core_controller.controllers=controllers;core_controller.DatasetController=core_datasetController;core_controller.defaults=core_defaults;core_controller.Element=core_element;core_controller.elements=elements;core_controller.Interaction=core_interaction;core_controller.layouts=core_layouts;core_controller.platform=platform;core_controller.plugins=core_plugins;core_controller.Scale=core_scale;core_controller.scaleService=core_scaleService;core_controller.Ticks=core_ticks;core_controller.Tooltip=core_tooltip;// Register built-in scales\ncore_controller.helpers.each(scales,function(scale,type){core_controller.scaleService.registerScaleType(type,scale,scale._defaults);});// Load to register built-in adapters (as side effects)\n// Loading built-in plugins\nfor(var k in plugins){if(plugins.hasOwnProperty(k)){core_controller.plugins.register(plugins[k]);}}core_controller.platform.initialize();var src=core_controller;if(typeof window!=='undefined'){window.Chart=core_controller;}// DEPRECATIONS\n/**\n * Provided for backward compatibility, not available anymore\n * @namespace Chart.Chart\n * @deprecated since version 2.8.0\n * @todo remove at version 3\n * @private\n */core_controller.Chart=core_controller;/**\n * Provided for backward compatibility, not available anymore\n * @namespace Chart.Legend\n * @deprecated since version 2.1.5\n * @todo remove at version 3\n * @private\n */core_controller.Legend=plugins.legend._element;/**\n * Provided for backward compatibility, not available anymore\n * @namespace Chart.Title\n * @deprecated since version 2.1.5\n * @todo remove at version 3\n * @private\n */core_controller.Title=plugins.title._element;/**\n * Provided for backward compatibility, use Chart.plugins instead\n * @namespace Chart.pluginService\n * @deprecated since version 2.1.5\n * @todo remove at version 3\n * @private\n */core_controller.pluginService=core_controller.plugins;/**\n * Provided for backward compatibility, inheriting from Chart.PlugingBase has no\n * effect, instead simply create/register plugins via plain JavaScript objects.\n * @interface Chart.PluginBase\n * @deprecated since version 2.5.0\n * @todo remove at version 3\n * @private\n */core_controller.PluginBase=core_controller.Element.extend({});/**\n * Provided for backward compatibility, use Chart.helpers.canvas instead.\n * @namespace Chart.canvasHelpers\n * @deprecated since version 2.6.0\n * @todo remove at version 3\n * @private\n */core_controller.canvasHelpers=core_controller.helpers.canvas;/**\n * Provided for backward compatibility, use Chart.layouts instead.\n * @namespace Chart.layoutService\n * @deprecated since version 2.7.3\n * @todo remove at version 3\n * @private\n */core_controller.layoutService=core_controller.layouts;/**\n * Provided for backward compatibility, not available anymore.\n * @namespace Chart.LinearScaleBase\n * @deprecated since version 2.8\n * @todo remove at version 3\n * @private\n */core_controller.LinearScaleBase=scale_linearbase;/**\n * Provided for backward compatibility, instead we should create a new Chart\n * by setting the type in the config (`new Chart(id, {type: '{chart-type}'}`).\n * @deprecated since version 2.8.0\n * @todo remove at version 3\n */core_controller.helpers.each(['Bar','Bubble','Doughnut','Line','PolarArea','Radar','Scatter'],function(klass){core_controller[klass]=function(ctx,cfg){return new core_controller(ctx,core_controller.helpers.merge(cfg||{},{type:klass.charAt(0).toLowerCase()+klass.slice(1)}));};});return src;});/***/},/***/\"3886\":/***/function _(module,exports,__webpack_require__){//! moment.js locale configuration\n//! locale : English (Canada) [en-ca]\n//! author : Jonathan Abourbih : https://github.com/jonbca\n;(function(global,factory){true?factory(__webpack_require__(\"c1df\")):undefined;})(this,function(moment){'use strict';//! moment.js locale configuration\nvar enCa=moment.defineLocale('en-ca',{months:'January_February_March_April_May_June_July_August_September_October_November_December'.split('_'),monthsShort:'Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec'.split('_'),weekdays:'Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday'.split('_'),weekdaysShort:'Sun_Mon_Tue_Wed_Thu_Fri_Sat'.split('_'),weekdaysMin:'Su_Mo_Tu_We_Th_Fr_Sa'.split('_'),longDateFormat:{LT:'h:mm A',LTS:'h:mm:ss A',L:'YYYY-MM-DD',LL:'MMMM D, YYYY',LLL:'MMMM D, YYYY h:mm A',LLLL:'dddd, MMMM D, YYYY h:mm A'},calendar:{sameDay:'[Today at] LT',nextDay:'[Tomorrow at] LT',nextWeek:'dddd [at] LT',lastDay:'[Yesterday at] LT',lastWeek:'[Last] dddd [at] LT',sameElse:'L'},relativeTime:{future:'in %s',past:'%s ago',s:'a few seconds',ss:'%d seconds',m:'a minute',mm:'%d minutes',h:'an hour',hh:'%d hours',d:'a day',dd:'%d days',M:'a month',MM:'%d months',y:'a year',yy:'%d years'},dayOfMonthOrdinalParse:/\\d{1,2}(st|nd|rd|th)/,ordinal:function ordinal(number){var b=number%10,output=~~(number%100/10)===1?'th':b===1?'st':b===2?'nd':b===3?'rd':'th';return number+output;}});return enCa;});/***/},/***/\"392c\":/***/function c(module,exports,__webpack_require__){// Imports\nvar ___CSS_LOADER_API_IMPORT___=__webpack_require__(\"24fb\");var ___CSS_LOADER_AT_RULE_IMPORT_0___=__webpack_require__(\"92d9\");exports=___CSS_LOADER_API_IMPORT___(false);exports.i(___CSS_LOADER_AT_RULE_IMPORT_0___);// Module\nexports.push([module.i,\"\",\"\"]);// Exports\nmodule.exports=exports;/***/},/***/\"39a6\":/***/function a6(module,exports,__webpack_require__){//! moment.js locale configuration\n//! locale : English (United Kingdom) [en-gb]\n//! author : Chris Gedrim : https://github.com/chrisgedrim\n;(function(global,factory){true?factory(__webpack_require__(\"c1df\")):undefined;})(this,function(moment){'use strict';//! moment.js locale configuration\nvar enGb=moment.defineLocale('en-gb',{months:'January_February_March_April_May_June_July_August_September_October_November_December'.split('_'),monthsShort:'Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec'.split('_'),weekdays:'Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday'.split('_'),weekdaysShort:'Sun_Mon_Tue_Wed_Thu_Fri_Sat'.split('_'),weekdaysMin:'Su_Mo_Tu_We_Th_Fr_Sa'.split('_'),longDateFormat:{LT:'HH:mm',LTS:'HH:mm:ss',L:'DD/MM/YYYY',LL:'D MMMM YYYY',LLL:'D MMMM YYYY HH:mm',LLLL:'dddd, D MMMM YYYY HH:mm'},calendar:{sameDay:'[Today at] LT',nextDay:'[Tomorrow at] LT',nextWeek:'dddd [at] LT',lastDay:'[Yesterday at] LT',lastWeek:'[Last] dddd [at] LT',sameElse:'L'},relativeTime:{future:'in %s',past:'%s ago',s:'a few seconds',ss:'%d seconds',m:'a minute',mm:'%d minutes',h:'an hour',hh:'%d hours',d:'a day',dd:'%d days',M:'a month',MM:'%d months',y:'a year',yy:'%d years'},dayOfMonthOrdinalParse:/\\d{1,2}(st|nd|rd|th)/,ordinal:function ordinal(number){var b=number%10,output=~~(number%100/10)===1?'th':b===1?'st':b===2?'nd':b===3?'rd':'th';return number+output;},week:{dow:1,// Monday is the first day of the week.\ndoy:4// The week that contains Jan 4th is the first week of the year.\n}});return enGb;});/***/},/***/\"39bd\":/***/function bd(module,exports,__webpack_require__){//! moment.js locale configuration\n//! locale : Marathi [mr]\n//! author : Harshad Kale : https://github.com/kalehv\n//! author : Vivek Athalye : https://github.com/vnathalye\n;(function(global,factory){true?factory(__webpack_require__(\"c1df\")):undefined;})(this,function(moment){'use strict';//! moment.js locale configuration\nvar symbolMap={'1':'१','2':'२','3':'३','4':'४','5':'५','6':'६','7':'७','8':'८','9':'९','0':'०'},numberMap={'१':'1','२':'2','३':'3','४':'4','५':'5','६':'6','७':'7','८':'8','९':'9','०':'0'};function relativeTimeMr(number,withoutSuffix,string,isFuture){var output='';if(withoutSuffix){switch(string){case's':output='काही सेकंद';break;case'ss':output='%d सेकंद';break;case'm':output='एक मिनिट';break;case'mm':output='%d मिनिटे';break;case'h':output='एक तास';break;case'hh':output='%d तास';break;case'd':output='एक दिवस';break;case'dd':output='%d दिवस';break;case'M':output='एक महिना';break;case'MM':output='%d महिने';break;case'y':output='एक वर्ष';break;case'yy':output='%d वर्षे';break;}}else{switch(string){case's':output='काही सेकंदां';break;case'ss':output='%d सेकंदां';break;case'm':output='एका मिनिटा';break;case'mm':output='%d मिनिटां';break;case'h':output='एका तासा';break;case'hh':output='%d तासां';break;case'd':output='एका दिवसा';break;case'dd':output='%d दिवसां';break;case'M':output='एका महिन्या';break;case'MM':output='%d महिन्यां';break;case'y':output='एका वर्षा';break;case'yy':output='%d वर्षां';break;}}return output.replace(/%d/i,number);}var mr=moment.defineLocale('mr',{months:'जानेवारी_फेब्रुवारी_मार्च_एप्रिल_मे_जून_जुलै_ऑगस्ट_सप्टेंबर_ऑक्टोबर_नोव्हेंबर_डिसेंबर'.split('_'),monthsShort:'जाने._फेब्रु._मार्च._एप्रि._मे._जून._जुलै._ऑग._सप्टें._ऑक्टो._नोव्हें._डिसें.'.split('_'),monthsParseExact:true,weekdays:'रविवार_सोमवार_मंगळवार_बुधवार_गुरूवार_शुक्रवार_शनिवार'.split('_'),weekdaysShort:'रवि_सोम_मंगळ_बुध_गुरू_शुक्र_शनि'.split('_'),weekdaysMin:'र_सो_मं_बु_गु_शु_श'.split('_'),longDateFormat:{LT:'A h:mm वाजता',LTS:'A h:mm:ss वाजता',L:'DD/MM/YYYY',LL:'D MMMM YYYY',LLL:'D MMMM YYYY, A h:mm वाजता',LLLL:'dddd, D MMMM YYYY, A h:mm वाजता'},calendar:{sameDay:'[आज] LT',nextDay:'[उद्या] LT',nextWeek:'dddd, LT',lastDay:'[काल] LT',lastWeek:'[मागील] dddd, LT',sameElse:'L'},relativeTime:{future:'%sमध्ये',past:'%sपूर्वी',s:relativeTimeMr,ss:relativeTimeMr,m:relativeTimeMr,mm:relativeTimeMr,h:relativeTimeMr,hh:relativeTimeMr,d:relativeTimeMr,dd:relativeTimeMr,M:relativeTimeMr,MM:relativeTimeMr,y:relativeTimeMr,yy:relativeTimeMr},preparse:function preparse(string){return string.replace(/[१२३४५६७८९०]/g,function(match){return numberMap[match];});},postformat:function postformat(string){return string.replace(/\\d/g,function(match){return symbolMap[match];});},meridiemParse:/पहाटे|सकाळी|दुपारी|सायंकाळी|रात्री/,meridiemHour:function meridiemHour(hour,meridiem){if(hour===12){hour=0;}if(meridiem==='पहाटे'||meridiem==='सकाळी'){return hour;}else if(meridiem==='दुपारी'||meridiem==='सायंकाळी'||meridiem==='रात्री'){return hour>=12?hour:hour+12;}},meridiem:function meridiem(hour,minute,isLower){if(hour>=0&&hour<6){return'पहाटे';}else if(hour<12){return'सकाळी';}else if(hour<17){return'दुपारी';}else if(hour<20){return'सायंकाळी';}else{return'रात्री';}},week:{dow:0,// Sunday is the first day of the week.\ndoy:6// The week that contains Jan 6th is the first week of the year.\n}});return mr;});/***/},/***/\"3a39\":/***/function a39(module,exports,__webpack_require__){//! moment.js locale configuration\n//! locale : Nepalese [ne]\n//! author : suvash : https://github.com/suvash\n;(function(global,factory){true?factory(__webpack_require__(\"c1df\")):undefined;})(this,function(moment){'use strict';//! moment.js locale configuration\nvar symbolMap={'1':'१','2':'२','3':'३','4':'४','5':'५','6':'६','7':'७','8':'८','9':'९','0':'०'},numberMap={'१':'1','२':'2','३':'3','४':'4','५':'5','६':'6','७':'7','८':'8','९':'9','०':'0'};var ne=moment.defineLocale('ne',{months:'जनवरी_फेब्रुवरी_मार्च_अप्रिल_मई_जुन_जुलाई_अगष्ट_सेप्टेम्बर_अक्टोबर_नोभेम्बर_डिसेम्बर'.split('_'),monthsShort:'जन._फेब्रु._मार्च_अप्रि._मई_जुन_जुलाई._अग._सेप्ट._अक्टो._नोभे._डिसे.'.split('_'),monthsParseExact:true,weekdays:'आइतबार_सोमबार_मङ्गलबार_बुधबार_बिहिबार_शुक्रबार_शनिबार'.split('_'),weekdaysShort:'आइत._सोम._मङ्गल._बुध._बिहि._शुक्र._शनि.'.split('_'),weekdaysMin:'आ._सो._मं._बु._बि._शु._श.'.split('_'),weekdaysParseExact:true,longDateFormat:{LT:'Aको h:mm बजे',LTS:'Aको h:mm:ss बजे',L:'DD/MM/YYYY',LL:'D MMMM YYYY',LLL:'D MMMM YYYY, Aको h:mm बजे',LLLL:'dddd, D MMMM YYYY, Aको h:mm बजे'},preparse:function preparse(string){return string.replace(/[१२३४५६७८९०]/g,function(match){return numberMap[match];});},postformat:function postformat(string){return string.replace(/\\d/g,function(match){return symbolMap[match];});},meridiemParse:/राति|बिहान|दिउँसो|साँझ/,meridiemHour:function meridiemHour(hour,meridiem){if(hour===12){hour=0;}if(meridiem==='राति'){return hour<4?hour:hour+12;}else if(meridiem==='बिहान'){return hour;}else if(meridiem==='दिउँसो'){return hour>=10?hour:hour+12;}else if(meridiem==='साँझ'){return hour+12;}},meridiem:function meridiem(hour,minute,isLower){if(hour<3){return'राति';}else if(hour<12){return'बिहान';}else if(hour<16){return'दिउँसो';}else if(hour<20){return'साँझ';}else{return'राति';}},calendar:{sameDay:'[आज] LT',nextDay:'[भोलि] LT',nextWeek:'[आउँदो] dddd[,] LT',lastDay:'[हिजो] LT',lastWeek:'[गएको] dddd[,] LT',sameElse:'L'},relativeTime:{future:'%sमा',past:'%s अगाडि',s:'केही क्षण',ss:'%d सेकेण्ड',m:'एक मिनेट',mm:'%d मिनेट',h:'एक घण्टा',hh:'%d घण्टा',d:'एक दिन',dd:'%d दिन',M:'एक महिना',MM:'%d महिना',y:'एक बर्ष',yy:'%d बर्ष'},week:{dow:0,// Sunday is the first day of the week.\ndoy:6// The week that contains Jan 6th is the first week of the year.\n}});return ne;});/***/},/***/\"3a6c\":/***/function a6c(module,exports,__webpack_require__){//! moment.js locale configuration\n//! locale : Chinese (Macau) [zh-mo]\n//! author : Ben : https://github.com/ben-lin\n//! author : Chris Lam : https://github.com/hehachris\n//! author : Tan Yuanhong : https://github.com/le0tan\n;(function(global,factory){true?factory(__webpack_require__(\"c1df\")):undefined;})(this,function(moment){'use strict';//! moment.js locale configuration\nvar zhMo=moment.defineLocale('zh-mo',{months:'一月_二月_三月_四月_五月_六月_七月_八月_九月_十月_十一月_十二月'.split('_'),monthsShort:'1月_2月_3月_4月_5月_6月_7月_8月_9月_10月_11月_12月'.split('_'),weekdays:'星期日_星期一_星期二_星期三_星期四_星期五_星期六'.split('_'),weekdaysShort:'週日_週一_週二_週三_週四_週五_週六'.split('_'),weekdaysMin:'日_一_二_三_四_五_六'.split('_'),longDateFormat:{LT:'HH:mm',LTS:'HH:mm:ss',L:'DD/MM/YYYY',LL:'YYYY年M月D日',LLL:'YYYY年M月D日 HH:mm',LLLL:'YYYY年M月D日dddd HH:mm',l:'D/M/YYYY',ll:'YYYY年M月D日',lll:'YYYY年M月D日 HH:mm',llll:'YYYY年M月D日dddd HH:mm'},meridiemParse:/凌晨|早上|上午|中午|下午|晚上/,meridiemHour:function meridiemHour(hour,meridiem){if(hour===12){hour=0;}if(meridiem==='凌晨'||meridiem==='早上'||meridiem==='上午'){return hour;}else if(meridiem==='中午'){return hour>=11?hour:hour+12;}else if(meridiem==='下午'||meridiem==='晚上'){return hour+12;}},meridiem:function meridiem(hour,minute,isLower){var hm=hour*100+minute;if(hm<600){return'凌晨';}else if(hm<900){return'早上';}else if(hm<1130){return'上午';}else if(hm<1230){return'中午';}else if(hm<1800){return'下午';}else{return'晚上';}},calendar:{sameDay:'[今天] LT',nextDay:'[明天] LT',nextWeek:'[下]dddd LT',lastDay:'[昨天] LT',lastWeek:'[上]dddd LT',sameElse:'L'},dayOfMonthOrdinalParse:/\\d{1,2}(日|月|週)/,ordinal:function ordinal(number,period){switch(period){case'd':case'D':case'DDD':return number+'日';case'M':return number+'月';case'w':case'W':return number+'週';default:return number;}},relativeTime:{future:'%s內',past:'%s前',s:'幾秒',ss:'%d 秒',m:'1 分鐘',mm:'%d 分鐘',h:'1 小時',hh:'%d 小時',d:'1 天',dd:'%d 天',M:'1 個月',MM:'%d 個月',y:'1 年',yy:'%d 年'}});return zhMo;});/***/},/***/\"3b1b\":/***/function b1b(module,exports,__webpack_require__){//! moment.js locale configuration\n//! locale : Tajik [tg]\n//! author : Orif N. Jr. : https://github.com/orif-jr\n;(function(global,factory){true?factory(__webpack_require__(\"c1df\")):undefined;})(this,function(moment){'use strict';//! moment.js locale configuration\nvar suffixes={0:'-ум',1:'-ум',2:'-юм',3:'-юм',4:'-ум',5:'-ум',6:'-ум',7:'-ум',8:'-ум',9:'-ум',10:'-ум',12:'-ум',13:'-ум',20:'-ум',30:'-юм',40:'-ум',50:'-ум',60:'-ум',70:'-ум',80:'-ум',90:'-ум',100:'-ум'};var tg=moment.defineLocale('tg',{months:'январ_феврал_март_апрел_май_июн_июл_август_сентябр_октябр_ноябр_декабр'.split('_'),monthsShort:'янв_фев_мар_апр_май_июн_июл_авг_сен_окт_ноя_дек'.split('_'),weekdays:'якшанбе_душанбе_сешанбе_чоршанбе_панҷшанбе_ҷумъа_шанбе'.split('_'),weekdaysShort:'яшб_дшб_сшб_чшб_пшб_ҷум_шнб'.split('_'),weekdaysMin:'яш_дш_сш_чш_пш_ҷм_шб'.split('_'),longDateFormat:{LT:'HH:mm',LTS:'HH:mm:ss',L:'DD/MM/YYYY',LL:'D MMMM YYYY',LLL:'D MMMM YYYY HH:mm',LLLL:'dddd, D MMMM YYYY HH:mm'},calendar:{sameDay:'[Имрӯз соати] LT',nextDay:'[Пагоҳ соати] LT',lastDay:'[Дирӯз соати] LT',nextWeek:'dddd[и] [ҳафтаи оянда соати] LT',lastWeek:'dddd[и] [ҳафтаи гузашта соати] LT',sameElse:'L'},relativeTime:{future:'баъди %s',past:'%s пеш',s:'якчанд сония',m:'як дақиқа',mm:'%d дақиқа',h:'як соат',hh:'%d соат',d:'як рӯз',dd:'%d рӯз',M:'як моҳ',MM:'%d моҳ',y:'як сол',yy:'%d сол'},meridiemParse:/шаб|субҳ|рӯз|бегоҳ/,meridiemHour:function meridiemHour(hour,meridiem){if(hour===12){hour=0;}if(meridiem==='шаб'){return hour<4?hour:hour+12;}else if(meridiem==='субҳ'){return hour;}else if(meridiem==='рӯз'){return hour>=11?hour:hour+12;}else if(meridiem==='бегоҳ'){return hour+12;}},meridiem:function meridiem(hour,minute,isLower){if(hour<4){return'шаб';}else if(hour<11){return'субҳ';}else if(hour<16){return'рӯз';}else if(hour<19){return'бегоҳ';}else{return'шаб';}},dayOfMonthOrdinalParse:/\\d{1,2}-(ум|юм)/,ordinal:function ordinal(number){var a=number%10,b=number>=100?100:null;return number+(suffixes[number]||suffixes[a]||suffixes[b]);},week:{dow:1,// Monday is the first day of the week.\ndoy:7// The week that contains Jan 1th is the first week of the year.\n}});return tg;});/***/},/***/\"3c0d\":/***/function c0d(module,exports,__webpack_require__){//! moment.js locale configuration\n//! locale : Czech [cs]\n//! author : petrbela : https://github.com/petrbela\n;(function(global,factory){true?factory(__webpack_require__(\"c1df\")):undefined;})(this,function(moment){'use strict';//! moment.js locale configuration\nvar months='leden_únor_březen_duben_květen_červen_červenec_srpen_září_říjen_listopad_prosinec'.split('_'),monthsShort='led_úno_bře_dub_kvě_čvn_čvc_srp_zář_říj_lis_pro'.split('_'),monthsParse=[/^led/i,/^úno/i,/^bře/i,/^dub/i,/^kvě/i,/^(čvn|červen$|června)/i,/^(čvc|červenec|července)/i,/^srp/i,/^zář/i,/^říj/i,/^lis/i,/^pro/i],// NOTE: 'červen' is substring of 'červenec'; therefore 'červenec' must precede 'červen' in the regex to be fully matched.\n// Otherwise parser matches '1. červenec' as '1. červen' + 'ec'.\nmonthsRegex=/^(leden|únor|březen|duben|květen|červenec|července|červen|června|srpen|září|říjen|listopad|prosinec|led|úno|bře|dub|kvě|čvn|čvc|srp|zář|říj|lis|pro)/i;function plural(n){return n>1&&n<5&&~~(n/10)!==1;}function translate(number,withoutSuffix,key,isFuture){var result=number+' ';switch(key){case's':// a few seconds / in a few seconds / a few seconds ago\nreturn withoutSuffix||isFuture?'pár sekund':'pár sekundami';case'ss':// 9 seconds / in 9 seconds / 9 seconds ago\nif(withoutSuffix||isFuture){return result+(plural(number)?'sekundy':'sekund');}else{return result+'sekundami';}case'm':// a minute / in a minute / a minute ago\nreturn withoutSuffix?'minuta':isFuture?'minutu':'minutou';case'mm':// 9 minutes / in 9 minutes / 9 minutes ago\nif(withoutSuffix||isFuture){return result+(plural(number)?'minuty':'minut');}else{return result+'minutami';}case'h':// an hour / in an hour / an hour ago\nreturn withoutSuffix?'hodina':isFuture?'hodinu':'hodinou';case'hh':// 9 hours / in 9 hours / 9 hours ago\nif(withoutSuffix||isFuture){return result+(plural(number)?'hodiny':'hodin');}else{return result+'hodinami';}case'd':// a day / in a day / a day ago\nreturn withoutSuffix||isFuture?'den':'dnem';case'dd':// 9 days / in 9 days / 9 days ago\nif(withoutSuffix||isFuture){return result+(plural(number)?'dny':'dní');}else{return result+'dny';}case'M':// a month / in a month / a month ago\nreturn withoutSuffix||isFuture?'měsíc':'měsícem';case'MM':// 9 months / in 9 months / 9 months ago\nif(withoutSuffix||isFuture){return result+(plural(number)?'měsíce':'měsíců');}else{return result+'měsíci';}case'y':// a year / in a year / a year ago\nreturn withoutSuffix||isFuture?'rok':'rokem';case'yy':// 9 years / in 9 years / 9 years ago\nif(withoutSuffix||isFuture){return result+(plural(number)?'roky':'let');}else{return result+'lety';}}}var cs=moment.defineLocale('cs',{months:months,monthsShort:monthsShort,monthsRegex:monthsRegex,monthsShortRegex:monthsRegex,// NOTE: 'červen' is substring of 'červenec'; therefore 'červenec' must precede 'červen' in the regex to be fully matched.\n// Otherwise parser matches '1. červenec' as '1. červen' + 'ec'.\nmonthsStrictRegex:/^(leden|ledna|února|únor|březen|března|duben|dubna|květen|května|červenec|července|červen|června|srpen|srpna|září|říjen|října|listopadu|listopad|prosinec|prosince)/i,monthsShortStrictRegex:/^(led|úno|bře|dub|kvě|čvn|čvc|srp|zář|říj|lis|pro)/i,monthsParse:monthsParse,longMonthsParse:monthsParse,shortMonthsParse:monthsParse,weekdays:'neděle_pondělí_úterý_středa_čtvrtek_pátek_sobota'.split('_'),weekdaysShort:'ne_po_út_st_čt_pá_so'.split('_'),weekdaysMin:'ne_po_út_st_čt_pá_so'.split('_'),longDateFormat:{LT:'H:mm',LTS:'H:mm:ss',L:'DD.MM.YYYY',LL:'D. MMMM YYYY',LLL:'D. MMMM YYYY H:mm',LLLL:'dddd D. MMMM YYYY H:mm',l:'D. M. YYYY'},calendar:{sameDay:'[dnes v] LT',nextDay:'[zítra v] LT',nextWeek:function nextWeek(){switch(this.day()){case 0:return'[v neděli v] LT';case 1:case 2:return'[v] dddd [v] LT';case 3:return'[ve středu v] LT';case 4:return'[ve čtvrtek v] LT';case 5:return'[v pátek v] LT';case 6:return'[v sobotu v] LT';}},lastDay:'[včera v] LT',lastWeek:function lastWeek(){switch(this.day()){case 0:return'[minulou neděli v] LT';case 1:case 2:return'[minulé] dddd [v] LT';case 3:return'[minulou středu v] LT';case 4:case 5:return'[minulý] dddd [v] LT';case 6:return'[minulou sobotu v] LT';}},sameElse:'L'},relativeTime:{future:'za %s',past:'před %s',s:translate,ss:translate,m:translate,mm:translate,h:translate,hh:translate,d:translate,dd:translate,M:translate,MM:translate,y:translate,yy:translate},dayOfMonthOrdinalParse:/\\d{1,2}\\./,ordinal:'%d.',week:{dow:1,// Monday is the first day of the week.\ndoy:4// The week that contains Jan 4th is the first week of the year.\n}});return cs;});/***/},/***/\"3de5\":/***/function de5(module,exports,__webpack_require__){//! moment.js locale configuration\n//! locale : Tamil [ta]\n//! author : Arjunkumar Krishnamoorthy : https://github.com/tk120404\n;(function(global,factory){true?factory(__webpack_require__(\"c1df\")):undefined;})(this,function(moment){'use strict';//! moment.js locale configuration\nvar symbolMap={'1':'௧','2':'௨','3':'௩','4':'௪','5':'௫','6':'௬','7':'௭','8':'௮','9':'௯','0':'௦'},numberMap={'௧':'1','௨':'2','௩':'3','௪':'4','௫':'5','௬':'6','௭':'7','௮':'8','௯':'9','௦':'0'};var ta=moment.defineLocale('ta',{months:'ஜனவரி_பிப்ரவரி_மார்ச்_ஏப்ரல்_மே_ஜூன்_ஜூலை_ஆகஸ்ட்_செப்டெம்பர்_அக்டோபர்_நவம்பர்_டிசம்பர்'.split('_'),monthsShort:'ஜனவரி_பிப்ரவரி_மார்ச்_ஏப்ரல்_மே_ஜூன்_ஜூலை_ஆகஸ்ட்_செப்டெம்பர்_அக்டோபர்_நவம்பர்_டிசம்பர்'.split('_'),weekdays:'ஞாயிற்றுக்கிழமை_திங்கட்கிழமை_செவ்வாய்கிழமை_புதன்கிழமை_வியாழக்கிழமை_வெள்ளிக்கிழமை_சனிக்கிழமை'.split('_'),weekdaysShort:'ஞாயிறு_திங்கள்_செவ்வாய்_புதன்_வியாழன்_வெள்ளி_சனி'.split('_'),weekdaysMin:'ஞா_தி_செ_பு_வி_வெ_ச'.split('_'),longDateFormat:{LT:'HH:mm',LTS:'HH:mm:ss',L:'DD/MM/YYYY',LL:'D MMMM YYYY',LLL:'D MMMM YYYY, HH:mm',LLLL:'dddd, D MMMM YYYY, HH:mm'},calendar:{sameDay:'[இன்று] LT',nextDay:'[நாளை] LT',nextWeek:'dddd, LT',lastDay:'[நேற்று] LT',lastWeek:'[கடந்த வாரம்] dddd, LT',sameElse:'L'},relativeTime:{future:'%s இல்',past:'%s முன்',s:'ஒரு சில விநாடிகள்',ss:'%d விநாடிகள்',m:'ஒரு நிமிடம்',mm:'%d நிமிடங்கள்',h:'ஒரு மணி நேரம்',hh:'%d மணி நேரம்',d:'ஒரு நாள்',dd:'%d நாட்கள்',M:'ஒரு மாதம்',MM:'%d மாதங்கள்',y:'ஒரு வருடம்',yy:'%d ஆண்டுகள்'},dayOfMonthOrdinalParse:/\\d{1,2}வது/,ordinal:function ordinal(number){return number+'வது';},preparse:function preparse(string){return string.replace(/[௧௨௩௪௫௬௭௮௯௦]/g,function(match){return numberMap[match];});},postformat:function postformat(string){return string.replace(/\\d/g,function(match){return symbolMap[match];});},// refer http://ta.wikipedia.org/s/1er1\nmeridiemParse:/யாமம்|வைகறை|காலை|நண்பகல்|எற்பாடு|மாலை/,meridiem:function meridiem(hour,minute,isLower){if(hour<2){return' யாமம்';}else if(hour<6){return' வைகறை';// வைகறை\n}else if(hour<10){return' காலை';// காலை\n}else if(hour<14){return' நண்பகல்';// நண்பகல்\n}else if(hour<18){return' எற்பாடு';// எற்பாடு\n}else if(hour<22){return' மாலை';// மாலை\n}else{return' யாமம்';}},meridiemHour:function meridiemHour(hour,meridiem){if(hour===12){hour=0;}if(meridiem==='யாமம்'){return hour<2?hour:hour+12;}else if(meridiem==='வைகறை'||meridiem==='காலை'){return hour;}else if(meridiem==='நண்பகல்'){return hour>=10?hour:hour+12;}else{return hour+12;}},week:{dow:0,// Sunday is the first day of the week.\ndoy:6// The week that contains Jan 6th is the first week of the year.\n}});return ta;});/***/},/***/\"3e92\":/***/function e92(module,exports,__webpack_require__){//! moment.js locale configuration\n//! locale : Kannada [kn]\n//! author : Rajeev Naik : https://github.com/rajeevnaikte\n;(function(global,factory){true?factory(__webpack_require__(\"c1df\")):undefined;})(this,function(moment){'use strict';//! moment.js locale configuration\nvar symbolMap={'1':'೧','2':'೨','3':'೩','4':'೪','5':'೫','6':'೬','7':'೭','8':'೮','9':'೯','0':'೦'},numberMap={'೧':'1','೨':'2','೩':'3','೪':'4','೫':'5','೬':'6','೭':'7','೮':'8','೯':'9','೦':'0'};var kn=moment.defineLocale('kn',{months:'ಜನವರಿ_ಫೆಬ್ರವರಿ_ಮಾರ್ಚ್_ಏಪ್ರಿಲ್_ಮೇ_ಜೂನ್_ಜುಲೈ_ಆಗಸ್ಟ್_ಸೆಪ್ಟೆಂಬರ್_ಅಕ್ಟೋಬರ್_ನವೆಂಬರ್_ಡಿಸೆಂಬರ್'.split('_'),monthsShort:'ಜನ_ಫೆಬ್ರ_ಮಾರ್ಚ್_ಏಪ್ರಿಲ್_ಮೇ_ಜೂನ್_ಜುಲೈ_ಆಗಸ್ಟ್_ಸೆಪ್ಟೆಂ_ಅಕ್ಟೋ_ನವೆಂ_ಡಿಸೆಂ'.split('_'),monthsParseExact:true,weekdays:'ಭಾನುವಾರ_ಸೋಮವಾರ_ಮಂಗಳವಾರ_ಬುಧವಾರ_ಗುರುವಾರ_ಶುಕ್ರವಾರ_ಶನಿವಾರ'.split('_'),weekdaysShort:'ಭಾನು_ಸೋಮ_ಮಂಗಳ_ಬುಧ_ಗುರು_ಶುಕ್ರ_ಶನಿ'.split('_'),weekdaysMin:'ಭಾ_ಸೋ_ಮಂ_ಬು_ಗು_ಶು_ಶ'.split('_'),longDateFormat:{LT:'A h:mm',LTS:'A h:mm:ss',L:'DD/MM/YYYY',LL:'D MMMM YYYY',LLL:'D MMMM YYYY, A h:mm',LLLL:'dddd, D MMMM YYYY, A h:mm'},calendar:{sameDay:'[ಇಂದು] LT',nextDay:'[ನಾಳೆ] LT',nextWeek:'dddd, LT',lastDay:'[ನಿನ್ನೆ] LT',lastWeek:'[ಕೊನೆಯ] dddd, LT',sameElse:'L'},relativeTime:{future:'%s ನಂತರ',past:'%s ಹಿಂದೆ',s:'ಕೆಲವು ಕ್ಷಣಗಳು',ss:'%d ಸೆಕೆಂಡುಗಳು',m:'ಒಂದು ನಿಮಿಷ',mm:'%d ನಿಮಿಷ',h:'ಒಂದು ಗಂಟೆ',hh:'%d ಗಂಟೆ',d:'ಒಂದು ದಿನ',dd:'%d ದಿನ',M:'ಒಂದು ತಿಂಗಳು',MM:'%d ತಿಂಗಳು',y:'ಒಂದು ವರ್ಷ',yy:'%d ವರ್ಷ'},preparse:function preparse(string){return string.replace(/[೧೨೩೪೫೬೭೮೯೦]/g,function(match){return numberMap[match];});},postformat:function postformat(string){return string.replace(/\\d/g,function(match){return symbolMap[match];});},meridiemParse:/ರಾತ್ರಿ|ಬೆಳಿಗ್ಗೆ|ಮಧ್ಯಾಹ್ನ|ಸಂಜೆ/,meridiemHour:function meridiemHour(hour,meridiem){if(hour===12){hour=0;}if(meridiem==='ರಾತ್ರಿ'){return hour<4?hour:hour+12;}else if(meridiem==='ಬೆಳಿಗ್ಗೆ'){return hour;}else if(meridiem==='ಮಧ್ಯಾಹ್ನ'){return hour>=10?hour:hour+12;}else if(meridiem==='ಸಂಜೆ'){return hour+12;}},meridiem:function meridiem(hour,minute,isLower){if(hour<4){return'ರಾತ್ರಿ';}else if(hour<10){return'ಬೆಳಿಗ್ಗೆ';}else if(hour<17){return'ಮಧ್ಯಾಹ್ನ';}else if(hour<20){return'ಸಂಜೆ';}else{return'ರಾತ್ರಿ';}},dayOfMonthOrdinalParse:/\\d{1,2}(ನೇ)/,ordinal:function ordinal(number){return number+'ನೇ';},week:{dow:0,// Sunday is the first day of the week.\ndoy:6// The week that contains Jan 6th is the first week of the year.\n}});return kn;});/***/},/***/\"423e\":/***/function e(module,exports,__webpack_require__){//! moment.js locale configuration\n//! locale : Arabic (Kuwait) [ar-kw]\n//! author : Nusret Parlak: https://github.com/nusretparlak\n;(function(global,factory){true?factory(__webpack_require__(\"c1df\")):undefined;})(this,function(moment){'use strict';//! moment.js locale configuration\nvar arKw=moment.defineLocale('ar-kw',{months:'يناير_فبراير_مارس_أبريل_ماي_يونيو_يوليوز_غشت_شتنبر_أكتوبر_نونبر_دجنبر'.split('_'),monthsShort:'يناير_فبراير_مارس_أبريل_ماي_يونيو_يوليوز_غشت_شتنبر_أكتوبر_نونبر_دجنبر'.split('_'),weekdays:'الأحد_الإتنين_الثلاثاء_الأربعاء_الخميس_الجمعة_السبت'.split('_'),weekdaysShort:'احد_اتنين_ثلاثاء_اربعاء_خميس_جمعة_سبت'.split('_'),weekdaysMin:'ح_ن_ث_ر_خ_ج_س'.split('_'),weekdaysParseExact:true,longDateFormat:{LT:'HH:mm',LTS:'HH:mm:ss',L:'DD/MM/YYYY',LL:'D MMMM YYYY',LLL:'D MMMM YYYY HH:mm',LLLL:'dddd D MMMM YYYY HH:mm'},calendar:{sameDay:'[اليوم على الساعة] LT',nextDay:'[غدا على الساعة] LT',nextWeek:'dddd [على الساعة] LT',lastDay:'[أمس على الساعة] LT',lastWeek:'dddd [على الساعة] LT',sameElse:'L'},relativeTime:{future:'في %s',past:'منذ %s',s:'ثوان',ss:'%d ثانية',m:'دقيقة',mm:'%d دقائق',h:'ساعة',hh:'%d ساعات',d:'يوم',dd:'%d أيام',M:'شهر',MM:'%d أشهر',y:'سنة',yy:'%d سنوات'},week:{dow:0,// Sunday is the first day of the week.\ndoy:12// The week that contains Jan 12th is the first week of the year.\n}});return arKw;});/***/},/***/\"440c\":/***/function c(module,exports,__webpack_require__){//! moment.js locale configuration\n//! locale : Luxembourgish [lb]\n//! author : mweimerskirch : https://github.com/mweimerskirch\n//! author : David Raison : https://github.com/kwisatz\n;(function(global,factory){true?factory(__webpack_require__(\"c1df\")):undefined;})(this,function(moment){'use strict';//! moment.js locale configuration\nfunction processRelativeTime(number,withoutSuffix,key,isFuture){var format={m:['eng Minutt','enger Minutt'],h:['eng Stonn','enger Stonn'],d:['een Dag','engem Dag'],M:['ee Mount','engem Mount'],y:['ee Joer','engem Joer']};return withoutSuffix?format[key][0]:format[key][1];}function processFutureTime(string){var number=string.substr(0,string.indexOf(' '));if(eifelerRegelAppliesToNumber(number)){return'a '+string;}return'an '+string;}function processPastTime(string){var number=string.substr(0,string.indexOf(' '));if(eifelerRegelAppliesToNumber(number)){return'viru '+string;}return'virun '+string;}/**\n     * Returns true if the word before the given number loses the '-n' ending.\n     * e.g. 'an 10 Deeg' but 'a 5 Deeg'\n     *\n     * @param number {integer}\n     * @returns {boolean}\n     */function eifelerRegelAppliesToNumber(number){number=parseInt(number,10);if(isNaN(number)){return false;}if(number<0){// Negative Number --> always true\nreturn true;}else if(number<10){// Only 1 digit\nif(4<=number&&number<=7){return true;}return false;}else if(number<100){// 2 digits\nvar lastDigit=number%10,firstDigit=number/10;if(lastDigit===0){return eifelerRegelAppliesToNumber(firstDigit);}return eifelerRegelAppliesToNumber(lastDigit);}else if(number<10000){// 3 or 4 digits --> recursively check first digit\nwhile(number>=10){number=number/10;}return eifelerRegelAppliesToNumber(number);}else{// Anything larger than 4 digits: recursively check first n-3 digits\nnumber=number/1000;return eifelerRegelAppliesToNumber(number);}}var lb=moment.defineLocale('lb',{months:'Januar_Februar_Mäerz_Abrëll_Mee_Juni_Juli_August_September_Oktober_November_Dezember'.split('_'),monthsShort:'Jan._Febr._Mrz._Abr._Mee_Jun._Jul._Aug._Sept._Okt._Nov._Dez.'.split('_'),monthsParseExact:true,weekdays:'Sonndeg_Méindeg_Dënschdeg_Mëttwoch_Donneschdeg_Freideg_Samschdeg'.split('_'),weekdaysShort:'So._Mé._Dë._Më._Do._Fr._Sa.'.split('_'),weekdaysMin:'So_Mé_Dë_Më_Do_Fr_Sa'.split('_'),weekdaysParseExact:true,longDateFormat:{LT:'H:mm [Auer]',LTS:'H:mm:ss [Auer]',L:'DD.MM.YYYY',LL:'D. MMMM YYYY',LLL:'D. MMMM YYYY H:mm [Auer]',LLLL:'dddd, D. MMMM YYYY H:mm [Auer]'},calendar:{sameDay:'[Haut um] LT',sameElse:'L',nextDay:'[Muer um] LT',nextWeek:'dddd [um] LT',lastDay:'[Gëschter um] LT',lastWeek:function lastWeek(){// Different date string for 'Dënschdeg' (Tuesday) and 'Donneschdeg' (Thursday) due to phonological rule\nswitch(this.day()){case 2:case 4:return'[Leschten] dddd [um] LT';default:return'[Leschte] dddd [um] LT';}}},relativeTime:{future:processFutureTime,past:processPastTime,s:'e puer Sekonnen',ss:'%d Sekonnen',m:processRelativeTime,mm:'%d Minutten',h:processRelativeTime,hh:'%d Stonnen',d:processRelativeTime,dd:'%d Deeg',M:processRelativeTime,MM:'%d Méint',y:processRelativeTime,yy:'%d Joer'},dayOfMonthOrdinalParse:/\\d{1,2}\\./,ordinal:'%d.',week:{dow:1,// Monday is the first day of the week.\ndoy:4// The week that contains Jan 4th is the first week of the year.\n}});return lb;});/***/},/***/\"4678\":/***/function _(module,exports,__webpack_require__){var map={\"./af\":\"2bfb\",\"./af.js\":\"2bfb\",\"./ar\":\"8e73\",\"./ar-dz\":\"a356\",\"./ar-dz.js\":\"a356\",\"./ar-kw\":\"423e\",\"./ar-kw.js\":\"423e\",\"./ar-ly\":\"1cfd\",\"./ar-ly.js\":\"1cfd\",\"./ar-ma\":\"0a84\",\"./ar-ma.js\":\"0a84\",\"./ar-sa\":\"8230\",\"./ar-sa.js\":\"8230\",\"./ar-tn\":\"6d83\",\"./ar-tn.js\":\"6d83\",\"./ar.js\":\"8e73\",\"./az\":\"485c\",\"./az.js\":\"485c\",\"./be\":\"1fc1\",\"./be.js\":\"1fc1\",\"./bg\":\"84aa\",\"./bg.js\":\"84aa\",\"./bm\":\"a7fa\",\"./bm.js\":\"a7fa\",\"./bn\":\"9043\",\"./bn.js\":\"9043\",\"./bo\":\"d26a\",\"./bo.js\":\"d26a\",\"./br\":\"6887\",\"./br.js\":\"6887\",\"./bs\":\"2554\",\"./bs.js\":\"2554\",\"./ca\":\"d716\",\"./ca.js\":\"d716\",\"./cs\":\"3c0d\",\"./cs.js\":\"3c0d\",\"./cv\":\"03ec\",\"./cv.js\":\"03ec\",\"./cy\":\"9797\",\"./cy.js\":\"9797\",\"./da\":\"0f14\",\"./da.js\":\"0f14\",\"./de\":\"b469\",\"./de-at\":\"b3eb\",\"./de-at.js\":\"b3eb\",\"./de-ch\":\"bb71\",\"./de-ch.js\":\"bb71\",\"./de.js\":\"b469\",\"./dv\":\"598a\",\"./dv.js\":\"598a\",\"./el\":\"8d47\",\"./el.js\":\"8d47\",\"./en-au\":\"0e6b\",\"./en-au.js\":\"0e6b\",\"./en-ca\":\"3886\",\"./en-ca.js\":\"3886\",\"./en-gb\":\"39a6\",\"./en-gb.js\":\"39a6\",\"./en-ie\":\"e1d3\",\"./en-ie.js\":\"e1d3\",\"./en-il\":\"7333\",\"./en-il.js\":\"7333\",\"./en-in\":\"ec2e\",\"./en-in.js\":\"ec2e\",\"./en-nz\":\"6f50\",\"./en-nz.js\":\"6f50\",\"./en-sg\":\"b7e9\",\"./en-sg.js\":\"b7e9\",\"./eo\":\"65db\",\"./eo.js\":\"65db\",\"./es\":\"898b\",\"./es-do\":\"0a3c\",\"./es-do.js\":\"0a3c\",\"./es-us\":\"55c9\",\"./es-us.js\":\"55c9\",\"./es.js\":\"898b\",\"./et\":\"ec18\",\"./et.js\":\"ec18\",\"./eu\":\"0ff2\",\"./eu.js\":\"0ff2\",\"./fa\":\"8df4\",\"./fa.js\":\"8df4\",\"./fi\":\"81e9\",\"./fi.js\":\"81e9\",\"./fil\":\"d69a\",\"./fil.js\":\"d69a\",\"./fo\":\"0721\",\"./fo.js\":\"0721\",\"./fr\":\"9f26\",\"./fr-ca\":\"d9f8\",\"./fr-ca.js\":\"d9f8\",\"./fr-ch\":\"0e49\",\"./fr-ch.js\":\"0e49\",\"./fr.js\":\"9f26\",\"./fy\":\"7118\",\"./fy.js\":\"7118\",\"./ga\":\"5120\",\"./ga.js\":\"5120\",\"./gd\":\"f6b4\",\"./gd.js\":\"f6b4\",\"./gl\":\"8840\",\"./gl.js\":\"8840\",\"./gom-deva\":\"aaf2\",\"./gom-deva.js\":\"aaf2\",\"./gom-latn\":\"0caa\",\"./gom-latn.js\":\"0caa\",\"./gu\":\"e0c5\",\"./gu.js\":\"e0c5\",\"./he\":\"c7aa\",\"./he.js\":\"c7aa\",\"./hi\":\"dc4d\",\"./hi.js\":\"dc4d\",\"./hr\":\"4ba9\",\"./hr.js\":\"4ba9\",\"./hu\":\"5b14\",\"./hu.js\":\"5b14\",\"./hy-am\":\"d6b6\",\"./hy-am.js\":\"d6b6\",\"./id\":\"5038\",\"./id.js\":\"5038\",\"./is\":\"0558\",\"./is.js\":\"0558\",\"./it\":\"6e98\",\"./it-ch\":\"6f12\",\"./it-ch.js\":\"6f12\",\"./it.js\":\"6e98\",\"./ja\":\"079e\",\"./ja.js\":\"079e\",\"./jv\":\"b540\",\"./jv.js\":\"b540\",\"./ka\":\"201b\",\"./ka.js\":\"201b\",\"./kk\":\"6d79\",\"./kk.js\":\"6d79\",\"./km\":\"e81d\",\"./km.js\":\"e81d\",\"./kn\":\"3e92\",\"./kn.js\":\"3e92\",\"./ko\":\"22f8\",\"./ko.js\":\"22f8\",\"./ku\":\"2421\",\"./ku.js\":\"2421\",\"./ky\":\"9609\",\"./ky.js\":\"9609\",\"./lb\":\"440c\",\"./lb.js\":\"440c\",\"./lo\":\"b29d\",\"./lo.js\":\"b29d\",\"./lt\":\"26f9\",\"./lt.js\":\"26f9\",\"./lv\":\"b97c\",\"./lv.js\":\"b97c\",\"./me\":\"293c\",\"./me.js\":\"293c\",\"./mi\":\"688b\",\"./mi.js\":\"688b\",\"./mk\":\"6909\",\"./mk.js\":\"6909\",\"./ml\":\"02fb\",\"./ml.js\":\"02fb\",\"./mn\":\"958b\",\"./mn.js\":\"958b\",\"./mr\":\"39bd\",\"./mr.js\":\"39bd\",\"./ms\":\"ebe4\",\"./ms-my\":\"6403\",\"./ms-my.js\":\"6403\",\"./ms.js\":\"ebe4\",\"./mt\":\"1b45\",\"./mt.js\":\"1b45\",\"./my\":\"8689\",\"./my.js\":\"8689\",\"./nb\":\"6ce3\",\"./nb.js\":\"6ce3\",\"./ne\":\"3a39\",\"./ne.js\":\"3a39\",\"./nl\":\"facd\",\"./nl-be\":\"db29\",\"./nl-be.js\":\"db29\",\"./nl.js\":\"facd\",\"./nn\":\"b84c\",\"./nn.js\":\"b84c\",\"./oc-lnc\":\"167b\",\"./oc-lnc.js\":\"167b\",\"./pa-in\":\"f3ff\",\"./pa-in.js\":\"f3ff\",\"./pl\":\"8d57\",\"./pl.js\":\"8d57\",\"./pt\":\"f260\",\"./pt-br\":\"d2d4\",\"./pt-br.js\":\"d2d4\",\"./pt.js\":\"f260\",\"./ro\":\"972c\",\"./ro.js\":\"972c\",\"./ru\":\"957c\",\"./ru.js\":\"957c\",\"./sd\":\"6784\",\"./sd.js\":\"6784\",\"./se\":\"ffff\",\"./se.js\":\"ffff\",\"./si\":\"eda5\",\"./si.js\":\"eda5\",\"./sk\":\"7be6\",\"./sk.js\":\"7be6\",\"./sl\":\"8155\",\"./sl.js\":\"8155\",\"./sq\":\"c8f3\",\"./sq.js\":\"c8f3\",\"./sr\":\"cf1e\",\"./sr-cyrl\":\"13e9\",\"./sr-cyrl.js\":\"13e9\",\"./sr.js\":\"cf1e\",\"./ss\":\"52bd\",\"./ss.js\":\"52bd\",\"./sv\":\"5fbd\",\"./sv.js\":\"5fbd\",\"./sw\":\"74dc\",\"./sw.js\":\"74dc\",\"./ta\":\"3de5\",\"./ta.js\":\"3de5\",\"./te\":\"5cbb\",\"./te.js\":\"5cbb\",\"./tet\":\"576c\",\"./tet.js\":\"576c\",\"./tg\":\"3b1b\",\"./tg.js\":\"3b1b\",\"./th\":\"10e8\",\"./th.js\":\"10e8\",\"./tk\":\"5aff\",\"./tk.js\":\"5aff\",\"./tl-ph\":\"0f38\",\"./tl-ph.js\":\"0f38\",\"./tlh\":\"cf75\",\"./tlh.js\":\"cf75\",\"./tr\":\"0e81\",\"./tr.js\":\"0e81\",\"./tzl\":\"cf51\",\"./tzl.js\":\"cf51\",\"./tzm\":\"c109\",\"./tzm-latn\":\"b53d\",\"./tzm-latn.js\":\"b53d\",\"./tzm.js\":\"c109\",\"./ug-cn\":\"6117\",\"./ug-cn.js\":\"6117\",\"./uk\":\"ada2\",\"./uk.js\":\"ada2\",\"./ur\":\"5294\",\"./ur.js\":\"5294\",\"./uz\":\"2e8c\",\"./uz-latn\":\"010e\",\"./uz-latn.js\":\"010e\",\"./uz.js\":\"2e8c\",\"./vi\":\"2921\",\"./vi.js\":\"2921\",\"./x-pseudo\":\"fd7e\",\"./x-pseudo.js\":\"fd7e\",\"./yo\":\"7f33\",\"./yo.js\":\"7f33\",\"./zh-cn\":\"5c3a\",\"./zh-cn.js\":\"5c3a\",\"./zh-hk\":\"49ab\",\"./zh-hk.js\":\"49ab\",\"./zh-mo\":\"3a6c\",\"./zh-mo.js\":\"3a6c\",\"./zh-tw\":\"90ea\",\"./zh-tw.js\":\"90ea\"};function webpackContext(req){var id=webpackContextResolve(req);return __webpack_require__(id);}function webpackContextResolve(req){if(!__webpack_require__.o(map,req)){var e=new Error(\"Cannot find module '\"+req+\"'\");e.code='MODULE_NOT_FOUND';throw e;}return map[req];}webpackContext.keys=function webpackContextKeys(){return Object.keys(map);};webpackContext.resolve=webpackContextResolve;module.exports=webpackContext;webpackContext.id=\"4678\";/***/},/***/\"485c\":/***/function c(module,exports,__webpack_require__){//! moment.js locale configuration\n//! locale : Azerbaijani [az]\n//! author : topchiyev : https://github.com/topchiyev\n;(function(global,factory){true?factory(__webpack_require__(\"c1df\")):undefined;})(this,function(moment){'use strict';//! moment.js locale configuration\nvar suffixes={1:'-inci',5:'-inci',8:'-inci',70:'-inci',80:'-inci',2:'-nci',7:'-nci',20:'-nci',50:'-nci',3:'-üncü',4:'-üncü',100:'-üncü',6:'-ncı',9:'-uncu',10:'-uncu',30:'-uncu',60:'-ıncı',90:'-ıncı'};var az=moment.defineLocale('az',{months:'yanvar_fevral_mart_aprel_may_iyun_iyul_avqust_sentyabr_oktyabr_noyabr_dekabr'.split('_'),monthsShort:'yan_fev_mar_apr_may_iyn_iyl_avq_sen_okt_noy_dek'.split('_'),weekdays:'Bazar_Bazar ertəsi_Çərşənbə axşamı_Çərşənbə_Cümə axşamı_Cümə_Şənbə'.split('_'),weekdaysShort:'Baz_BzE_ÇAx_Çər_CAx_Cüm_Şən'.split('_'),weekdaysMin:'Bz_BE_ÇA_Çə_CA_Cü_Şə'.split('_'),weekdaysParseExact:true,longDateFormat:{LT:'HH:mm',LTS:'HH:mm:ss',L:'DD.MM.YYYY',LL:'D MMMM YYYY',LLL:'D MMMM YYYY HH:mm',LLLL:'dddd, D MMMM YYYY HH:mm'},calendar:{sameDay:'[bugün saat] LT',nextDay:'[sabah saat] LT',nextWeek:'[gələn həftə] dddd [saat] LT',lastDay:'[dünən] LT',lastWeek:'[keçən həftə] dddd [saat] LT',sameElse:'L'},relativeTime:{future:'%s sonra',past:'%s əvvəl',s:'birneçə saniyə',ss:'%d saniyə',m:'bir dəqiqə',mm:'%d dəqiqə',h:'bir saat',hh:'%d saat',d:'bir gün',dd:'%d gün',M:'bir ay',MM:'%d ay',y:'bir il',yy:'%d il'},meridiemParse:/gecə|səhər|gündüz|axşam/,isPM:function isPM(input){return /^(gündüz|axşam)$/.test(input);},meridiem:function meridiem(hour,minute,isLower){if(hour<4){return'gecə';}else if(hour<12){return'səhər';}else if(hour<17){return'gündüz';}else{return'axşam';}},dayOfMonthOrdinalParse:/\\d{1,2}-(ıncı|inci|nci|üncü|ncı|uncu)/,ordinal:function ordinal(number){if(number===0){// special case for zero\nreturn number+'-ıncı';}var a=number%10,b=number%100-a,c=number>=100?100:null;return number+(suffixes[a]||suffixes[b]||suffixes[c]);},week:{dow:1,// Monday is the first day of the week.\ndoy:7// The week that contains Jan 7th is the first week of the year.\n}});return az;});/***/},/***/\"499e\":/***/function e(module,__webpack_exports__,__webpack_require__){\"use strict\";// ESM COMPAT FLAG\n__webpack_require__.r(__webpack_exports__);// EXPORTS\n__webpack_require__.d(__webpack_exports__,\"default\",function(){return(/* binding */addStylesClient);});// CONCATENATED MODULE: ./node_modules/vue-style-loader/lib/listToStyles.js\n/**\n * Translates the list format produced by css-loader into something\n * easier to manipulate.\n */function listToStyles(parentId,list){var styles=[];var newStyles={};for(var i=0;i<list.length;i++){var item=list[i];var id=item[0];var css=item[1];var media=item[2];var sourceMap=item[3];var part={id:parentId+':'+i,css:css,media:media,sourceMap:sourceMap};if(!newStyles[id]){styles.push(newStyles[id]={id:id,parts:[part]});}else{newStyles[id].parts.push(part);}}return styles;}// CONCATENATED MODULE: ./node_modules/vue-style-loader/lib/addStylesClient.js\n/*\n  MIT License http://www.opensource.org/licenses/mit-license.php\n  Author Tobias Koppers @sokra\n  Modified by Evan You @yyx990803\n*/var hasDocument=typeof document!=='undefined';if(typeof DEBUG!=='undefined'&&DEBUG){if(!hasDocument){throw new Error('vue-style-loader cannot be used in a non-browser environment. '+\"Use { target: 'node' } in your Webpack config to indicate a server-rendering environment.\");}}/*\ntype StyleObject = {\n  id: number;\n  parts: Array<StyleObjectPart>\n}\n\ntype StyleObjectPart = {\n  css: string;\n  media: string;\n  sourceMap: ?string\n}\n*/var stylesInDom={/*\n  [id: number]: {\n    id: number,\n    refs: number,\n    parts: Array<(obj?: StyleObjectPart) => void>\n  }\n*/};var head=hasDocument&&(document.head||document.getElementsByTagName('head')[0]);var singletonElement=null;var singletonCounter=0;var isProduction=false;var noop=function noop(){};var options=null;var ssrIdKey='data-vue-ssr-id';// Force single-tag solution on IE6-9, which has a hard limit on the # of <style>\n// tags it will allow on a page\nvar isOldIE=typeof navigator!=='undefined'&&/msie [6-9]\\b/.test(navigator.userAgent.toLowerCase());function addStylesClient(parentId,list,_isProduction,_options){isProduction=_isProduction;options=_options||{};var styles=listToStyles(parentId,list);addStylesToDom(styles);return function update(newList){var mayRemove=[];for(var i=0;i<styles.length;i++){var item=styles[i];var domStyle=stylesInDom[item.id];domStyle.refs--;mayRemove.push(domStyle);}if(newList){styles=listToStyles(parentId,newList);addStylesToDom(styles);}else{styles=[];}for(var i=0;i<mayRemove.length;i++){var domStyle=mayRemove[i];if(domStyle.refs===0){for(var j=0;j<domStyle.parts.length;j++){domStyle.parts[j]();}delete stylesInDom[domStyle.id];}}};}function addStylesToDom(styles/* Array<StyleObject> */){for(var i=0;i<styles.length;i++){var item=styles[i];var domStyle=stylesInDom[item.id];if(domStyle){domStyle.refs++;for(var j=0;j<domStyle.parts.length;j++){domStyle.parts[j](item.parts[j]);}for(;j<item.parts.length;j++){domStyle.parts.push(addStyle(item.parts[j]));}if(domStyle.parts.length>item.parts.length){domStyle.parts.length=item.parts.length;}}else{var parts=[];for(var j=0;j<item.parts.length;j++){parts.push(addStyle(item.parts[j]));}stylesInDom[item.id]={id:item.id,refs:1,parts:parts};}}}function createStyleElement(){var styleElement=document.createElement('style');styleElement.type='text/css';head.appendChild(styleElement);return styleElement;}function addStyle(obj/* StyleObjectPart */){var update,remove;var styleElement=document.querySelector('style['+ssrIdKey+'~=\"'+obj.id+'\"]');if(styleElement){if(isProduction){// has SSR styles and in production mode.\n// simply do nothing.\nreturn noop;}else{// has SSR styles but in dev mode.\n// for some reason Chrome can't handle source map in server-rendered\n// style tags - source maps in <style> only works if the style tag is\n// created and inserted dynamically. So we remove the server rendered\n// styles and inject new ones.\nstyleElement.parentNode.removeChild(styleElement);}}if(isOldIE){// use singleton mode for IE9.\nvar styleIndex=singletonCounter++;styleElement=singletonElement||(singletonElement=createStyleElement());update=applyToSingletonTag.bind(null,styleElement,styleIndex,false);remove=applyToSingletonTag.bind(null,styleElement,styleIndex,true);}else{// use multi-style-tag mode in all other cases\nstyleElement=createStyleElement();update=applyToTag.bind(null,styleElement);remove=function remove(){styleElement.parentNode.removeChild(styleElement);};}update(obj);return function updateStyle(newObj/* StyleObjectPart */){if(newObj){if(newObj.css===obj.css&&newObj.media===obj.media&&newObj.sourceMap===obj.sourceMap){return;}update(obj=newObj);}else{remove();}};}var replaceText=function(){var textStore=[];return function(index,replacement){textStore[index]=replacement;return textStore.filter(Boolean).join('\\n');};}();function applyToSingletonTag(styleElement,index,remove,obj){var css=remove?'':obj.css;if(styleElement.styleSheet){styleElement.styleSheet.cssText=replaceText(index,css);}else{var cssNode=document.createTextNode(css);var childNodes=styleElement.childNodes;if(childNodes[index])styleElement.removeChild(childNodes[index]);if(childNodes.length){styleElement.insertBefore(cssNode,childNodes[index]);}else{styleElement.appendChild(cssNode);}}}function applyToTag(styleElement,obj){var css=obj.css;var media=obj.media;var sourceMap=obj.sourceMap;if(media){styleElement.setAttribute('media',media);}if(options.ssrId){styleElement.setAttribute(ssrIdKey,obj.id);}if(sourceMap){// https://developer.chrome.com/devtools/docs/javascript-debugging\n// this makes source maps inside style tags work properly in Chrome\ncss+='\\n/*# sourceURL='+sourceMap.sources[0]+' */';// http://stackoverflow.com/a/26603875\ncss+='\\n/*# sourceMappingURL=data:application/json;base64,'+btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap))))+' */';}if(styleElement.styleSheet){styleElement.styleSheet.cssText=css;}else{while(styleElement.firstChild){styleElement.removeChild(styleElement.firstChild);}styleElement.appendChild(document.createTextNode(css));}}/***/},/***/\"49ab\":/***/function ab(module,exports,__webpack_require__){//! moment.js locale configuration\n//! locale : Chinese (Hong Kong) [zh-hk]\n//! author : Ben : https://github.com/ben-lin\n//! author : Chris Lam : https://github.com/hehachris\n//! author : Konstantin : https://github.com/skfd\n//! author : Anthony : https://github.com/anthonylau\n;(function(global,factory){true?factory(__webpack_require__(\"c1df\")):undefined;})(this,function(moment){'use strict';//! moment.js locale configuration\nvar zhHk=moment.defineLocale('zh-hk',{months:'一月_二月_三月_四月_五月_六月_七月_八月_九月_十月_十一月_十二月'.split('_'),monthsShort:'1月_2月_3月_4月_5月_6月_7月_8月_9月_10月_11月_12月'.split('_'),weekdays:'星期日_星期一_星期二_星期三_星期四_星期五_星期六'.split('_'),weekdaysShort:'週日_週一_週二_週三_週四_週五_週六'.split('_'),weekdaysMin:'日_一_二_三_四_五_六'.split('_'),longDateFormat:{LT:'HH:mm',LTS:'HH:mm:ss',L:'YYYY/MM/DD',LL:'YYYY年M月D日',LLL:'YYYY年M月D日 HH:mm',LLLL:'YYYY年M月D日dddd HH:mm',l:'YYYY/M/D',ll:'YYYY年M月D日',lll:'YYYY年M月D日 HH:mm',llll:'YYYY年M月D日dddd HH:mm'},meridiemParse:/凌晨|早上|上午|中午|下午|晚上/,meridiemHour:function meridiemHour(hour,meridiem){if(hour===12){hour=0;}if(meridiem==='凌晨'||meridiem==='早上'||meridiem==='上午'){return hour;}else if(meridiem==='中午'){return hour>=11?hour:hour+12;}else if(meridiem==='下午'||meridiem==='晚上'){return hour+12;}},meridiem:function meridiem(hour,minute,isLower){var hm=hour*100+minute;if(hm<600){return'凌晨';}else if(hm<900){return'早上';}else if(hm<1200){return'上午';}else if(hm===1200){return'中午';}else if(hm<1800){return'下午';}else{return'晚上';}},calendar:{sameDay:'[今天]LT',nextDay:'[明天]LT',nextWeek:'[下]ddddLT',lastDay:'[昨天]LT',lastWeek:'[上]ddddLT',sameElse:'L'},dayOfMonthOrdinalParse:/\\d{1,2}(日|月|週)/,ordinal:function ordinal(number,period){switch(period){case'd':case'D':case'DDD':return number+'日';case'M':return number+'月';case'w':case'W':return number+'週';default:return number;}},relativeTime:{future:'%s後',past:'%s前',s:'幾秒',ss:'%d 秒',m:'1 分鐘',mm:'%d 分鐘',h:'1 小時',hh:'%d 小時',d:'1 天',dd:'%d 天',M:'1 個月',MM:'%d 個月',y:'1 年',yy:'%d 年'}});return zhHk;});/***/},/***/\"4ba9\":/***/function ba9(module,exports,__webpack_require__){//! moment.js locale configuration\n//! locale : Croatian [hr]\n//! author : Bojan Marković : https://github.com/bmarkovic\n;(function(global,factory){true?factory(__webpack_require__(\"c1df\")):undefined;})(this,function(moment){'use strict';//! moment.js locale configuration\nfunction translate(number,withoutSuffix,key){var result=number+' ';switch(key){case'ss':if(number===1){result+='sekunda';}else if(number===2||number===3||number===4){result+='sekunde';}else{result+='sekundi';}return result;case'm':return withoutSuffix?'jedna minuta':'jedne minute';case'mm':if(number===1){result+='minuta';}else if(number===2||number===3||number===4){result+='minute';}else{result+='minuta';}return result;case'h':return withoutSuffix?'jedan sat':'jednog sata';case'hh':if(number===1){result+='sat';}else if(number===2||number===3||number===4){result+='sata';}else{result+='sati';}return result;case'dd':if(number===1){result+='dan';}else{result+='dana';}return result;case'MM':if(number===1){result+='mjesec';}else if(number===2||number===3||number===4){result+='mjeseca';}else{result+='mjeseci';}return result;case'yy':if(number===1){result+='godina';}else if(number===2||number===3||number===4){result+='godine';}else{result+='godina';}return result;}}var hr=moment.defineLocale('hr',{months:{format:'siječnja_veljače_ožujka_travnja_svibnja_lipnja_srpnja_kolovoza_rujna_listopada_studenoga_prosinca'.split('_'),standalone:'siječanj_veljača_ožujak_travanj_svibanj_lipanj_srpanj_kolovoz_rujan_listopad_studeni_prosinac'.split('_')},monthsShort:'sij._velj._ožu._tra._svi._lip._srp._kol._ruj._lis._stu._pro.'.split('_'),monthsParseExact:true,weekdays:'nedjelja_ponedjeljak_utorak_srijeda_četvrtak_petak_subota'.split('_'),weekdaysShort:'ned._pon._uto._sri._čet._pet._sub.'.split('_'),weekdaysMin:'ne_po_ut_sr_če_pe_su'.split('_'),weekdaysParseExact:true,longDateFormat:{LT:'H:mm',LTS:'H:mm:ss',L:'DD.MM.YYYY',LL:'Do MMMM YYYY',LLL:'Do MMMM YYYY H:mm',LLLL:'dddd, Do MMMM YYYY H:mm'},calendar:{sameDay:'[danas u] LT',nextDay:'[sutra u] LT',nextWeek:function nextWeek(){switch(this.day()){case 0:return'[u] [nedjelju] [u] LT';case 3:return'[u] [srijedu] [u] LT';case 6:return'[u] [subotu] [u] LT';case 1:case 2:case 4:case 5:return'[u] dddd [u] LT';}},lastDay:'[jučer u] LT',lastWeek:function lastWeek(){switch(this.day()){case 0:return'[prošlu] [nedjelju] [u] LT';case 3:return'[prošlu] [srijedu] [u] LT';case 6:return'[prošle] [subote] [u] LT';case 1:case 2:case 4:case 5:return'[prošli] dddd [u] LT';}},sameElse:'L'},relativeTime:{future:'za %s',past:'prije %s',s:'par sekundi',ss:translate,m:translate,mm:translate,h:translate,hh:translate,d:'dan',dd:translate,M:'mjesec',MM:translate,y:'godinu',yy:translate},dayOfMonthOrdinalParse:/\\d{1,2}\\./,ordinal:'%d.',week:{dow:1,// Monday is the first day of the week.\ndoy:7// The week that contains Jan 7th is the first week of the year.\n}});return hr;});/***/},/***/\"5038\":/***/function _(module,exports,__webpack_require__){//! moment.js locale configuration\n//! locale : Indonesian [id]\n//! author : Mohammad Satrio Utomo : https://github.com/tyok\n//! reference: http://id.wikisource.org/wiki/Pedoman_Umum_Ejaan_Bahasa_Indonesia_yang_Disempurnakan\n;(function(global,factory){true?factory(__webpack_require__(\"c1df\")):undefined;})(this,function(moment){'use strict';//! moment.js locale configuration\nvar id=moment.defineLocale('id',{months:'Januari_Februari_Maret_April_Mei_Juni_Juli_Agustus_September_Oktober_November_Desember'.split('_'),monthsShort:'Jan_Feb_Mar_Apr_Mei_Jun_Jul_Agt_Sep_Okt_Nov_Des'.split('_'),weekdays:'Minggu_Senin_Selasa_Rabu_Kamis_Jumat_Sabtu'.split('_'),weekdaysShort:'Min_Sen_Sel_Rab_Kam_Jum_Sab'.split('_'),weekdaysMin:'Mg_Sn_Sl_Rb_Km_Jm_Sb'.split('_'),longDateFormat:{LT:'HH.mm',LTS:'HH.mm.ss',L:'DD/MM/YYYY',LL:'D MMMM YYYY',LLL:'D MMMM YYYY [pukul] HH.mm',LLLL:'dddd, D MMMM YYYY [pukul] HH.mm'},meridiemParse:/pagi|siang|sore|malam/,meridiemHour:function meridiemHour(hour,meridiem){if(hour===12){hour=0;}if(meridiem==='pagi'){return hour;}else if(meridiem==='siang'){return hour>=11?hour:hour+12;}else if(meridiem==='sore'||meridiem==='malam'){return hour+12;}},meridiem:function meridiem(hours,minutes,isLower){if(hours<11){return'pagi';}else if(hours<15){return'siang';}else if(hours<19){return'sore';}else{return'malam';}},calendar:{sameDay:'[Hari ini pukul] LT',nextDay:'[Besok pukul] LT',nextWeek:'dddd [pukul] LT',lastDay:'[Kemarin pukul] LT',lastWeek:'dddd [lalu pukul] LT',sameElse:'L'},relativeTime:{future:'dalam %s',past:'%s yang lalu',s:'beberapa detik',ss:'%d detik',m:'semenit',mm:'%d menit',h:'sejam',hh:'%d jam',d:'sehari',dd:'%d hari',M:'sebulan',MM:'%d bulan',y:'setahun',yy:'%d tahun'},week:{dow:0,// Sunday is the first day of the week.\ndoy:6// The week that contains Jan 6th is the first week of the year.\n}});return id;});/***/},/***/\"5120\":/***/function _(module,exports,__webpack_require__){//! moment.js locale configuration\n//! locale : Irish or Irish Gaelic [ga]\n//! author : André Silva : https://github.com/askpt\n;(function(global,factory){true?factory(__webpack_require__(\"c1df\")):undefined;})(this,function(moment){'use strict';//! moment.js locale configuration\nvar months=['Eanáir','Feabhra','Márta','Aibreán','Bealtaine','Meitheamh','Iúil','Lúnasa','Meán Fómhair','Deireadh Fómhair','Samhain','Nollaig'],monthsShort=['Ean','Feabh','Márt','Aib','Beal','Meith','Iúil','Lún','M.F.','D.F.','Samh','Noll'],weekdays=['Dé Domhnaigh','Dé Luain','Dé Máirt','Dé Céadaoin','Déardaoin','Dé hAoine','Dé Sathairn'],weekdaysShort=['Domh','Luan','Máirt','Céad','Déar','Aoine','Sath'],weekdaysMin=['Do','Lu','Má','Cé','Dé','A','Sa'];var ga=moment.defineLocale('ga',{months:months,monthsShort:monthsShort,monthsParseExact:true,weekdays:weekdays,weekdaysShort:weekdaysShort,weekdaysMin:weekdaysMin,longDateFormat:{LT:'HH:mm',LTS:'HH:mm:ss',L:'DD/MM/YYYY',LL:'D MMMM YYYY',LLL:'D MMMM YYYY HH:mm',LLLL:'dddd, D MMMM YYYY HH:mm'},calendar:{sameDay:'[Inniu ag] LT',nextDay:'[Amárach ag] LT',nextWeek:'dddd [ag] LT',lastDay:'[Inné ag] LT',lastWeek:'dddd [seo caite] [ag] LT',sameElse:'L'},relativeTime:{future:'i %s',past:'%s ó shin',s:'cúpla soicind',ss:'%d soicind',m:'nóiméad',mm:'%d nóiméad',h:'uair an chloig',hh:'%d uair an chloig',d:'lá',dd:'%d lá',M:'mí',MM:'%d míonna',y:'bliain',yy:'%d bliain'},dayOfMonthOrdinalParse:/\\d{1,2}(d|na|mh)/,ordinal:function ordinal(number){var output=number===1?'d':number%10===2?'na':'mh';return number+output;},week:{dow:1,// Monday is the first day of the week.\ndoy:4// The week that contains Jan 4th is the first week of the year.\n}});return ga;});/***/},/***/\"5294\":/***/function _(module,exports,__webpack_require__){//! moment.js locale configuration\n//! locale : Urdu [ur]\n//! author : Sawood Alam : https://github.com/ibnesayeed\n//! author : Zack : https://github.com/ZackVision\n;(function(global,factory){true?factory(__webpack_require__(\"c1df\")):undefined;})(this,function(moment){'use strict';//! moment.js locale configuration\nvar months=['جنوری','فروری','مارچ','اپریل','مئی','جون','جولائی','اگست','ستمبر','اکتوبر','نومبر','دسمبر'],days=['اتوار','پیر','منگل','بدھ','جمعرات','جمعہ','ہفتہ'];var ur=moment.defineLocale('ur',{months:months,monthsShort:months,weekdays:days,weekdaysShort:days,weekdaysMin:days,longDateFormat:{LT:'HH:mm',LTS:'HH:mm:ss',L:'DD/MM/YYYY',LL:'D MMMM YYYY',LLL:'D MMMM YYYY HH:mm',LLLL:'dddd، D MMMM YYYY HH:mm'},meridiemParse:/صبح|شام/,isPM:function isPM(input){return'شام'===input;},meridiem:function meridiem(hour,minute,isLower){if(hour<12){return'صبح';}return'شام';},calendar:{sameDay:'[آج بوقت] LT',nextDay:'[کل بوقت] LT',nextWeek:'dddd [بوقت] LT',lastDay:'[گذشتہ روز بوقت] LT',lastWeek:'[گذشتہ] dddd [بوقت] LT',sameElse:'L'},relativeTime:{future:'%s بعد',past:'%s قبل',s:'چند سیکنڈ',ss:'%d سیکنڈ',m:'ایک منٹ',mm:'%d منٹ',h:'ایک گھنٹہ',hh:'%d گھنٹے',d:'ایک دن',dd:'%d دن',M:'ایک ماہ',MM:'%d ماہ',y:'ایک سال',yy:'%d سال'},preparse:function preparse(string){return string.replace(/،/g,',');},postformat:function postformat(string){return string.replace(/,/g,'،');},week:{dow:1,// Monday is the first day of the week.\ndoy:4// The week that contains Jan 4th is the first week of the year.\n}});return ur;});/***/},/***/\"52bd\":/***/function bd(module,exports,__webpack_require__){//! moment.js locale configuration\n//! locale : siSwati [ss]\n//! author : Nicolai Davies<mail@nicolai.io> : https://github.com/nicolaidavies\n;(function(global,factory){true?factory(__webpack_require__(\"c1df\")):undefined;})(this,function(moment){'use strict';//! moment.js locale configuration\nvar ss=moment.defineLocale('ss',{months:\"Bhimbidvwane_Indlovana_Indlov'lenkhulu_Mabasa_Inkhwekhweti_Inhlaba_Kholwane_Ingci_Inyoni_Imphala_Lweti_Ingongoni\".split('_'),monthsShort:'Bhi_Ina_Inu_Mab_Ink_Inh_Kho_Igc_Iny_Imp_Lwe_Igo'.split('_'),weekdays:'Lisontfo_Umsombuluko_Lesibili_Lesitsatfu_Lesine_Lesihlanu_Umgcibelo'.split('_'),weekdaysShort:'Lis_Umb_Lsb_Les_Lsi_Lsh_Umg'.split('_'),weekdaysMin:'Li_Us_Lb_Lt_Ls_Lh_Ug'.split('_'),weekdaysParseExact:true,longDateFormat:{LT:'h:mm A',LTS:'h:mm:ss A',L:'DD/MM/YYYY',LL:'D MMMM YYYY',LLL:'D MMMM YYYY h:mm A',LLLL:'dddd, D MMMM YYYY h:mm A'},calendar:{sameDay:'[Namuhla nga] LT',nextDay:'[Kusasa nga] LT',nextWeek:'dddd [nga] LT',lastDay:'[Itolo nga] LT',lastWeek:'dddd [leliphelile] [nga] LT',sameElse:'L'},relativeTime:{future:'nga %s',past:'wenteka nga %s',s:'emizuzwana lomcane',ss:'%d mzuzwana',m:'umzuzu',mm:'%d emizuzu',h:'lihora',hh:'%d emahora',d:'lilanga',dd:'%d emalanga',M:'inyanga',MM:'%d tinyanga',y:'umnyaka',yy:'%d iminyaka'},meridiemParse:/ekuseni|emini|entsambama|ebusuku/,meridiem:function meridiem(hours,minutes,isLower){if(hours<11){return'ekuseni';}else if(hours<15){return'emini';}else if(hours<19){return'entsambama';}else{return'ebusuku';}},meridiemHour:function meridiemHour(hour,meridiem){if(hour===12){hour=0;}if(meridiem==='ekuseni'){return hour;}else if(meridiem==='emini'){return hour>=11?hour:hour+12;}else if(meridiem==='entsambama'||meridiem==='ebusuku'){if(hour===0){return 0;}return hour+12;}},dayOfMonthOrdinalParse:/\\d{1,2}/,ordinal:'%d',week:{dow:1,// Monday is the first day of the week.\ndoy:4// The week that contains Jan 4th is the first week of the year.\n}});return ss;});/***/},/***/\"55c9\":/***/function c9(module,exports,__webpack_require__){//! moment.js locale configuration\n//! locale : Spanish (United States) [es-us]\n//! author : bustta : https://github.com/bustta\n//! author : chrisrodz : https://github.com/chrisrodz\n;(function(global,factory){true?factory(__webpack_require__(\"c1df\")):undefined;})(this,function(moment){'use strict';//! moment.js locale configuration\nvar monthsShortDot='ene._feb._mar._abr._may._jun._jul._ago._sep._oct._nov._dic.'.split('_'),_monthsShort2='ene_feb_mar_abr_may_jun_jul_ago_sep_oct_nov_dic'.split('_'),monthsParse=[/^ene/i,/^feb/i,/^mar/i,/^abr/i,/^may/i,/^jun/i,/^jul/i,/^ago/i,/^sep/i,/^oct/i,/^nov/i,/^dic/i],monthsRegex=/^(enero|febrero|marzo|abril|mayo|junio|julio|agosto|septiembre|octubre|noviembre|diciembre|ene\\.?|feb\\.?|mar\\.?|abr\\.?|may\\.?|jun\\.?|jul\\.?|ago\\.?|sep\\.?|oct\\.?|nov\\.?|dic\\.?)/i;var esUs=moment.defineLocale('es-us',{months:'enero_febrero_marzo_abril_mayo_junio_julio_agosto_septiembre_octubre_noviembre_diciembre'.split('_'),monthsShort:function monthsShort(m,format){if(!m){return monthsShortDot;}else if(/-MMM-/.test(format)){return _monthsShort2[m.month()];}else{return monthsShortDot[m.month()];}},monthsRegex:monthsRegex,monthsShortRegex:monthsRegex,monthsStrictRegex:/^(enero|febrero|marzo|abril|mayo|junio|julio|agosto|septiembre|octubre|noviembre|diciembre)/i,monthsShortStrictRegex:/^(ene\\.?|feb\\.?|mar\\.?|abr\\.?|may\\.?|jun\\.?|jul\\.?|ago\\.?|sep\\.?|oct\\.?|nov\\.?|dic\\.?)/i,monthsParse:monthsParse,longMonthsParse:monthsParse,shortMonthsParse:monthsParse,weekdays:'domingo_lunes_martes_miércoles_jueves_viernes_sábado'.split('_'),weekdaysShort:'dom._lun._mar._mié._jue._vie._sáb.'.split('_'),weekdaysMin:'do_lu_ma_mi_ju_vi_sá'.split('_'),weekdaysParseExact:true,longDateFormat:{LT:'h:mm A',LTS:'h:mm:ss A',L:'MM/DD/YYYY',LL:'D [de] MMMM [de] YYYY',LLL:'D [de] MMMM [de] YYYY h:mm A',LLLL:'dddd, D [de] MMMM [de] YYYY h:mm A'},calendar:{sameDay:function sameDay(){return'[hoy a la'+(this.hours()!==1?'s':'')+'] LT';},nextDay:function nextDay(){return'[mañana a la'+(this.hours()!==1?'s':'')+'] LT';},nextWeek:function nextWeek(){return'dddd [a la'+(this.hours()!==1?'s':'')+'] LT';},lastDay:function lastDay(){return'[ayer a la'+(this.hours()!==1?'s':'')+'] LT';},lastWeek:function lastWeek(){return'[el] dddd [pasado a la'+(this.hours()!==1?'s':'')+'] LT';},sameElse:'L'},relativeTime:{future:'en %s',past:'hace %s',s:'unos segundos',ss:'%d segundos',m:'un minuto',mm:'%d minutos',h:'una hora',hh:'%d horas',d:'un día',dd:'%d días',M:'un mes',MM:'%d meses',y:'un año',yy:'%d años'},dayOfMonthOrdinalParse:/\\d{1,2}º/,ordinal:'%dº',week:{dow:0,// Sunday is the first day of the week.\ndoy:6// The week that contains Jan 6th is the first week of the year.\n}});return esUs;});/***/},/***/\"576c\":/***/function c(module,exports,__webpack_require__){//! moment.js locale configuration\n//! locale : Tetun Dili (East Timor) [tet]\n//! author : Joshua Brooks : https://github.com/joshbrooks\n//! author : Onorio De J. Afonso : https://github.com/marobo\n//! author : Sonia Simoes : https://github.com/soniasimoes\n;(function(global,factory){true?factory(__webpack_require__(\"c1df\")):undefined;})(this,function(moment){'use strict';//! moment.js locale configuration\nvar tet=moment.defineLocale('tet',{months:'Janeiru_Fevereiru_Marsu_Abril_Maiu_Juñu_Jullu_Agustu_Setembru_Outubru_Novembru_Dezembru'.split('_'),monthsShort:'Jan_Fev_Mar_Abr_Mai_Jun_Jul_Ago_Set_Out_Nov_Dez'.split('_'),weekdays:'Domingu_Segunda_Tersa_Kuarta_Kinta_Sesta_Sabadu'.split('_'),weekdaysShort:'Dom_Seg_Ters_Kua_Kint_Sest_Sab'.split('_'),weekdaysMin:'Do_Seg_Te_Ku_Ki_Ses_Sa'.split('_'),longDateFormat:{LT:'HH:mm',LTS:'HH:mm:ss',L:'DD/MM/YYYY',LL:'D MMMM YYYY',LLL:'D MMMM YYYY HH:mm',LLLL:'dddd, D MMMM YYYY HH:mm'},calendar:{sameDay:'[Ohin iha] LT',nextDay:'[Aban iha] LT',nextWeek:'dddd [iha] LT',lastDay:'[Horiseik iha] LT',lastWeek:'dddd [semana kotuk] [iha] LT',sameElse:'L'},relativeTime:{future:'iha %s',past:'%s liuba',s:'segundu balun',ss:'segundu %d',m:'minutu ida',mm:'minutu %d',h:'oras ida',hh:'oras %d',d:'loron ida',dd:'loron %d',M:'fulan ida',MM:'fulan %d',y:'tinan ida',yy:'tinan %d'},dayOfMonthOrdinalParse:/\\d{1,2}(st|nd|rd|th)/,ordinal:function ordinal(number){var b=number%10,output=~~(number%100/10)===1?'th':b===1?'st':b===2?'nd':b===3?'rd':'th';return number+output;},week:{dow:1,// Monday is the first day of the week.\ndoy:4// The week that contains Jan 4th is the first week of the year.\n}});return tet;});/***/},/***/\"598a\":/***/function a(module,exports,__webpack_require__){//! moment.js locale configuration\n//! locale : Maldivian [dv]\n//! author : Jawish Hameed : https://github.com/jawish\n;(function(global,factory){true?factory(__webpack_require__(\"c1df\")):undefined;})(this,function(moment){'use strict';//! moment.js locale configuration\nvar months=['ޖެނުއަރީ','ފެބްރުއަރީ','މާރިޗު','އޭޕްރީލު','މޭ','ޖޫން','ޖުލައި','އޯގަސްޓު','ސެޕްޓެމްބަރު','އޮކްޓޯބަރު','ނޮވެމްބަރު','ޑިސެމްބަރު'],weekdays=['އާދިއްތަ','ހޯމަ','އަންގާރަ','ބުދަ','ބުރާސްފަތި','ހުކުރު','ހޮނިހިރު'];var dv=moment.defineLocale('dv',{months:months,monthsShort:months,weekdays:weekdays,weekdaysShort:weekdays,weekdaysMin:'އާދި_ހޯމަ_އަން_ބުދަ_ބުރާ_ހުކު_ހޮނި'.split('_'),longDateFormat:{LT:'HH:mm',LTS:'HH:mm:ss',L:'D/M/YYYY',LL:'D MMMM YYYY',LLL:'D MMMM YYYY HH:mm',LLLL:'dddd D MMMM YYYY HH:mm'},meridiemParse:/މކ|މފ/,isPM:function isPM(input){return'މފ'===input;},meridiem:function meridiem(hour,minute,isLower){if(hour<12){return'މކ';}else{return'މފ';}},calendar:{sameDay:'[މިއަދު] LT',nextDay:'[މާދަމާ] LT',nextWeek:'dddd LT',lastDay:'[އިއްޔެ] LT',lastWeek:'[ފާއިތުވި] dddd LT',sameElse:'L'},relativeTime:{future:'ތެރޭގައި %s',past:'ކުރިން %s',s:'ސިކުންތުކޮޅެއް',ss:'d% ސިކުންތު',m:'މިނިޓެއް',mm:'މިނިޓު %d',h:'ގަޑިއިރެއް',hh:'ގަޑިއިރު %d',d:'ދުވަހެއް',dd:'ދުވަސް %d',M:'މަހެއް',MM:'މަސް %d',y:'އަހަރެއް',yy:'އަހަރު %d'},preparse:function preparse(string){return string.replace(/،/g,',');},postformat:function postformat(string){return string.replace(/,/g,'،');},week:{dow:7,// Sunday is the first day of the week.\ndoy:12// The week that contains Jan 12th is the first week of the year.\n}});return dv;});/***/},/***/\"5aff\":/***/function aff(module,exports,__webpack_require__){//! moment.js locale configuration\n//! locale : Turkmen [trk]\n//! author : Atamyrat Abdyrahmanov : https://github.com/atamyratabdy\n;(function(global,factory){true?factory(__webpack_require__(\"c1df\")):undefined;})(this,function(moment){'use strict';//! moment.js locale configuration\nvar suffixes={1:\"'inji\",5:\"'inji\",8:\"'inji\",70:\"'inji\",80:\"'inji\",2:\"'nji\",7:\"'nji\",20:\"'nji\",50:\"'nji\",3:\"'ünji\",4:\"'ünji\",100:\"'ünji\",6:\"'njy\",9:\"'unjy\",10:\"'unjy\",30:\"'unjy\",60:\"'ynjy\",90:\"'ynjy\"};var tk=moment.defineLocale('tk',{months:'Ýanwar_Fewral_Mart_Aprel_Maý_Iýun_Iýul_Awgust_Sentýabr_Oktýabr_Noýabr_Dekabr'.split('_'),monthsShort:'Ýan_Few_Mar_Apr_Maý_Iýn_Iýl_Awg_Sen_Okt_Noý_Dek'.split('_'),weekdays:'Ýekşenbe_Duşenbe_Sişenbe_Çarşenbe_Penşenbe_Anna_Şenbe'.split('_'),weekdaysShort:'Ýek_Duş_Siş_Çar_Pen_Ann_Şen'.split('_'),weekdaysMin:'Ýk_Dş_Sş_Çr_Pn_An_Şn'.split('_'),longDateFormat:{LT:'HH:mm',LTS:'HH:mm:ss',L:'DD.MM.YYYY',LL:'D MMMM YYYY',LLL:'D MMMM YYYY HH:mm',LLLL:'dddd, D MMMM YYYY HH:mm'},calendar:{sameDay:'[bugün sagat] LT',nextDay:'[ertir sagat] LT',nextWeek:'[indiki] dddd [sagat] LT',lastDay:'[düýn] LT',lastWeek:'[geçen] dddd [sagat] LT',sameElse:'L'},relativeTime:{future:'%s soň',past:'%s öň',s:'birnäçe sekunt',m:'bir minut',mm:'%d minut',h:'bir sagat',hh:'%d sagat',d:'bir gün',dd:'%d gün',M:'bir aý',MM:'%d aý',y:'bir ýyl',yy:'%d ýyl'},ordinal:function ordinal(number,period){switch(period){case'd':case'D':case'Do':case'DD':return number;default:if(number===0){// special case for zero\nreturn number+\"'unjy\";}var a=number%10,b=number%100-a,c=number>=100?100:null;return number+(suffixes[a]||suffixes[b]||suffixes[c]);}},week:{dow:1,// Monday is the first day of the week.\ndoy:7// The week that contains Jan 7th is the first week of the year.\n}});return tk;});/***/},/***/\"5b14\":/***/function b14(module,exports,__webpack_require__){//! moment.js locale configuration\n//! locale : Hungarian [hu]\n//! author : Adam Brunner : https://github.com/adambrunner\n;(function(global,factory){true?factory(__webpack_require__(\"c1df\")):undefined;})(this,function(moment){'use strict';//! moment.js locale configuration\nvar weekEndings='vasárnap hétfőn kedden szerdán csütörtökön pénteken szombaton'.split(' ');function translate(number,withoutSuffix,key,isFuture){var num=number;switch(key){case's':return isFuture||withoutSuffix?'néhány másodperc':'néhány másodperce';case'ss':return num+(isFuture||withoutSuffix)?' másodperc':' másodperce';case'm':return'egy'+(isFuture||withoutSuffix?' perc':' perce');case'mm':return num+(isFuture||withoutSuffix?' perc':' perce');case'h':return'egy'+(isFuture||withoutSuffix?' óra':' órája');case'hh':return num+(isFuture||withoutSuffix?' óra':' órája');case'd':return'egy'+(isFuture||withoutSuffix?' nap':' napja');case'dd':return num+(isFuture||withoutSuffix?' nap':' napja');case'M':return'egy'+(isFuture||withoutSuffix?' hónap':' hónapja');case'MM':return num+(isFuture||withoutSuffix?' hónap':' hónapja');case'y':return'egy'+(isFuture||withoutSuffix?' év':' éve');case'yy':return num+(isFuture||withoutSuffix?' év':' éve');}return'';}function week(isFuture){return(isFuture?'':'[múlt] ')+'['+weekEndings[this.day()]+'] LT[-kor]';}var hu=moment.defineLocale('hu',{months:'január_február_március_április_május_június_július_augusztus_szeptember_október_november_december'.split('_'),monthsShort:'jan_feb_márc_ápr_máj_jún_júl_aug_szept_okt_nov_dec'.split('_'),weekdays:'vasárnap_hétfő_kedd_szerda_csütörtök_péntek_szombat'.split('_'),weekdaysShort:'vas_hét_kedd_sze_csüt_pén_szo'.split('_'),weekdaysMin:'v_h_k_sze_cs_p_szo'.split('_'),longDateFormat:{LT:'H:mm',LTS:'H:mm:ss',L:'YYYY.MM.DD.',LL:'YYYY. MMMM D.',LLL:'YYYY. MMMM D. H:mm',LLLL:'YYYY. MMMM D., dddd H:mm'},meridiemParse:/de|du/i,isPM:function isPM(input){return input.charAt(1).toLowerCase()==='u';},meridiem:function meridiem(hours,minutes,isLower){if(hours<12){return isLower===true?'de':'DE';}else{return isLower===true?'du':'DU';}},calendar:{sameDay:'[ma] LT[-kor]',nextDay:'[holnap] LT[-kor]',nextWeek:function nextWeek(){return week.call(this,true);},lastDay:'[tegnap] LT[-kor]',lastWeek:function lastWeek(){return week.call(this,false);},sameElse:'L'},relativeTime:{future:'%s múlva',past:'%s',s:translate,ss:translate,m:translate,mm:translate,h:translate,hh:translate,d:translate,dd:translate,M:translate,MM:translate,y:translate,yy:translate},dayOfMonthOrdinalParse:/\\d{1,2}\\./,ordinal:'%d.',week:{dow:1,// Monday is the first day of the week.\ndoy:4// The week that contains Jan 4th is the first week of the year.\n}});return hu;});/***/},/***/\"5c3a\":/***/function c3a(module,exports,__webpack_require__){//! moment.js locale configuration\n//! locale : Chinese (China) [zh-cn]\n//! author : suupic : https://github.com/suupic\n//! author : Zeno Zeng : https://github.com/zenozeng\n//! author : uu109 : https://github.com/uu109\n;(function(global,factory){true?factory(__webpack_require__(\"c1df\")):undefined;})(this,function(moment){'use strict';//! moment.js locale configuration\nvar zhCn=moment.defineLocale('zh-cn',{months:'一月_二月_三月_四月_五月_六月_七月_八月_九月_十月_十一月_十二月'.split('_'),monthsShort:'1月_2月_3月_4月_5月_6月_7月_8月_9月_10月_11月_12月'.split('_'),weekdays:'星期日_星期一_星期二_星期三_星期四_星期五_星期六'.split('_'),weekdaysShort:'周日_周一_周二_周三_周四_周五_周六'.split('_'),weekdaysMin:'日_一_二_三_四_五_六'.split('_'),longDateFormat:{LT:'HH:mm',LTS:'HH:mm:ss',L:'YYYY/MM/DD',LL:'YYYY年M月D日',LLL:'YYYY年M月D日Ah点mm分',LLLL:'YYYY年M月D日ddddAh点mm分',l:'YYYY/M/D',ll:'YYYY年M月D日',lll:'YYYY年M月D日 HH:mm',llll:'YYYY年M月D日dddd HH:mm'},meridiemParse:/凌晨|早上|上午|中午|下午|晚上/,meridiemHour:function meridiemHour(hour,meridiem){if(hour===12){hour=0;}if(meridiem==='凌晨'||meridiem==='早上'||meridiem==='上午'){return hour;}else if(meridiem==='下午'||meridiem==='晚上'){return hour+12;}else{// '中午'\nreturn hour>=11?hour:hour+12;}},meridiem:function meridiem(hour,minute,isLower){var hm=hour*100+minute;if(hm<600){return'凌晨';}else if(hm<900){return'早上';}else if(hm<1130){return'上午';}else if(hm<1230){return'中午';}else if(hm<1800){return'下午';}else{return'晚上';}},calendar:{sameDay:'[今天]LT',nextDay:'[明天]LT',nextWeek:function nextWeek(now){if(now.week()!==this.week()){return'[下]dddLT';}else{return'[本]dddLT';}},lastDay:'[昨天]LT',lastWeek:function lastWeek(now){if(this.week()!==now.week()){return'[上]dddLT';}else{return'[本]dddLT';}},sameElse:'L'},dayOfMonthOrdinalParse:/\\d{1,2}(日|月|周)/,ordinal:function ordinal(number,period){switch(period){case'd':case'D':case'DDD':return number+'日';case'M':return number+'月';case'w':case'W':return number+'周';default:return number;}},relativeTime:{future:'%s后',past:'%s前',s:'几秒',ss:'%d 秒',m:'1 分钟',mm:'%d 分钟',h:'1 小时',hh:'%d 小时',d:'1 天',dd:'%d 天',M:'1 个月',MM:'%d 个月',y:'1 年',yy:'%d 年'},week:{// GB/T 7408-1994《数据元和交换格式·信息交换·日期和时间表示法》与ISO 8601:1988等效\ndow:1,// Monday is the first day of the week.\ndoy:4// The week that contains Jan 4th is the first week of the year.\n}});return zhCn;});/***/},/***/\"5cbb\":/***/function cbb(module,exports,__webpack_require__){//! moment.js locale configuration\n//! locale : Telugu [te]\n//! author : Krishna Chaitanya Thota : https://github.com/kcthota\n;(function(global,factory){true?factory(__webpack_require__(\"c1df\")):undefined;})(this,function(moment){'use strict';//! moment.js locale configuration\nvar te=moment.defineLocale('te',{months:'జనవరి_ఫిబ్రవరి_మార్చి_ఏప్రిల్_మే_జూన్_జులై_ఆగస్టు_సెప్టెంబర్_అక్టోబర్_నవంబర్_డిసెంబర్'.split('_'),monthsShort:'జన._ఫిబ్ర._మార్చి_ఏప్రి._మే_జూన్_జులై_ఆగ._సెప్._అక్టో._నవ._డిసె.'.split('_'),monthsParseExact:true,weekdays:'ఆదివారం_సోమవారం_మంగళవారం_బుధవారం_గురువారం_శుక్రవారం_శనివారం'.split('_'),weekdaysShort:'ఆది_సోమ_మంగళ_బుధ_గురు_శుక్ర_శని'.split('_'),weekdaysMin:'ఆ_సో_మం_బు_గు_శు_శ'.split('_'),longDateFormat:{LT:'A h:mm',LTS:'A h:mm:ss',L:'DD/MM/YYYY',LL:'D MMMM YYYY',LLL:'D MMMM YYYY, A h:mm',LLLL:'dddd, D MMMM YYYY, A h:mm'},calendar:{sameDay:'[నేడు] LT',nextDay:'[రేపు] LT',nextWeek:'dddd, LT',lastDay:'[నిన్న] LT',lastWeek:'[గత] dddd, LT',sameElse:'L'},relativeTime:{future:'%s లో',past:'%s క్రితం',s:'కొన్ని క్షణాలు',ss:'%d సెకన్లు',m:'ఒక నిమిషం',mm:'%d నిమిషాలు',h:'ఒక గంట',hh:'%d గంటలు',d:'ఒక రోజు',dd:'%d రోజులు',M:'ఒక నెల',MM:'%d నెలలు',y:'ఒక సంవత్సరం',yy:'%d సంవత్సరాలు'},dayOfMonthOrdinalParse:/\\d{1,2}వ/,ordinal:'%dవ',meridiemParse:/రాత్రి|ఉదయం|మధ్యాహ్నం|సాయంత్రం/,meridiemHour:function meridiemHour(hour,meridiem){if(hour===12){hour=0;}if(meridiem==='రాత్రి'){return hour<4?hour:hour+12;}else if(meridiem==='ఉదయం'){return hour;}else if(meridiem==='మధ్యాహ్నం'){return hour>=10?hour:hour+12;}else if(meridiem==='సాయంత్రం'){return hour+12;}},meridiem:function meridiem(hour,minute,isLower){if(hour<4){return'రాత్రి';}else if(hour<10){return'ఉదయం';}else if(hour<17){return'మధ్యాహ్నం';}else if(hour<20){return'సాయంత్రం';}else{return'రాత్రి';}},week:{dow:0,// Sunday is the first day of the week.\ndoy:6// The week that contains Jan 6th is the first week of the year.\n}});return te;});/***/},/***/\"5fbd\":/***/function fbd(module,exports,__webpack_require__){//! moment.js locale configuration\n//! locale : Swedish [sv]\n//! author : Jens Alm : https://github.com/ulmus\n;(function(global,factory){true?factory(__webpack_require__(\"c1df\")):undefined;})(this,function(moment){'use strict';//! moment.js locale configuration\nvar sv=moment.defineLocale('sv',{months:'januari_februari_mars_april_maj_juni_juli_augusti_september_oktober_november_december'.split('_'),monthsShort:'jan_feb_mar_apr_maj_jun_jul_aug_sep_okt_nov_dec'.split('_'),weekdays:'söndag_måndag_tisdag_onsdag_torsdag_fredag_lördag'.split('_'),weekdaysShort:'sön_mån_tis_ons_tor_fre_lör'.split('_'),weekdaysMin:'sö_må_ti_on_to_fr_lö'.split('_'),longDateFormat:{LT:'HH:mm',LTS:'HH:mm:ss',L:'YYYY-MM-DD',LL:'D MMMM YYYY',LLL:'D MMMM YYYY [kl.] HH:mm',LLLL:'dddd D MMMM YYYY [kl.] HH:mm',lll:'D MMM YYYY HH:mm',llll:'ddd D MMM YYYY HH:mm'},calendar:{sameDay:'[Idag] LT',nextDay:'[Imorgon] LT',lastDay:'[Igår] LT',nextWeek:'[På] dddd LT',lastWeek:'[I] dddd[s] LT',sameElse:'L'},relativeTime:{future:'om %s',past:'för %s sedan',s:'några sekunder',ss:'%d sekunder',m:'en minut',mm:'%d minuter',h:'en timme',hh:'%d timmar',d:'en dag',dd:'%d dagar',M:'en månad',MM:'%d månader',y:'ett år',yy:'%d år'},dayOfMonthOrdinalParse:/\\d{1,2}(\\:e|\\:a)/,ordinal:function ordinal(number){var b=number%10,output=~~(number%100/10)===1?':e':b===1?':a':b===2?':a':b===3?':e':':e';return number+output;},week:{dow:1,// Monday is the first day of the week.\ndoy:4// The week that contains Jan 4th is the first week of the year.\n}});return sv;});/***/},/***/\"6117\":/***/function _(module,exports,__webpack_require__){//! moment.js language configuration\n//! locale : Uyghur (China) [ug-cn]\n//! author: boyaq : https://github.com/boyaq\n;(function(global,factory){true?factory(__webpack_require__(\"c1df\")):undefined;})(this,function(moment){'use strict';//! moment.js language configuration\nvar ugCn=moment.defineLocale('ug-cn',{months:'يانۋار_فېۋرال_مارت_ئاپرېل_ماي_ئىيۇن_ئىيۇل_ئاۋغۇست_سېنتەبىر_ئۆكتەبىر_نويابىر_دېكابىر'.split('_'),monthsShort:'يانۋار_فېۋرال_مارت_ئاپرېل_ماي_ئىيۇن_ئىيۇل_ئاۋغۇست_سېنتەبىر_ئۆكتەبىر_نويابىر_دېكابىر'.split('_'),weekdays:'يەكشەنبە_دۈشەنبە_سەيشەنبە_چارشەنبە_پەيشەنبە_جۈمە_شەنبە'.split('_'),weekdaysShort:'يە_دۈ_سە_چا_پە_جۈ_شە'.split('_'),weekdaysMin:'يە_دۈ_سە_چا_پە_جۈ_شە'.split('_'),longDateFormat:{LT:'HH:mm',LTS:'HH:mm:ss',L:'YYYY-MM-DD',LL:'YYYY-يىلىM-ئاينىڭD-كۈنى',LLL:'YYYY-يىلىM-ئاينىڭD-كۈنى، HH:mm',LLLL:'dddd، YYYY-يىلىM-ئاينىڭD-كۈنى، HH:mm'},meridiemParse:/يېرىم كېچە|سەھەر|چۈشتىن بۇرۇن|چۈش|چۈشتىن كېيىن|كەچ/,meridiemHour:function meridiemHour(hour,meridiem){if(hour===12){hour=0;}if(meridiem==='يېرىم كېچە'||meridiem==='سەھەر'||meridiem==='چۈشتىن بۇرۇن'){return hour;}else if(meridiem==='چۈشتىن كېيىن'||meridiem==='كەچ'){return hour+12;}else{return hour>=11?hour:hour+12;}},meridiem:function meridiem(hour,minute,isLower){var hm=hour*100+minute;if(hm<600){return'يېرىم كېچە';}else if(hm<900){return'سەھەر';}else if(hm<1130){return'چۈشتىن بۇرۇن';}else if(hm<1230){return'چۈش';}else if(hm<1800){return'چۈشتىن كېيىن';}else{return'كەچ';}},calendar:{sameDay:'[بۈگۈن سائەت] LT',nextDay:'[ئەتە سائەت] LT',nextWeek:'[كېلەركى] dddd [سائەت] LT',lastDay:'[تۆنۈگۈن] LT',lastWeek:'[ئالدىنقى] dddd [سائەت] LT',sameElse:'L'},relativeTime:{future:'%s كېيىن',past:'%s بۇرۇن',s:'نەچچە سېكونت',ss:'%d سېكونت',m:'بىر مىنۇت',mm:'%d مىنۇت',h:'بىر سائەت',hh:'%d سائەت',d:'بىر كۈن',dd:'%d كۈن',M:'بىر ئاي',MM:'%d ئاي',y:'بىر يىل',yy:'%d يىل'},dayOfMonthOrdinalParse:/\\d{1,2}(-كۈنى|-ئاي|-ھەپتە)/,ordinal:function ordinal(number,period){switch(period){case'd':case'D':case'DDD':return number+'-كۈنى';case'w':case'W':return number+'-ھەپتە';default:return number;}},preparse:function preparse(string){return string.replace(/،/g,',');},postformat:function postformat(string){return string.replace(/,/g,'،');},week:{// GB/T 7408-1994《数据元和交换格式·信息交换·日期和时间表示法》与ISO 8601:1988等效\ndow:1,// Monday is the first day of the week.\ndoy:7// The week that contains Jan 1st is the first week of the year.\n}});return ugCn;});/***/},/***/\"62e4\":/***/function e4(module,exports){module.exports=function(module){if(!module.webpackPolyfill){module.deprecate=function(){};module.paths=[];// module.parent = undefined by default\nif(!module.children)module.children=[];Object.defineProperty(module,\"loaded\",{enumerable:true,get:function get(){return module.l;}});Object.defineProperty(module,\"id\",{enumerable:true,get:function get(){return module.i;}});module.webpackPolyfill=1;}return module;};/***/},/***/\"6403\":/***/function _(module,exports,__webpack_require__){//! moment.js locale configuration\n//! locale : Malay [ms-my]\n//! note : DEPRECATED, the correct one is [ms]\n//! author : Weldan Jamili : https://github.com/weldan\n;(function(global,factory){true?factory(__webpack_require__(\"c1df\")):undefined;})(this,function(moment){'use strict';//! moment.js locale configuration\nvar msMy=moment.defineLocale('ms-my',{months:'Januari_Februari_Mac_April_Mei_Jun_Julai_Ogos_September_Oktober_November_Disember'.split('_'),monthsShort:'Jan_Feb_Mac_Apr_Mei_Jun_Jul_Ogs_Sep_Okt_Nov_Dis'.split('_'),weekdays:'Ahad_Isnin_Selasa_Rabu_Khamis_Jumaat_Sabtu'.split('_'),weekdaysShort:'Ahd_Isn_Sel_Rab_Kha_Jum_Sab'.split('_'),weekdaysMin:'Ah_Is_Sl_Rb_Km_Jm_Sb'.split('_'),longDateFormat:{LT:'HH.mm',LTS:'HH.mm.ss',L:'DD/MM/YYYY',LL:'D MMMM YYYY',LLL:'D MMMM YYYY [pukul] HH.mm',LLLL:'dddd, D MMMM YYYY [pukul] HH.mm'},meridiemParse:/pagi|tengahari|petang|malam/,meridiemHour:function meridiemHour(hour,meridiem){if(hour===12){hour=0;}if(meridiem==='pagi'){return hour;}else if(meridiem==='tengahari'){return hour>=11?hour:hour+12;}else if(meridiem==='petang'||meridiem==='malam'){return hour+12;}},meridiem:function meridiem(hours,minutes,isLower){if(hours<11){return'pagi';}else if(hours<15){return'tengahari';}else if(hours<19){return'petang';}else{return'malam';}},calendar:{sameDay:'[Hari ini pukul] LT',nextDay:'[Esok pukul] LT',nextWeek:'dddd [pukul] LT',lastDay:'[Kelmarin pukul] LT',lastWeek:'dddd [lepas pukul] LT',sameElse:'L'},relativeTime:{future:'dalam %s',past:'%s yang lepas',s:'beberapa saat',ss:'%d saat',m:'seminit',mm:'%d minit',h:'sejam',hh:'%d jam',d:'sehari',dd:'%d hari',M:'sebulan',MM:'%d bulan',y:'setahun',yy:'%d tahun'},week:{dow:1,// Monday is the first day of the week.\ndoy:7// The week that contains Jan 7th is the first week of the year.\n}});return msMy;});/***/},/***/\"65db\":/***/function db(module,exports,__webpack_require__){//! moment.js locale configuration\n//! locale : Esperanto [eo]\n//! author : Colin Dean : https://github.com/colindean\n//! author : Mia Nordentoft Imperatori : https://github.com/miestasmia\n//! comment : miestasmia corrected the translation by colindean\n//! comment : Vivakvo corrected the translation by colindean and miestasmia\n;(function(global,factory){true?factory(__webpack_require__(\"c1df\")):undefined;})(this,function(moment){'use strict';//! moment.js locale configuration\nvar eo=moment.defineLocale('eo',{months:'januaro_februaro_marto_aprilo_majo_junio_julio_aŭgusto_septembro_oktobro_novembro_decembro'.split('_'),monthsShort:'jan_feb_mart_apr_maj_jun_jul_aŭg_sept_okt_nov_dec'.split('_'),weekdays:'dimanĉo_lundo_mardo_merkredo_ĵaŭdo_vendredo_sabato'.split('_'),weekdaysShort:'dim_lun_mard_merk_ĵaŭ_ven_sab'.split('_'),weekdaysMin:'di_lu_ma_me_ĵa_ve_sa'.split('_'),longDateFormat:{LT:'HH:mm',LTS:'HH:mm:ss',L:'YYYY-MM-DD',LL:'[la] D[-an de] MMMM, YYYY',LLL:'[la] D[-an de] MMMM, YYYY HH:mm',LLLL:'dddd[n], [la] D[-an de] MMMM, YYYY HH:mm',llll:'ddd, [la] D[-an de] MMM, YYYY HH:mm'},meridiemParse:/[ap]\\.t\\.m/i,isPM:function isPM(input){return input.charAt(0).toLowerCase()==='p';},meridiem:function meridiem(hours,minutes,isLower){if(hours>11){return isLower?'p.t.m.':'P.T.M.';}else{return isLower?'a.t.m.':'A.T.M.';}},calendar:{sameDay:'[Hodiaŭ je] LT',nextDay:'[Morgaŭ je] LT',nextWeek:'dddd[n je] LT',lastDay:'[Hieraŭ je] LT',lastWeek:'[pasintan] dddd[n je] LT',sameElse:'L'},relativeTime:{future:'post %s',past:'antaŭ %s',s:'kelkaj sekundoj',ss:'%d sekundoj',m:'unu minuto',mm:'%d minutoj',h:'unu horo',hh:'%d horoj',d:'unu tago',//ne 'diurno', ĉar estas uzita por proksimumo\ndd:'%d tagoj',M:'unu monato',MM:'%d monatoj',y:'unu jaro',yy:'%d jaroj'},dayOfMonthOrdinalParse:/\\d{1,2}a/,ordinal:'%da',week:{dow:1,// Monday is the first day of the week.\ndoy:7// The week that contains Jan 7th is the first week of the year.\n}});return eo;});/***/},/***/\"6784\":/***/function _(module,exports,__webpack_require__){//! moment.js locale configuration\n//! locale : Sindhi [sd]\n//! author : Narain Sagar : https://github.com/narainsagar\n;(function(global,factory){true?factory(__webpack_require__(\"c1df\")):undefined;})(this,function(moment){'use strict';//! moment.js locale configuration\nvar months=['جنوري','فيبروري','مارچ','اپريل','مئي','جون','جولاءِ','آگسٽ','سيپٽمبر','آڪٽوبر','نومبر','ڊسمبر'],days=['آچر','سومر','اڱارو','اربع','خميس','جمع','ڇنڇر'];var sd=moment.defineLocale('sd',{months:months,monthsShort:months,weekdays:days,weekdaysShort:days,weekdaysMin:days,longDateFormat:{LT:'HH:mm',LTS:'HH:mm:ss',L:'DD/MM/YYYY',LL:'D MMMM YYYY',LLL:'D MMMM YYYY HH:mm',LLLL:'dddd، D MMMM YYYY HH:mm'},meridiemParse:/صبح|شام/,isPM:function isPM(input){return'شام'===input;},meridiem:function meridiem(hour,minute,isLower){if(hour<12){return'صبح';}return'شام';},calendar:{sameDay:'[اڄ] LT',nextDay:'[سڀاڻي] LT',nextWeek:'dddd [اڳين هفتي تي] LT',lastDay:'[ڪالهه] LT',lastWeek:'[گزريل هفتي] dddd [تي] LT',sameElse:'L'},relativeTime:{future:'%s پوء',past:'%s اڳ',s:'چند سيڪنڊ',ss:'%d سيڪنڊ',m:'هڪ منٽ',mm:'%d منٽ',h:'هڪ ڪلاڪ',hh:'%d ڪلاڪ',d:'هڪ ڏينهن',dd:'%d ڏينهن',M:'هڪ مهينو',MM:'%d مهينا',y:'هڪ سال',yy:'%d سال'},preparse:function preparse(string){return string.replace(/،/g,',');},postformat:function postformat(string){return string.replace(/,/g,'،');},week:{dow:1,// Monday is the first day of the week.\ndoy:4// The week that contains Jan 4th is the first week of the year.\n}});return sd;});/***/},/***/\"6887\":/***/function _(module,exports,__webpack_require__){//! moment.js locale configuration\n//! locale : Breton [br]\n//! author : Jean-Baptiste Le Duigou : https://github.com/jbleduigou\n;(function(global,factory){true?factory(__webpack_require__(\"c1df\")):undefined;})(this,function(moment){'use strict';//! moment.js locale configuration\nfunction relativeTimeWithMutation(number,withoutSuffix,key){var format={mm:'munutenn',MM:'miz',dd:'devezh'};return number+' '+mutation(format[key],number);}function specialMutationForYears(number){switch(lastNumber(number)){case 1:case 3:case 4:case 5:case 9:return number+' bloaz';default:return number+' vloaz';}}function lastNumber(number){if(number>9){return lastNumber(number%10);}return number;}function mutation(text,number){if(number===2){return softMutation(text);}return text;}function softMutation(text){var mutationTable={m:'v',b:'v',d:'z'};if(mutationTable[text.charAt(0)]===undefined){return text;}return mutationTable[text.charAt(0)]+text.substring(1);}var monthsParse=[/^gen/i,/^c[ʼ\\']hwe/i,/^meu/i,/^ebr/i,/^mae/i,/^(mez|eve)/i,/^gou/i,/^eos/i,/^gwe/i,/^her/i,/^du/i,/^ker/i],monthsRegex=/^(genver|c[ʼ\\']hwevrer|meurzh|ebrel|mae|mezheven|gouere|eost|gwengolo|here|du|kerzu|gen|c[ʼ\\']hwe|meu|ebr|mae|eve|gou|eos|gwe|her|du|ker)/i,monthsStrictRegex=/^(genver|c[ʼ\\']hwevrer|meurzh|ebrel|mae|mezheven|gouere|eost|gwengolo|here|du|kerzu)/i,monthsShortStrictRegex=/^(gen|c[ʼ\\']hwe|meu|ebr|mae|eve|gou|eos|gwe|her|du|ker)/i,fullWeekdaysParse=[/^sul/i,/^lun/i,/^meurzh/i,/^merc[ʼ\\']her/i,/^yaou/i,/^gwener/i,/^sadorn/i],shortWeekdaysParse=[/^Sul/i,/^Lun/i,/^Meu/i,/^Mer/i,/^Yao/i,/^Gwe/i,/^Sad/i],minWeekdaysParse=[/^Su/i,/^Lu/i,/^Me([^r]|$)/i,/^Mer/i,/^Ya/i,/^Gw/i,/^Sa/i];var br=moment.defineLocale('br',{months:'Genver_Cʼhwevrer_Meurzh_Ebrel_Mae_Mezheven_Gouere_Eost_Gwengolo_Here_Du_Kerzu'.split('_'),monthsShort:'Gen_Cʼhwe_Meu_Ebr_Mae_Eve_Gou_Eos_Gwe_Her_Du_Ker'.split('_'),weekdays:'Sul_Lun_Meurzh_Mercʼher_Yaou_Gwener_Sadorn'.split('_'),weekdaysShort:'Sul_Lun_Meu_Mer_Yao_Gwe_Sad'.split('_'),weekdaysMin:'Su_Lu_Me_Mer_Ya_Gw_Sa'.split('_'),weekdaysParse:minWeekdaysParse,fullWeekdaysParse:fullWeekdaysParse,shortWeekdaysParse:shortWeekdaysParse,minWeekdaysParse:minWeekdaysParse,monthsRegex:monthsRegex,monthsShortRegex:monthsRegex,monthsStrictRegex:monthsStrictRegex,monthsShortStrictRegex:monthsShortStrictRegex,monthsParse:monthsParse,longMonthsParse:monthsParse,shortMonthsParse:monthsParse,longDateFormat:{LT:'HH:mm',LTS:'HH:mm:ss',L:'DD/MM/YYYY',LL:'D [a viz] MMMM YYYY',LLL:'D [a viz] MMMM YYYY HH:mm',LLLL:'dddd, D [a viz] MMMM YYYY HH:mm'},calendar:{sameDay:'[Hiziv da] LT',nextDay:'[Warcʼhoazh da] LT',nextWeek:'dddd [da] LT',lastDay:'[Decʼh da] LT',lastWeek:'dddd [paset da] LT',sameElse:'L'},relativeTime:{future:'a-benn %s',past:'%s ʼzo',s:'un nebeud segondennoù',ss:'%d eilenn',m:'ur vunutenn',mm:relativeTimeWithMutation,h:'un eur',hh:'%d eur',d:'un devezh',dd:relativeTimeWithMutation,M:'ur miz',MM:relativeTimeWithMutation,y:'ur bloaz',yy:specialMutationForYears},dayOfMonthOrdinalParse:/\\d{1,2}(añ|vet)/,ordinal:function ordinal(number){var output=number===1?'añ':'vet';return number+output;},week:{dow:1,// Monday is the first day of the week.\ndoy:4// The week that contains Jan 4th is the first week of the year.\n},meridiemParse:/a.m.|g.m./,// goude merenn | a-raok merenn\nisPM:function isPM(token){return token==='g.m.';},meridiem:function meridiem(hour,minute,isLower){return hour<12?'a.m.':'g.m.';}});return br;});/***/},/***/\"688b\":/***/function b(module,exports,__webpack_require__){//! moment.js locale configuration\n//! locale : Maori [mi]\n//! author : John Corrigan <robbiecloset@gmail.com> : https://github.com/johnideal\n;(function(global,factory){true?factory(__webpack_require__(\"c1df\")):undefined;})(this,function(moment){'use strict';//! moment.js locale configuration\nvar mi=moment.defineLocale('mi',{months:'Kohi-tāte_Hui-tanguru_Poutū-te-rangi_Paenga-whāwhā_Haratua_Pipiri_Hōngoingoi_Here-turi-kōkā_Mahuru_Whiringa-ā-nuku_Whiringa-ā-rangi_Hakihea'.split('_'),monthsShort:'Kohi_Hui_Pou_Pae_Hara_Pipi_Hōngoi_Here_Mahu_Whi-nu_Whi-ra_Haki'.split('_'),monthsRegex:/(?:['a-z\\u0101\\u014D\\u016B]+\\-?){1,3}/i,monthsStrictRegex:/(?:['a-z\\u0101\\u014D\\u016B]+\\-?){1,3}/i,monthsShortRegex:/(?:['a-z\\u0101\\u014D\\u016B]+\\-?){1,3}/i,monthsShortStrictRegex:/(?:['a-z\\u0101\\u014D\\u016B]+\\-?){1,2}/i,weekdays:'Rātapu_Mane_Tūrei_Wenerei_Tāite_Paraire_Hātarei'.split('_'),weekdaysShort:'Ta_Ma_Tū_We_Tāi_Pa_Hā'.split('_'),weekdaysMin:'Ta_Ma_Tū_We_Tāi_Pa_Hā'.split('_'),longDateFormat:{LT:'HH:mm',LTS:'HH:mm:ss',L:'DD/MM/YYYY',LL:'D MMMM YYYY',LLL:'D MMMM YYYY [i] HH:mm',LLLL:'dddd, D MMMM YYYY [i] HH:mm'},calendar:{sameDay:'[i teie mahana, i] LT',nextDay:'[apopo i] LT',nextWeek:'dddd [i] LT',lastDay:'[inanahi i] LT',lastWeek:'dddd [whakamutunga i] LT',sameElse:'L'},relativeTime:{future:'i roto i %s',past:'%s i mua',s:'te hēkona ruarua',ss:'%d hēkona',m:'he meneti',mm:'%d meneti',h:'te haora',hh:'%d haora',d:'he ra',dd:'%d ra',M:'he marama',MM:'%d marama',y:'he tau',yy:'%d tau'},dayOfMonthOrdinalParse:/\\d{1,2}º/,ordinal:'%dº',week:{dow:1,// Monday is the first day of the week.\ndoy:4// The week that contains Jan 4th is the first week of the year.\n}});return mi;});/***/},/***/\"6909\":/***/function _(module,exports,__webpack_require__){//! moment.js locale configuration\n//! locale : Macedonian [mk]\n//! author : Borislav Mickov : https://github.com/B0k0\n//! author : Sashko Todorov : https://github.com/bkyceh\n;(function(global,factory){true?factory(__webpack_require__(\"c1df\")):undefined;})(this,function(moment){'use strict';//! moment.js locale configuration\nvar mk=moment.defineLocale('mk',{months:'јануари_февруари_март_април_мај_јуни_јули_август_септември_октомври_ноември_декември'.split('_'),monthsShort:'јан_фев_мар_апр_мај_јун_јул_авг_сеп_окт_ное_дек'.split('_'),weekdays:'недела_понеделник_вторник_среда_четврток_петок_сабота'.split('_'),weekdaysShort:'нед_пон_вто_сре_чет_пет_саб'.split('_'),weekdaysMin:'нe_пo_вт_ср_че_пе_сa'.split('_'),longDateFormat:{LT:'H:mm',LTS:'H:mm:ss',L:'D.MM.YYYY',LL:'D MMMM YYYY',LLL:'D MMMM YYYY H:mm',LLLL:'dddd, D MMMM YYYY H:mm'},calendar:{sameDay:'[Денес во] LT',nextDay:'[Утре во] LT',nextWeek:'[Во] dddd [во] LT',lastDay:'[Вчера во] LT',lastWeek:function lastWeek(){switch(this.day()){case 0:case 3:case 6:return'[Изминатата] dddd [во] LT';case 1:case 2:case 4:case 5:return'[Изминатиот] dddd [во] LT';}},sameElse:'L'},relativeTime:{future:'за %s',past:'пред %s',s:'неколку секунди',ss:'%d секунди',m:'една минута',mm:'%d минути',h:'еден час',hh:'%d часа',d:'еден ден',dd:'%d дена',M:'еден месец',MM:'%d месеци',y:'една година',yy:'%d години'},dayOfMonthOrdinalParse:/\\d{1,2}-(ев|ен|ти|ви|ри|ми)/,ordinal:function ordinal(number){var lastDigit=number%10,last2Digits=number%100;if(number===0){return number+'-ев';}else if(last2Digits===0){return number+'-ен';}else if(last2Digits>10&&last2Digits<20){return number+'-ти';}else if(lastDigit===1){return number+'-ви';}else if(lastDigit===2){return number+'-ри';}else if(lastDigit===7||lastDigit===8){return number+'-ми';}else{return number+'-ти';}},week:{dow:1,// Monday is the first day of the week.\ndoy:7// The week that contains Jan 7th is the first week of the year.\n}});return mk;});/***/},/***/\"69ea\":/***/function ea(module,__webpack_exports__,__webpack_require__){\"use strict\";/* harmony import */var _node_modules_vue_style_loader_index_js_ref_6_oneOf_1_0_node_modules_css_loader_dist_cjs_js_ref_6_oneOf_1_1_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_6_oneOf_1_2_node_modules_postcss_loader_src_index_js_ref_6_oneOf_1_3_node_modules_cache_loader_dist_cjs_js_ref_0_0_node_modules_vue_loader_lib_index_js_vue_loader_options_Chart_vue_vue_type_style_index_0_lang_css___WEBPACK_IMPORTED_MODULE_0__=__webpack_require__(\"e10c\");/* harmony import */var _node_modules_vue_style_loader_index_js_ref_6_oneOf_1_0_node_modules_css_loader_dist_cjs_js_ref_6_oneOf_1_1_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_6_oneOf_1_2_node_modules_postcss_loader_src_index_js_ref_6_oneOf_1_3_node_modules_cache_loader_dist_cjs_js_ref_0_0_node_modules_vue_loader_lib_index_js_vue_loader_options_Chart_vue_vue_type_style_index_0_lang_css___WEBPACK_IMPORTED_MODULE_0___default=/*#__PURE__*/__webpack_require__.n(_node_modules_vue_style_loader_index_js_ref_6_oneOf_1_0_node_modules_css_loader_dist_cjs_js_ref_6_oneOf_1_1_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_6_oneOf_1_2_node_modules_postcss_loader_src_index_js_ref_6_oneOf_1_3_node_modules_cache_loader_dist_cjs_js_ref_0_0_node_modules_vue_loader_lib_index_js_vue_loader_options_Chart_vue_vue_type_style_index_0_lang_css___WEBPACK_IMPORTED_MODULE_0__);/* unused harmony reexport * */ /* unused harmony default export */var _unused_webpack_default_export=_node_modules_vue_style_loader_index_js_ref_6_oneOf_1_0_node_modules_css_loader_dist_cjs_js_ref_6_oneOf_1_1_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_6_oneOf_1_2_node_modules_postcss_loader_src_index_js_ref_6_oneOf_1_3_node_modules_cache_loader_dist_cjs_js_ref_0_0_node_modules_vue_loader_lib_index_js_vue_loader_options_Chart_vue_vue_type_style_index_0_lang_css___WEBPACK_IMPORTED_MODULE_0___default.a;/***/},/***/\"6ce3\":/***/function ce3(module,exports,__webpack_require__){//! moment.js locale configuration\n//! locale : Norwegian Bokmål [nb]\n//! authors : Espen Hovlandsdal : https://github.com/rexxars\n//!           Sigurd Gartmann : https://github.com/sigurdga\n//!           Stephen Ramthun : https://github.com/stephenramthun\n;(function(global,factory){true?factory(__webpack_require__(\"c1df\")):undefined;})(this,function(moment){'use strict';//! moment.js locale configuration\nvar nb=moment.defineLocale('nb',{months:'januar_februar_mars_april_mai_juni_juli_august_september_oktober_november_desember'.split('_'),monthsShort:'jan._feb._mars_apr._mai_juni_juli_aug._sep._okt._nov._des.'.split('_'),monthsParseExact:true,weekdays:'søndag_mandag_tirsdag_onsdag_torsdag_fredag_lørdag'.split('_'),weekdaysShort:'sø._ma._ti._on._to._fr._lø.'.split('_'),weekdaysMin:'sø_ma_ti_on_to_fr_lø'.split('_'),weekdaysParseExact:true,longDateFormat:{LT:'HH:mm',LTS:'HH:mm:ss',L:'DD.MM.YYYY',LL:'D. MMMM YYYY',LLL:'D. MMMM YYYY [kl.] HH:mm',LLLL:'dddd D. MMMM YYYY [kl.] HH:mm'},calendar:{sameDay:'[i dag kl.] LT',nextDay:'[i morgen kl.] LT',nextWeek:'dddd [kl.] LT',lastDay:'[i går kl.] LT',lastWeek:'[forrige] dddd [kl.] LT',sameElse:'L'},relativeTime:{future:'om %s',past:'%s siden',s:'noen sekunder',ss:'%d sekunder',m:'ett minutt',mm:'%d minutter',h:'en time',hh:'%d timer',d:'en dag',dd:'%d dager',M:'en måned',MM:'%d måneder',y:'ett år',yy:'%d år'},dayOfMonthOrdinalParse:/\\d{1,2}\\./,ordinal:'%d.',week:{dow:1,// Monday is the first day of the week.\ndoy:4// The week that contains Jan 4th is the first week of the year.\n}});return nb;});/***/},/***/\"6d79\":/***/function d79(module,exports,__webpack_require__){//! moment.js locale configuration\n//! locale : Kazakh [kk]\n//! authors : Nurlan Rakhimzhanov : https://github.com/nurlan\n;(function(global,factory){true?factory(__webpack_require__(\"c1df\")):undefined;})(this,function(moment){'use strict';//! moment.js locale configuration\nvar suffixes={0:'-ші',1:'-ші',2:'-ші',3:'-ші',4:'-ші',5:'-ші',6:'-шы',7:'-ші',8:'-ші',9:'-шы',10:'-шы',20:'-шы',30:'-шы',40:'-шы',50:'-ші',60:'-шы',70:'-ші',80:'-ші',90:'-шы',100:'-ші'};var kk=moment.defineLocale('kk',{months:'қаңтар_ақпан_наурыз_сәуір_мамыр_маусым_шілде_тамыз_қыркүйек_қазан_қараша_желтоқсан'.split('_'),monthsShort:'қаң_ақп_нау_сәу_мам_мау_шіл_там_қыр_қаз_қар_жел'.split('_'),weekdays:'жексенбі_дүйсенбі_сейсенбі_сәрсенбі_бейсенбі_жұма_сенбі'.split('_'),weekdaysShort:'жек_дүй_сей_сәр_бей_жұм_сен'.split('_'),weekdaysMin:'жк_дй_сй_ср_бй_жм_сн'.split('_'),longDateFormat:{LT:'HH:mm',LTS:'HH:mm:ss',L:'DD.MM.YYYY',LL:'D MMMM YYYY',LLL:'D MMMM YYYY HH:mm',LLLL:'dddd, D MMMM YYYY HH:mm'},calendar:{sameDay:'[Бүгін сағат] LT',nextDay:'[Ертең сағат] LT',nextWeek:'dddd [сағат] LT',lastDay:'[Кеше сағат] LT',lastWeek:'[Өткен аптаның] dddd [сағат] LT',sameElse:'L'},relativeTime:{future:'%s ішінде',past:'%s бұрын',s:'бірнеше секунд',ss:'%d секунд',m:'бір минут',mm:'%d минут',h:'бір сағат',hh:'%d сағат',d:'бір күн',dd:'%d күн',M:'бір ай',MM:'%d ай',y:'бір жыл',yy:'%d жыл'},dayOfMonthOrdinalParse:/\\d{1,2}-(ші|шы)/,ordinal:function ordinal(number){var a=number%10,b=number>=100?100:null;return number+(suffixes[number]||suffixes[a]||suffixes[b]);},week:{dow:1,// Monday is the first day of the week.\ndoy:7// The week that contains Jan 7th is the first week of the year.\n}});return kk;});/***/},/***/\"6d83\":/***/function d83(module,exports,__webpack_require__){//! moment.js locale configuration\n//! locale  :  Arabic (Tunisia) [ar-tn]\n//! author : Nader Toukabri : https://github.com/naderio\n;(function(global,factory){true?factory(__webpack_require__(\"c1df\")):undefined;})(this,function(moment){'use strict';//! moment.js locale configuration\nvar arTn=moment.defineLocale('ar-tn',{months:'جانفي_فيفري_مارس_أفريل_ماي_جوان_جويلية_أوت_سبتمبر_أكتوبر_نوفمبر_ديسمبر'.split('_'),monthsShort:'جانفي_فيفري_مارس_أفريل_ماي_جوان_جويلية_أوت_سبتمبر_أكتوبر_نوفمبر_ديسمبر'.split('_'),weekdays:'الأحد_الإثنين_الثلاثاء_الأربعاء_الخميس_الجمعة_السبت'.split('_'),weekdaysShort:'أحد_إثنين_ثلاثاء_أربعاء_خميس_جمعة_سبت'.split('_'),weekdaysMin:'ح_ن_ث_ر_خ_ج_س'.split('_'),weekdaysParseExact:true,longDateFormat:{LT:'HH:mm',LTS:'HH:mm:ss',L:'DD/MM/YYYY',LL:'D MMMM YYYY',LLL:'D MMMM YYYY HH:mm',LLLL:'dddd D MMMM YYYY HH:mm'},calendar:{sameDay:'[اليوم على الساعة] LT',nextDay:'[غدا على الساعة] LT',nextWeek:'dddd [على الساعة] LT',lastDay:'[أمس على الساعة] LT',lastWeek:'dddd [على الساعة] LT',sameElse:'L'},relativeTime:{future:'في %s',past:'منذ %s',s:'ثوان',ss:'%d ثانية',m:'دقيقة',mm:'%d دقائق',h:'ساعة',hh:'%d ساعات',d:'يوم',dd:'%d أيام',M:'شهر',MM:'%d أشهر',y:'سنة',yy:'%d سنوات'},week:{dow:1,// Monday is the first day of the week.\ndoy:4// The week that contains Jan 4th is the first week of the year.\n}});return arTn;});/***/},/***/\"6e98\":/***/function e98(module,exports,__webpack_require__){//! moment.js locale configuration\n//! locale : Italian [it]\n//! author : Lorenzo : https://github.com/aliem\n//! author: Mattia Larentis: https://github.com/nostalgiaz\n//! author: Marco : https://github.com/Manfre98\n;(function(global,factory){true?factory(__webpack_require__(\"c1df\")):undefined;})(this,function(moment){'use strict';//! moment.js locale configuration\nvar it=moment.defineLocale('it',{months:'gennaio_febbraio_marzo_aprile_maggio_giugno_luglio_agosto_settembre_ottobre_novembre_dicembre'.split('_'),monthsShort:'gen_feb_mar_apr_mag_giu_lug_ago_set_ott_nov_dic'.split('_'),weekdays:'domenica_lunedì_martedì_mercoledì_giovedì_venerdì_sabato'.split('_'),weekdaysShort:'dom_lun_mar_mer_gio_ven_sab'.split('_'),weekdaysMin:'do_lu_ma_me_gi_ve_sa'.split('_'),longDateFormat:{LT:'HH:mm',LTS:'HH:mm:ss',L:'DD/MM/YYYY',LL:'D MMMM YYYY',LLL:'D MMMM YYYY HH:mm',LLLL:'dddd D MMMM YYYY HH:mm'},calendar:{sameDay:function sameDay(){return'[Oggi a'+(this.hours()>1?'lle ':this.hours()===0?' ':\"ll'\")+']LT';},nextDay:function nextDay(){return'[Domani a'+(this.hours()>1?'lle ':this.hours()===0?' ':\"ll'\")+']LT';},nextWeek:function nextWeek(){return'dddd [a'+(this.hours()>1?'lle ':this.hours()===0?' ':\"ll'\")+']LT';},lastDay:function lastDay(){return'[Ieri a'+(this.hours()>1?'lle ':this.hours()===0?' ':\"ll'\")+']LT';},lastWeek:function lastWeek(){switch(this.day()){case 0:return'[La scorsa] dddd [a'+(this.hours()>1?'lle ':this.hours()===0?' ':\"ll'\")+']LT';default:return'[Lo scorso] dddd [a'+(this.hours()>1?'lle ':this.hours()===0?' ':\"ll'\")+']LT';}},sameElse:'L'},relativeTime:{future:'tra %s',past:'%s fa',s:'alcuni secondi',ss:'%d secondi',m:'un minuto',mm:'%d minuti',h:\"un'ora\",hh:'%d ore',d:'un giorno',dd:'%d giorni',M:'un mese',MM:'%d mesi',y:'un anno',yy:'%d anni'},dayOfMonthOrdinalParse:/\\d{1,2}º/,ordinal:'%dº',week:{dow:1,// Monday is the first day of the week.\ndoy:4// The week that contains Jan 4th is the first week of the year.\n}});return it;});/***/},/***/\"6f12\":/***/function f12(module,exports,__webpack_require__){//! moment.js locale configuration\n//! locale : Italian (Switzerland) [it-ch]\n//! author : xfh : https://github.com/xfh\n;(function(global,factory){true?factory(__webpack_require__(\"c1df\")):undefined;})(this,function(moment){'use strict';//! moment.js locale configuration\nvar itCh=moment.defineLocale('it-ch',{months:'gennaio_febbraio_marzo_aprile_maggio_giugno_luglio_agosto_settembre_ottobre_novembre_dicembre'.split('_'),monthsShort:'gen_feb_mar_apr_mag_giu_lug_ago_set_ott_nov_dic'.split('_'),weekdays:'domenica_lunedì_martedì_mercoledì_giovedì_venerdì_sabato'.split('_'),weekdaysShort:'dom_lun_mar_mer_gio_ven_sab'.split('_'),weekdaysMin:'do_lu_ma_me_gi_ve_sa'.split('_'),longDateFormat:{LT:'HH:mm',LTS:'HH:mm:ss',L:'DD.MM.YYYY',LL:'D MMMM YYYY',LLL:'D MMMM YYYY HH:mm',LLLL:'dddd D MMMM YYYY HH:mm'},calendar:{sameDay:'[Oggi alle] LT',nextDay:'[Domani alle] LT',nextWeek:'dddd [alle] LT',lastDay:'[Ieri alle] LT',lastWeek:function lastWeek(){switch(this.day()){case 0:return'[la scorsa] dddd [alle] LT';default:return'[lo scorso] dddd [alle] LT';}},sameElse:'L'},relativeTime:{future:function future(s){return(/^[0-9].+$/.test(s)?'tra':'in')+' '+s;},past:'%s fa',s:'alcuni secondi',ss:'%d secondi',m:'un minuto',mm:'%d minuti',h:\"un'ora\",hh:'%d ore',d:'un giorno',dd:'%d giorni',M:'un mese',MM:'%d mesi',y:'un anno',yy:'%d anni'},dayOfMonthOrdinalParse:/\\d{1,2}º/,ordinal:'%dº',week:{dow:1,// Monday is the first day of the week.\ndoy:4// The week that contains Jan 4th is the first week of the year.\n}});return itCh;});/***/},/***/\"6f50\":/***/function f50(module,exports,__webpack_require__){//! moment.js locale configuration\n//! locale : English (New Zealand) [en-nz]\n//! author : Luke McGregor : https://github.com/lukemcgregor\n;(function(global,factory){true?factory(__webpack_require__(\"c1df\")):undefined;})(this,function(moment){'use strict';//! moment.js locale configuration\nvar enNz=moment.defineLocale('en-nz',{months:'January_February_March_April_May_June_July_August_September_October_November_December'.split('_'),monthsShort:'Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec'.split('_'),weekdays:'Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday'.split('_'),weekdaysShort:'Sun_Mon_Tue_Wed_Thu_Fri_Sat'.split('_'),weekdaysMin:'Su_Mo_Tu_We_Th_Fr_Sa'.split('_'),longDateFormat:{LT:'h:mm A',LTS:'h:mm:ss A',L:'DD/MM/YYYY',LL:'D MMMM YYYY',LLL:'D MMMM YYYY h:mm A',LLLL:'dddd, D MMMM YYYY h:mm A'},calendar:{sameDay:'[Today at] LT',nextDay:'[Tomorrow at] LT',nextWeek:'dddd [at] LT',lastDay:'[Yesterday at] LT',lastWeek:'[Last] dddd [at] LT',sameElse:'L'},relativeTime:{future:'in %s',past:'%s ago',s:'a few seconds',ss:'%d seconds',m:'a minute',mm:'%d minutes',h:'an hour',hh:'%d hours',d:'a day',dd:'%d days',M:'a month',MM:'%d months',y:'a year',yy:'%d years'},dayOfMonthOrdinalParse:/\\d{1,2}(st|nd|rd|th)/,ordinal:function ordinal(number){var b=number%10,output=~~(number%100/10)===1?'th':b===1?'st':b===2?'nd':b===3?'rd':'th';return number+output;},week:{dow:1,// Monday is the first day of the week.\ndoy:4// The week that contains Jan 4th is the first week of the year.\n}});return enNz;});/***/},/***/\"7118\":/***/function _(module,exports,__webpack_require__){//! moment.js locale configuration\n//! locale : Frisian [fy]\n//! author : Robin van der Vliet : https://github.com/robin0van0der0v\n;(function(global,factory){true?factory(__webpack_require__(\"c1df\")):undefined;})(this,function(moment){'use strict';//! moment.js locale configuration\nvar monthsShortWithDots='jan._feb._mrt._apr._mai_jun._jul._aug._sep._okt._nov._des.'.split('_'),monthsShortWithoutDots='jan_feb_mrt_apr_mai_jun_jul_aug_sep_okt_nov_des'.split('_');var fy=moment.defineLocale('fy',{months:'jannewaris_febrewaris_maart_april_maaie_juny_july_augustus_septimber_oktober_novimber_desimber'.split('_'),monthsShort:function monthsShort(m,format){if(!m){return monthsShortWithDots;}else if(/-MMM-/.test(format)){return monthsShortWithoutDots[m.month()];}else{return monthsShortWithDots[m.month()];}},monthsParseExact:true,weekdays:'snein_moandei_tiisdei_woansdei_tongersdei_freed_sneon'.split('_'),weekdaysShort:'si._mo._ti._wo._to._fr._so.'.split('_'),weekdaysMin:'Si_Mo_Ti_Wo_To_Fr_So'.split('_'),weekdaysParseExact:true,longDateFormat:{LT:'HH:mm',LTS:'HH:mm:ss',L:'DD-MM-YYYY',LL:'D MMMM YYYY',LLL:'D MMMM YYYY HH:mm',LLLL:'dddd D MMMM YYYY HH:mm'},calendar:{sameDay:'[hjoed om] LT',nextDay:'[moarn om] LT',nextWeek:'dddd [om] LT',lastDay:'[juster om] LT',lastWeek:'[ôfrûne] dddd [om] LT',sameElse:'L'},relativeTime:{future:'oer %s',past:'%s lyn',s:'in pear sekonden',ss:'%d sekonden',m:'ien minút',mm:'%d minuten',h:'ien oere',hh:'%d oeren',d:'ien dei',dd:'%d dagen',M:'ien moanne',MM:'%d moannen',y:'ien jier',yy:'%d jierren'},dayOfMonthOrdinalParse:/\\d{1,2}(ste|de)/,ordinal:function ordinal(number){return number+(number===1||number===8||number>=20?'ste':'de');},week:{dow:1,// Monday is the first day of the week.\ndoy:4// The week that contains Jan 4th is the first week of the year.\n}});return fy;});/***/},/***/\"7333\":/***/function _(module,exports,__webpack_require__){//! moment.js locale configuration\n//! locale : English (Israel) [en-il]\n//! author : Chris Gedrim : https://github.com/chrisgedrim\n;(function(global,factory){true?factory(__webpack_require__(\"c1df\")):undefined;})(this,function(moment){'use strict';//! moment.js locale configuration\nvar enIl=moment.defineLocale('en-il',{months:'January_February_March_April_May_June_July_August_September_October_November_December'.split('_'),monthsShort:'Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec'.split('_'),weekdays:'Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday'.split('_'),weekdaysShort:'Sun_Mon_Tue_Wed_Thu_Fri_Sat'.split('_'),weekdaysMin:'Su_Mo_Tu_We_Th_Fr_Sa'.split('_'),longDateFormat:{LT:'HH:mm',LTS:'HH:mm:ss',L:'DD/MM/YYYY',LL:'D MMMM YYYY',LLL:'D MMMM YYYY HH:mm',LLLL:'dddd, D MMMM YYYY HH:mm'},calendar:{sameDay:'[Today at] LT',nextDay:'[Tomorrow at] LT',nextWeek:'dddd [at] LT',lastDay:'[Yesterday at] LT',lastWeek:'[Last] dddd [at] LT',sameElse:'L'},relativeTime:{future:'in %s',past:'%s ago',s:'a few seconds',ss:'%d seconds',m:'a minute',mm:'%d minutes',h:'an hour',hh:'%d hours',d:'a day',dd:'%d days',M:'a month',MM:'%d months',y:'a year',yy:'%d years'},dayOfMonthOrdinalParse:/\\d{1,2}(st|nd|rd|th)/,ordinal:function ordinal(number){var b=number%10,output=~~(number%100/10)===1?'th':b===1?'st':b===2?'nd':b===3?'rd':'th';return number+output;}});return enIl;});/***/},/***/\"74dc\":/***/function dc(module,exports,__webpack_require__){//! moment.js locale configuration\n//! locale : Swahili [sw]\n//! author : Fahad Kassim : https://github.com/fadsel\n;(function(global,factory){true?factory(__webpack_require__(\"c1df\")):undefined;})(this,function(moment){'use strict';//! moment.js locale configuration\nvar sw=moment.defineLocale('sw',{months:'Januari_Februari_Machi_Aprili_Mei_Juni_Julai_Agosti_Septemba_Oktoba_Novemba_Desemba'.split('_'),monthsShort:'Jan_Feb_Mac_Apr_Mei_Jun_Jul_Ago_Sep_Okt_Nov_Des'.split('_'),weekdays:'Jumapili_Jumatatu_Jumanne_Jumatano_Alhamisi_Ijumaa_Jumamosi'.split('_'),weekdaysShort:'Jpl_Jtat_Jnne_Jtan_Alh_Ijm_Jmos'.split('_'),weekdaysMin:'J2_J3_J4_J5_Al_Ij_J1'.split('_'),weekdaysParseExact:true,longDateFormat:{LT:'hh:mm A',LTS:'HH:mm:ss',L:'DD.MM.YYYY',LL:'D MMMM YYYY',LLL:'D MMMM YYYY HH:mm',LLLL:'dddd, D MMMM YYYY HH:mm'},calendar:{sameDay:'[leo saa] LT',nextDay:'[kesho saa] LT',nextWeek:'[wiki ijayo] dddd [saat] LT',lastDay:'[jana] LT',lastWeek:'[wiki iliyopita] dddd [saat] LT',sameElse:'L'},relativeTime:{future:'%s baadaye',past:'tokea %s',s:'hivi punde',ss:'sekunde %d',m:'dakika moja',mm:'dakika %d',h:'saa limoja',hh:'masaa %d',d:'siku moja',dd:'siku %d',M:'mwezi mmoja',MM:'miezi %d',y:'mwaka mmoja',yy:'miaka %d'},week:{dow:1,// Monday is the first day of the week.\ndoy:7// The week that contains Jan 7th is the first week of the year.\n}});return sw;});/***/},/***/\"7be6\":/***/function be6(module,exports,__webpack_require__){//! moment.js locale configuration\n//! locale : Slovak [sk]\n//! author : Martin Minka : https://github.com/k2s\n//! based on work of petrbela : https://github.com/petrbela\n;(function(global,factory){true?factory(__webpack_require__(\"c1df\")):undefined;})(this,function(moment){'use strict';//! moment.js locale configuration\nvar months='január_február_marec_apríl_máj_jún_júl_august_september_október_november_december'.split('_'),monthsShort='jan_feb_mar_apr_máj_jún_júl_aug_sep_okt_nov_dec'.split('_');function plural(n){return n>1&&n<5;}function translate(number,withoutSuffix,key,isFuture){var result=number+' ';switch(key){case's':// a few seconds / in a few seconds / a few seconds ago\nreturn withoutSuffix||isFuture?'pár sekúnd':'pár sekundami';case'ss':// 9 seconds / in 9 seconds / 9 seconds ago\nif(withoutSuffix||isFuture){return result+(plural(number)?'sekundy':'sekúnd');}else{return result+'sekundami';}case'm':// a minute / in a minute / a minute ago\nreturn withoutSuffix?'minúta':isFuture?'minútu':'minútou';case'mm':// 9 minutes / in 9 minutes / 9 minutes ago\nif(withoutSuffix||isFuture){return result+(plural(number)?'minúty':'minút');}else{return result+'minútami';}case'h':// an hour / in an hour / an hour ago\nreturn withoutSuffix?'hodina':isFuture?'hodinu':'hodinou';case'hh':// 9 hours / in 9 hours / 9 hours ago\nif(withoutSuffix||isFuture){return result+(plural(number)?'hodiny':'hodín');}else{return result+'hodinami';}case'd':// a day / in a day / a day ago\nreturn withoutSuffix||isFuture?'deň':'dňom';case'dd':// 9 days / in 9 days / 9 days ago\nif(withoutSuffix||isFuture){return result+(plural(number)?'dni':'dní');}else{return result+'dňami';}case'M':// a month / in a month / a month ago\nreturn withoutSuffix||isFuture?'mesiac':'mesiacom';case'MM':// 9 months / in 9 months / 9 months ago\nif(withoutSuffix||isFuture){return result+(plural(number)?'mesiace':'mesiacov');}else{return result+'mesiacmi';}case'y':// a year / in a year / a year ago\nreturn withoutSuffix||isFuture?'rok':'rokom';case'yy':// 9 years / in 9 years / 9 years ago\nif(withoutSuffix||isFuture){return result+(plural(number)?'roky':'rokov');}else{return result+'rokmi';}}}var sk=moment.defineLocale('sk',{months:months,monthsShort:monthsShort,weekdays:'nedeľa_pondelok_utorok_streda_štvrtok_piatok_sobota'.split('_'),weekdaysShort:'ne_po_ut_st_št_pi_so'.split('_'),weekdaysMin:'ne_po_ut_st_št_pi_so'.split('_'),longDateFormat:{LT:'H:mm',LTS:'H:mm:ss',L:'DD.MM.YYYY',LL:'D. MMMM YYYY',LLL:'D. MMMM YYYY H:mm',LLLL:'dddd D. MMMM YYYY H:mm'},calendar:{sameDay:'[dnes o] LT',nextDay:'[zajtra o] LT',nextWeek:function nextWeek(){switch(this.day()){case 0:return'[v nedeľu o] LT';case 1:case 2:return'[v] dddd [o] LT';case 3:return'[v stredu o] LT';case 4:return'[vo štvrtok o] LT';case 5:return'[v piatok o] LT';case 6:return'[v sobotu o] LT';}},lastDay:'[včera o] LT',lastWeek:function lastWeek(){switch(this.day()){case 0:return'[minulú nedeľu o] LT';case 1:case 2:return'[minulý] dddd [o] LT';case 3:return'[minulú stredu o] LT';case 4:case 5:return'[minulý] dddd [o] LT';case 6:return'[minulú sobotu o] LT';}},sameElse:'L'},relativeTime:{future:'za %s',past:'pred %s',s:translate,ss:translate,m:translate,mm:translate,h:translate,hh:translate,d:translate,dd:translate,M:translate,MM:translate,y:translate,yy:translate},dayOfMonthOrdinalParse:/\\d{1,2}\\./,ordinal:'%d.',week:{dow:1,// Monday is the first day of the week.\ndoy:4// The week that contains Jan 4th is the first week of the year.\n}});return sk;});/***/},/***/\"7f33\":/***/function f33(module,exports,__webpack_require__){//! moment.js locale configuration\n//! locale : Yoruba Nigeria [yo]\n//! author : Atolagbe Abisoye : https://github.com/andela-batolagbe\n;(function(global,factory){true?factory(__webpack_require__(\"c1df\")):undefined;})(this,function(moment){'use strict';//! moment.js locale configuration\nvar yo=moment.defineLocale('yo',{months:'Sẹ́rẹ́_Èrèlè_Ẹrẹ̀nà_Ìgbé_Èbibi_Òkùdu_Agẹmo_Ògún_Owewe_Ọ̀wàrà_Bélú_Ọ̀pẹ̀̀'.split('_'),monthsShort:'Sẹ́r_Èrl_Ẹrn_Ìgb_Èbi_Òkù_Agẹ_Ògú_Owe_Ọ̀wà_Bél_Ọ̀pẹ̀̀'.split('_'),weekdays:'Àìkú_Ajé_Ìsẹ́gun_Ọjọ́rú_Ọjọ́bọ_Ẹtì_Àbámẹ́ta'.split('_'),weekdaysShort:'Àìk_Ajé_Ìsẹ́_Ọjr_Ọjb_Ẹtì_Àbá'.split('_'),weekdaysMin:'Àì_Aj_Ìs_Ọr_Ọb_Ẹt_Àb'.split('_'),longDateFormat:{LT:'h:mm A',LTS:'h:mm:ss A',L:'DD/MM/YYYY',LL:'D MMMM YYYY',LLL:'D MMMM YYYY h:mm A',LLLL:'dddd, D MMMM YYYY h:mm A'},calendar:{sameDay:'[Ònì ni] LT',nextDay:'[Ọ̀la ni] LT',nextWeek:\"dddd [Ọsẹ̀ tón'bọ] [ni] LT\",lastDay:'[Àna ni] LT',lastWeek:'dddd [Ọsẹ̀ tólọ́] [ni] LT',sameElse:'L'},relativeTime:{future:'ní %s',past:'%s kọjá',s:'ìsẹjú aayá die',ss:'aayá %d',m:'ìsẹjú kan',mm:'ìsẹjú %d',h:'wákati kan',hh:'wákati %d',d:'ọjọ́ kan',dd:'ọjọ́ %d',M:'osù kan',MM:'osù %d',y:'ọdún kan',yy:'ọdún %d'},dayOfMonthOrdinalParse:/ọjọ́\\s\\d{1,2}/,ordinal:'ọjọ́ %d',week:{dow:1,// Monday is the first day of the week.\ndoy:4// The week that contains Jan 4th is the first week of the year.\n}});return yo;});/***/},/***/\"8155\":/***/function _(module,exports,__webpack_require__){//! moment.js locale configuration\n//! locale : Slovenian [sl]\n//! author : Robert Sedovšek : https://github.com/sedovsek\n;(function(global,factory){true?factory(__webpack_require__(\"c1df\")):undefined;})(this,function(moment){'use strict';//! moment.js locale configuration\nfunction processRelativeTime(number,withoutSuffix,key,isFuture){var result=number+' ';switch(key){case's':return withoutSuffix||isFuture?'nekaj sekund':'nekaj sekundami';case'ss':if(number===1){result+=withoutSuffix?'sekundo':'sekundi';}else if(number===2){result+=withoutSuffix||isFuture?'sekundi':'sekundah';}else if(number<5){result+=withoutSuffix||isFuture?'sekunde':'sekundah';}else{result+='sekund';}return result;case'm':return withoutSuffix?'ena minuta':'eno minuto';case'mm':if(number===1){result+=withoutSuffix?'minuta':'minuto';}else if(number===2){result+=withoutSuffix||isFuture?'minuti':'minutama';}else if(number<5){result+=withoutSuffix||isFuture?'minute':'minutami';}else{result+=withoutSuffix||isFuture?'minut':'minutami';}return result;case'h':return withoutSuffix?'ena ura':'eno uro';case'hh':if(number===1){result+=withoutSuffix?'ura':'uro';}else if(number===2){result+=withoutSuffix||isFuture?'uri':'urama';}else if(number<5){result+=withoutSuffix||isFuture?'ure':'urami';}else{result+=withoutSuffix||isFuture?'ur':'urami';}return result;case'd':return withoutSuffix||isFuture?'en dan':'enim dnem';case'dd':if(number===1){result+=withoutSuffix||isFuture?'dan':'dnem';}else if(number===2){result+=withoutSuffix||isFuture?'dni':'dnevoma';}else{result+=withoutSuffix||isFuture?'dni':'dnevi';}return result;case'M':return withoutSuffix||isFuture?'en mesec':'enim mesecem';case'MM':if(number===1){result+=withoutSuffix||isFuture?'mesec':'mesecem';}else if(number===2){result+=withoutSuffix||isFuture?'meseca':'mesecema';}else if(number<5){result+=withoutSuffix||isFuture?'mesece':'meseci';}else{result+=withoutSuffix||isFuture?'mesecev':'meseci';}return result;case'y':return withoutSuffix||isFuture?'eno leto':'enim letom';case'yy':if(number===1){result+=withoutSuffix||isFuture?'leto':'letom';}else if(number===2){result+=withoutSuffix||isFuture?'leti':'letoma';}else if(number<5){result+=withoutSuffix||isFuture?'leta':'leti';}else{result+=withoutSuffix||isFuture?'let':'leti';}return result;}}var sl=moment.defineLocale('sl',{months:'januar_februar_marec_april_maj_junij_julij_avgust_september_oktober_november_december'.split('_'),monthsShort:'jan._feb._mar._apr._maj._jun._jul._avg._sep._okt._nov._dec.'.split('_'),monthsParseExact:true,weekdays:'nedelja_ponedeljek_torek_sreda_četrtek_petek_sobota'.split('_'),weekdaysShort:'ned._pon._tor._sre._čet._pet._sob.'.split('_'),weekdaysMin:'ne_po_to_sr_če_pe_so'.split('_'),weekdaysParseExact:true,longDateFormat:{LT:'H:mm',LTS:'H:mm:ss',L:'DD. MM. YYYY',LL:'D. MMMM YYYY',LLL:'D. MMMM YYYY H:mm',LLLL:'dddd, D. MMMM YYYY H:mm'},calendar:{sameDay:'[danes ob] LT',nextDay:'[jutri ob] LT',nextWeek:function nextWeek(){switch(this.day()){case 0:return'[v] [nedeljo] [ob] LT';case 3:return'[v] [sredo] [ob] LT';case 6:return'[v] [soboto] [ob] LT';case 1:case 2:case 4:case 5:return'[v] dddd [ob] LT';}},lastDay:'[včeraj ob] LT',lastWeek:function lastWeek(){switch(this.day()){case 0:return'[prejšnjo] [nedeljo] [ob] LT';case 3:return'[prejšnjo] [sredo] [ob] LT';case 6:return'[prejšnjo] [soboto] [ob] LT';case 1:case 2:case 4:case 5:return'[prejšnji] dddd [ob] LT';}},sameElse:'L'},relativeTime:{future:'čez %s',past:'pred %s',s:processRelativeTime,ss:processRelativeTime,m:processRelativeTime,mm:processRelativeTime,h:processRelativeTime,hh:processRelativeTime,d:processRelativeTime,dd:processRelativeTime,M:processRelativeTime,MM:processRelativeTime,y:processRelativeTime,yy:processRelativeTime},dayOfMonthOrdinalParse:/\\d{1,2}\\./,ordinal:'%d.',week:{dow:1,// Monday is the first day of the week.\ndoy:7// The week that contains Jan 7th is the first week of the year.\n}});return sl;});/***/},/***/\"81e9\":/***/function e9(module,exports,__webpack_require__){//! moment.js locale configuration\n//! locale : Finnish [fi]\n//! author : Tarmo Aidantausta : https://github.com/bleadof\n;(function(global,factory){true?factory(__webpack_require__(\"c1df\")):undefined;})(this,function(moment){'use strict';//! moment.js locale configuration\nvar numbersPast='nolla yksi kaksi kolme neljä viisi kuusi seitsemän kahdeksan yhdeksän'.split(' '),numbersFuture=['nolla','yhden','kahden','kolmen','neljän','viiden','kuuden',numbersPast[7],numbersPast[8],numbersPast[9]];function translate(number,withoutSuffix,key,isFuture){var result='';switch(key){case's':return isFuture?'muutaman sekunnin':'muutama sekunti';case'ss':result=isFuture?'sekunnin':'sekuntia';break;case'm':return isFuture?'minuutin':'minuutti';case'mm':result=isFuture?'minuutin':'minuuttia';break;case'h':return isFuture?'tunnin':'tunti';case'hh':result=isFuture?'tunnin':'tuntia';break;case'd':return isFuture?'päivän':'päivä';case'dd':result=isFuture?'päivän':'päivää';break;case'M':return isFuture?'kuukauden':'kuukausi';case'MM':result=isFuture?'kuukauden':'kuukautta';break;case'y':return isFuture?'vuoden':'vuosi';case'yy':result=isFuture?'vuoden':'vuotta';break;}result=verbalNumber(number,isFuture)+' '+result;return result;}function verbalNumber(number,isFuture){return number<10?isFuture?numbersFuture[number]:numbersPast[number]:number;}var fi=moment.defineLocale('fi',{months:'tammikuu_helmikuu_maaliskuu_huhtikuu_toukokuu_kesäkuu_heinäkuu_elokuu_syyskuu_lokakuu_marraskuu_joulukuu'.split('_'),monthsShort:'tammi_helmi_maalis_huhti_touko_kesä_heinä_elo_syys_loka_marras_joulu'.split('_'),weekdays:'sunnuntai_maanantai_tiistai_keskiviikko_torstai_perjantai_lauantai'.split('_'),weekdaysShort:'su_ma_ti_ke_to_pe_la'.split('_'),weekdaysMin:'su_ma_ti_ke_to_pe_la'.split('_'),longDateFormat:{LT:'HH.mm',LTS:'HH.mm.ss',L:'DD.MM.YYYY',LL:'Do MMMM[ta] YYYY',LLL:'Do MMMM[ta] YYYY, [klo] HH.mm',LLLL:'dddd, Do MMMM[ta] YYYY, [klo] HH.mm',l:'D.M.YYYY',ll:'Do MMM YYYY',lll:'Do MMM YYYY, [klo] HH.mm',llll:'ddd, Do MMM YYYY, [klo] HH.mm'},calendar:{sameDay:'[tänään] [klo] LT',nextDay:'[huomenna] [klo] LT',nextWeek:'dddd [klo] LT',lastDay:'[eilen] [klo] LT',lastWeek:'[viime] dddd[na] [klo] LT',sameElse:'L'},relativeTime:{future:'%s päästä',past:'%s sitten',s:translate,ss:translate,m:translate,mm:translate,h:translate,hh:translate,d:translate,dd:translate,M:translate,MM:translate,y:translate,yy:translate},dayOfMonthOrdinalParse:/\\d{1,2}\\./,ordinal:'%d.',week:{dow:1,// Monday is the first day of the week.\ndoy:4// The week that contains Jan 4th is the first week of the year.\n}});return fi;});/***/},/***/\"8230\":/***/function _(module,exports,__webpack_require__){//! moment.js locale configuration\n//! locale : Arabic (Saudi Arabia) [ar-sa]\n//! author : Suhail Alkowaileet : https://github.com/xsoh\n;(function(global,factory){true?factory(__webpack_require__(\"c1df\")):undefined;})(this,function(moment){'use strict';//! moment.js locale configuration\nvar symbolMap={'1':'١','2':'٢','3':'٣','4':'٤','5':'٥','6':'٦','7':'٧','8':'٨','9':'٩','0':'٠'},numberMap={'١':'1','٢':'2','٣':'3','٤':'4','٥':'5','٦':'6','٧':'7','٨':'8','٩':'9','٠':'0'};var arSa=moment.defineLocale('ar-sa',{months:'يناير_فبراير_مارس_أبريل_مايو_يونيو_يوليو_أغسطس_سبتمبر_أكتوبر_نوفمبر_ديسمبر'.split('_'),monthsShort:'يناير_فبراير_مارس_أبريل_مايو_يونيو_يوليو_أغسطس_سبتمبر_أكتوبر_نوفمبر_ديسمبر'.split('_'),weekdays:'الأحد_الإثنين_الثلاثاء_الأربعاء_الخميس_الجمعة_السبت'.split('_'),weekdaysShort:'أحد_إثنين_ثلاثاء_أربعاء_خميس_جمعة_سبت'.split('_'),weekdaysMin:'ح_ن_ث_ر_خ_ج_س'.split('_'),weekdaysParseExact:true,longDateFormat:{LT:'HH:mm',LTS:'HH:mm:ss',L:'DD/MM/YYYY',LL:'D MMMM YYYY',LLL:'D MMMM YYYY HH:mm',LLLL:'dddd D MMMM YYYY HH:mm'},meridiemParse:/ص|م/,isPM:function isPM(input){return'م'===input;},meridiem:function meridiem(hour,minute,isLower){if(hour<12){return'ص';}else{return'م';}},calendar:{sameDay:'[اليوم على الساعة] LT',nextDay:'[غدا على الساعة] LT',nextWeek:'dddd [على الساعة] LT',lastDay:'[أمس على الساعة] LT',lastWeek:'dddd [على الساعة] LT',sameElse:'L'},relativeTime:{future:'في %s',past:'منذ %s',s:'ثوان',ss:'%d ثانية',m:'دقيقة',mm:'%d دقائق',h:'ساعة',hh:'%d ساعات',d:'يوم',dd:'%d أيام',M:'شهر',MM:'%d أشهر',y:'سنة',yy:'%d سنوات'},preparse:function preparse(string){return string.replace(/[١٢٣٤٥٦٧٨٩٠]/g,function(match){return numberMap[match];}).replace(/،/g,',');},postformat:function postformat(string){return string.replace(/\\d/g,function(match){return symbolMap[match];}).replace(/,/g,'،');},week:{dow:0,// Sunday is the first day of the week.\ndoy:6// The week that contains Jan 6th is the first week of the year.\n}});return arSa;});/***/},/***/\"84aa\":/***/function aa(module,exports,__webpack_require__){//! moment.js locale configuration\n//! locale : Bulgarian [bg]\n//! author : Krasen Borisov : https://github.com/kraz\n;(function(global,factory){true?factory(__webpack_require__(\"c1df\")):undefined;})(this,function(moment){'use strict';//! moment.js locale configuration\nvar bg=moment.defineLocale('bg',{months:'януари_февруари_март_април_май_юни_юли_август_септември_октомври_ноември_декември'.split('_'),monthsShort:'яну_фев_мар_апр_май_юни_юли_авг_сеп_окт_ное_дек'.split('_'),weekdays:'неделя_понеделник_вторник_сряда_четвъртък_петък_събота'.split('_'),weekdaysShort:'нед_пон_вто_сря_чет_пет_съб'.split('_'),weekdaysMin:'нд_пн_вт_ср_чт_пт_сб'.split('_'),longDateFormat:{LT:'H:mm',LTS:'H:mm:ss',L:'D.MM.YYYY',LL:'D MMMM YYYY',LLL:'D MMMM YYYY H:mm',LLLL:'dddd, D MMMM YYYY H:mm'},calendar:{sameDay:'[Днес в] LT',nextDay:'[Утре в] LT',nextWeek:'dddd [в] LT',lastDay:'[Вчера в] LT',lastWeek:function lastWeek(){switch(this.day()){case 0:case 3:case 6:return'[Миналата] dddd [в] LT';case 1:case 2:case 4:case 5:return'[Миналия] dddd [в] LT';}},sameElse:'L'},relativeTime:{future:'след %s',past:'преди %s',s:'няколко секунди',ss:'%d секунди',m:'минута',mm:'%d минути',h:'час',hh:'%d часа',d:'ден',dd:'%d дена',M:'месец',MM:'%d месеца',y:'година',yy:'%d години'},dayOfMonthOrdinalParse:/\\d{1,2}-(ев|ен|ти|ви|ри|ми)/,ordinal:function ordinal(number){var lastDigit=number%10,last2Digits=number%100;if(number===0){return number+'-ев';}else if(last2Digits===0){return number+'-ен';}else if(last2Digits>10&&last2Digits<20){return number+'-ти';}else if(lastDigit===1){return number+'-ви';}else if(lastDigit===2){return number+'-ри';}else if(lastDigit===7||lastDigit===8){return number+'-ми';}else{return number+'-ти';}},week:{dow:1,// Monday is the first day of the week.\ndoy:7// The week that contains Jan 7th is the first week of the year.\n}});return bg;});/***/},/***/\"8689\":/***/function _(module,exports,__webpack_require__){//! moment.js locale configuration\n//! locale : Burmese [my]\n//! author : Squar team, mysquar.com\n//! author : David Rossellat : https://github.com/gholadr\n//! author : Tin Aung Lin : https://github.com/thanyawzinmin\n;(function(global,factory){true?factory(__webpack_require__(\"c1df\")):undefined;})(this,function(moment){'use strict';//! moment.js locale configuration\nvar symbolMap={'1':'၁','2':'၂','3':'၃','4':'၄','5':'၅','6':'၆','7':'၇','8':'၈','9':'၉','0':'၀'},numberMap={'၁':'1','၂':'2','၃':'3','၄':'4','၅':'5','၆':'6','၇':'7','၈':'8','၉':'9','၀':'0'};var my=moment.defineLocale('my',{months:'ဇန်နဝါရီ_ဖေဖော်ဝါရီ_မတ်_ဧပြီ_မေ_ဇွန်_ဇူလိုင်_သြဂုတ်_စက်တင်ဘာ_အောက်တိုဘာ_နိုဝင်ဘာ_ဒီဇင်ဘာ'.split('_'),monthsShort:'ဇန်_ဖေ_မတ်_ပြီ_မေ_ဇွန်_လိုင်_သြ_စက်_အောက်_နို_ဒီ'.split('_'),weekdays:'တနင်္ဂနွေ_တနင်္လာ_အင်္ဂါ_ဗုဒ္ဓဟူး_ကြာသပတေး_သောကြာ_စနေ'.split('_'),weekdaysShort:'နွေ_လာ_ဂါ_ဟူး_ကြာ_သော_နေ'.split('_'),weekdaysMin:'နွေ_လာ_ဂါ_ဟူး_ကြာ_သော_နေ'.split('_'),longDateFormat:{LT:'HH:mm',LTS:'HH:mm:ss',L:'DD/MM/YYYY',LL:'D MMMM YYYY',LLL:'D MMMM YYYY HH:mm',LLLL:'dddd D MMMM YYYY HH:mm'},calendar:{sameDay:'[ယနေ.] LT [မှာ]',nextDay:'[မနက်ဖြန်] LT [မှာ]',nextWeek:'dddd LT [မှာ]',lastDay:'[မနေ.က] LT [မှာ]',lastWeek:'[ပြီးခဲ့သော] dddd LT [မှာ]',sameElse:'L'},relativeTime:{future:'လာမည့် %s မှာ',past:'လွန်ခဲ့သော %s က',s:'စက္ကန်.အနည်းငယ်',ss:'%d စက္ကန့်',m:'တစ်မိနစ်',mm:'%d မိနစ်',h:'တစ်နာရီ',hh:'%d နာရီ',d:'တစ်ရက်',dd:'%d ရက်',M:'တစ်လ',MM:'%d လ',y:'တစ်နှစ်',yy:'%d နှစ်'},preparse:function preparse(string){return string.replace(/[၁၂၃၄၅၆၇၈၉၀]/g,function(match){return numberMap[match];});},postformat:function postformat(string){return string.replace(/\\d/g,function(match){return symbolMap[match];});},week:{dow:1,// Monday is the first day of the week.\ndoy:4// The week that contains Jan 4th is the first week of the year.\n}});return my;});/***/},/***/\"8840\":/***/function _(module,exports,__webpack_require__){//! moment.js locale configuration\n//! locale : Galician [gl]\n//! author : Juan G. Hurtado : https://github.com/juanghurtado\n;(function(global,factory){true?factory(__webpack_require__(\"c1df\")):undefined;})(this,function(moment){'use strict';//! moment.js locale configuration\nvar gl=moment.defineLocale('gl',{months:'xaneiro_febreiro_marzo_abril_maio_xuño_xullo_agosto_setembro_outubro_novembro_decembro'.split('_'),monthsShort:'xan._feb._mar._abr._mai._xuñ._xul._ago._set._out._nov._dec.'.split('_'),monthsParseExact:true,weekdays:'domingo_luns_martes_mércores_xoves_venres_sábado'.split('_'),weekdaysShort:'dom._lun._mar._mér._xov._ven._sáb.'.split('_'),weekdaysMin:'do_lu_ma_mé_xo_ve_sá'.split('_'),weekdaysParseExact:true,longDateFormat:{LT:'H:mm',LTS:'H:mm:ss',L:'DD/MM/YYYY',LL:'D [de] MMMM [de] YYYY',LLL:'D [de] MMMM [de] YYYY H:mm',LLLL:'dddd, D [de] MMMM [de] YYYY H:mm'},calendar:{sameDay:function sameDay(){return'[hoxe '+(this.hours()!==1?'ás':'á')+'] LT';},nextDay:function nextDay(){return'[mañá '+(this.hours()!==1?'ás':'á')+'] LT';},nextWeek:function nextWeek(){return'dddd ['+(this.hours()!==1?'ás':'a')+'] LT';},lastDay:function lastDay(){return'[onte '+(this.hours()!==1?'á':'a')+'] LT';},lastWeek:function lastWeek(){return'[o] dddd [pasado '+(this.hours()!==1?'ás':'a')+'] LT';},sameElse:'L'},relativeTime:{future:function future(str){if(str.indexOf('un')===0){return'n'+str;}return'en '+str;},past:'hai %s',s:'uns segundos',ss:'%d segundos',m:'un minuto',mm:'%d minutos',h:'unha hora',hh:'%d horas',d:'un día',dd:'%d días',M:'un mes',MM:'%d meses',y:'un ano',yy:'%d anos'},dayOfMonthOrdinalParse:/\\d{1,2}º/,ordinal:'%dº',week:{dow:1,// Monday is the first day of the week.\ndoy:4// The week that contains Jan 4th is the first week of the year.\n}});return gl;});/***/},/***/\"8875\":/***/function _(module,exports,__webpack_require__){var __WEBPACK_AMD_DEFINE_FACTORY__,__WEBPACK_AMD_DEFINE_ARRAY__,__WEBPACK_AMD_DEFINE_RESULT__;// addapted from the document.currentScript polyfill by Adam Miller\n// MIT license\n// source: https://github.com/amiller-gh/currentScript-polyfill\n// added support for Firefox https://bugzilla.mozilla.org/show_bug.cgi?id=1620505\n(function(root,factory){if(true){!(__WEBPACK_AMD_DEFINE_ARRAY__=[],__WEBPACK_AMD_DEFINE_FACTORY__=factory,__WEBPACK_AMD_DEFINE_RESULT__=typeof __WEBPACK_AMD_DEFINE_FACTORY__==='function'?__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports,__WEBPACK_AMD_DEFINE_ARRAY__):__WEBPACK_AMD_DEFINE_FACTORY__,__WEBPACK_AMD_DEFINE_RESULT__!==undefined&&(module.exports=__WEBPACK_AMD_DEFINE_RESULT__));}else{}})(typeof self!=='undefined'?self:this,function(){function getCurrentScript(){var descriptor=Object.getOwnPropertyDescriptor(document,'currentScript');// for chrome\nif(!descriptor&&'currentScript'in document&&document.currentScript){return document.currentScript;}// for other browsers with native support for currentScript\nif(descriptor&&descriptor.get!==getCurrentScript&&document.currentScript){return document.currentScript;}// IE 8-10 support script readyState\n// IE 11+ & Firefox support stack trace\ntry{throw new Error();}catch(err){// Find the second match for the \"at\" string to get file src url from stack.\nvar ieStackRegExp=/.*at [^(]*\\((.*):(.+):(.+)\\)$/ig,ffStackRegExp=/@([^@]*):(\\d+):(\\d+)\\s*$/ig,stackDetails=ieStackRegExp.exec(err.stack)||ffStackRegExp.exec(err.stack),scriptLocation=stackDetails&&stackDetails[1]||false,line=stackDetails&&stackDetails[2]||false,currentLocation=document.location.href.replace(document.location.hash,''),pageSource,inlineScriptSourceRegExp,inlineScriptSource,scripts=document.getElementsByTagName('script');// Live NodeList collection\nif(scriptLocation===currentLocation){pageSource=document.documentElement.outerHTML;inlineScriptSourceRegExp=new RegExp('(?:[^\\\\n]+?\\\\n){0,'+(line-2)+'}[^<]*<script>([\\\\d\\\\D]*?)<\\\\/script>[\\\\d\\\\D]*','i');inlineScriptSource=pageSource.replace(inlineScriptSourceRegExp,'$1').trim();}for(var i=0;i<scripts.length;i++){// If ready state is interactive, return the script tag\nif(scripts[i].readyState==='interactive'){return scripts[i];}// If src matches, return the script tag\nif(scripts[i].src===scriptLocation){return scripts[i];}// If inline source matches, return the script tag\nif(scriptLocation===currentLocation&&scripts[i].innerHTML&&scripts[i].innerHTML.trim()===inlineScriptSource){return scripts[i];}}// If no match, return null\nreturn null;}};return getCurrentScript;});/***/},/***/\"898b\":/***/function b(module,exports,__webpack_require__){//! moment.js locale configuration\n//! locale : Spanish [es]\n//! author : Julio Napurí : https://github.com/julionc\n;(function(global,factory){true?factory(__webpack_require__(\"c1df\")):undefined;})(this,function(moment){'use strict';//! moment.js locale configuration\nvar monthsShortDot='ene._feb._mar._abr._may._jun._jul._ago._sep._oct._nov._dic.'.split('_'),_monthsShort3='ene_feb_mar_abr_may_jun_jul_ago_sep_oct_nov_dic'.split('_'),monthsParse=[/^ene/i,/^feb/i,/^mar/i,/^abr/i,/^may/i,/^jun/i,/^jul/i,/^ago/i,/^sep/i,/^oct/i,/^nov/i,/^dic/i],monthsRegex=/^(enero|febrero|marzo|abril|mayo|junio|julio|agosto|septiembre|octubre|noviembre|diciembre|ene\\.?|feb\\.?|mar\\.?|abr\\.?|may\\.?|jun\\.?|jul\\.?|ago\\.?|sep\\.?|oct\\.?|nov\\.?|dic\\.?)/i;var es=moment.defineLocale('es',{months:'enero_febrero_marzo_abril_mayo_junio_julio_agosto_septiembre_octubre_noviembre_diciembre'.split('_'),monthsShort:function monthsShort(m,format){if(!m){return monthsShortDot;}else if(/-MMM-/.test(format)){return _monthsShort3[m.month()];}else{return monthsShortDot[m.month()];}},monthsRegex:monthsRegex,monthsShortRegex:monthsRegex,monthsStrictRegex:/^(enero|febrero|marzo|abril|mayo|junio|julio|agosto|septiembre|octubre|noviembre|diciembre)/i,monthsShortStrictRegex:/^(ene\\.?|feb\\.?|mar\\.?|abr\\.?|may\\.?|jun\\.?|jul\\.?|ago\\.?|sep\\.?|oct\\.?|nov\\.?|dic\\.?)/i,monthsParse:monthsParse,longMonthsParse:monthsParse,shortMonthsParse:monthsParse,weekdays:'domingo_lunes_martes_miércoles_jueves_viernes_sábado'.split('_'),weekdaysShort:'dom._lun._mar._mié._jue._vie._sáb.'.split('_'),weekdaysMin:'do_lu_ma_mi_ju_vi_sá'.split('_'),weekdaysParseExact:true,longDateFormat:{LT:'H:mm',LTS:'H:mm:ss',L:'DD/MM/YYYY',LL:'D [de] MMMM [de] YYYY',LLL:'D [de] MMMM [de] YYYY H:mm',LLLL:'dddd, D [de] MMMM [de] YYYY H:mm'},calendar:{sameDay:function sameDay(){return'[hoy a la'+(this.hours()!==1?'s':'')+'] LT';},nextDay:function nextDay(){return'[mañana a la'+(this.hours()!==1?'s':'')+'] LT';},nextWeek:function nextWeek(){return'dddd [a la'+(this.hours()!==1?'s':'')+'] LT';},lastDay:function lastDay(){return'[ayer a la'+(this.hours()!==1?'s':'')+'] LT';},lastWeek:function lastWeek(){return'[el] dddd [pasado a la'+(this.hours()!==1?'s':'')+'] LT';},sameElse:'L'},relativeTime:{future:'en %s',past:'hace %s',s:'unos segundos',ss:'%d segundos',m:'un minuto',mm:'%d minutos',h:'una hora',hh:'%d horas',d:'un día',dd:'%d días',M:'un mes',MM:'%d meses',y:'un año',yy:'%d años'},dayOfMonthOrdinalParse:/\\d{1,2}º/,ordinal:'%dº',week:{dow:1,// Monday is the first day of the week.\ndoy:4// The week that contains Jan 4th is the first week of the year.\n},invalidDate:'Fecha invalida'});return es;});/***/},/***/\"8d47\":/***/function d47(module,exports,__webpack_require__){//! moment.js locale configuration\n//! locale : Greek [el]\n//! author : Aggelos Karalias : https://github.com/mehiel\n;(function(global,factory){true?factory(__webpack_require__(\"c1df\")):undefined;})(this,function(moment){'use strict';//! moment.js locale configuration\nfunction isFunction(input){return typeof Function!=='undefined'&&input instanceof Function||Object.prototype.toString.call(input)==='[object Function]';}var el=moment.defineLocale('el',{monthsNominativeEl:'Ιανουάριος_Φεβρουάριος_Μάρτιος_Απρίλιος_Μάιος_Ιούνιος_Ιούλιος_Αύγουστος_Σεπτέμβριος_Οκτώβριος_Νοέμβριος_Δεκέμβριος'.split('_'),monthsGenitiveEl:'Ιανουαρίου_Φεβρουαρίου_Μαρτίου_Απριλίου_Μαΐου_Ιουνίου_Ιουλίου_Αυγούστου_Σεπτεμβρίου_Οκτωβρίου_Νοεμβρίου_Δεκεμβρίου'.split('_'),months:function months(momentToFormat,format){if(!momentToFormat){return this._monthsNominativeEl;}else if(typeof format==='string'&&/D/.test(format.substring(0,format.indexOf('MMMM')))){// if there is a day number before 'MMMM'\nreturn this._monthsGenitiveEl[momentToFormat.month()];}else{return this._monthsNominativeEl[momentToFormat.month()];}},monthsShort:'Ιαν_Φεβ_Μαρ_Απρ_Μαϊ_Ιουν_Ιουλ_Αυγ_Σεπ_Οκτ_Νοε_Δεκ'.split('_'),weekdays:'Κυριακή_Δευτέρα_Τρίτη_Τετάρτη_Πέμπτη_Παρασκευή_Σάββατο'.split('_'),weekdaysShort:'Κυρ_Δευ_Τρι_Τετ_Πεμ_Παρ_Σαβ'.split('_'),weekdaysMin:'Κυ_Δε_Τρ_Τε_Πε_Πα_Σα'.split('_'),meridiem:function meridiem(hours,minutes,isLower){if(hours>11){return isLower?'μμ':'ΜΜ';}else{return isLower?'πμ':'ΠΜ';}},isPM:function isPM(input){return(input+'').toLowerCase()[0]==='μ';},meridiemParse:/[ΠΜ]\\.?Μ?\\.?/i,longDateFormat:{LT:'h:mm A',LTS:'h:mm:ss A',L:'DD/MM/YYYY',LL:'D MMMM YYYY',LLL:'D MMMM YYYY h:mm A',LLLL:'dddd, D MMMM YYYY h:mm A'},calendarEl:{sameDay:'[Σήμερα {}] LT',nextDay:'[Αύριο {}] LT',nextWeek:'dddd [{}] LT',lastDay:'[Χθες {}] LT',lastWeek:function lastWeek(){switch(this.day()){case 6:return'[το προηγούμενο] dddd [{}] LT';default:return'[την προηγούμενη] dddd [{}] LT';}},sameElse:'L'},calendar:function calendar(key,mom){var output=this._calendarEl[key],hours=mom&&mom.hours();if(isFunction(output)){output=output.apply(mom);}return output.replace('{}',hours%12===1?'στη':'στις');},relativeTime:{future:'σε %s',past:'%s πριν',s:'λίγα δευτερόλεπτα',ss:'%d δευτερόλεπτα',m:'ένα λεπτό',mm:'%d λεπτά',h:'μία ώρα',hh:'%d ώρες',d:'μία μέρα',dd:'%d μέρες',M:'ένας μήνας',MM:'%d μήνες',y:'ένας χρόνος',yy:'%d χρόνια'},dayOfMonthOrdinalParse:/\\d{1,2}η/,ordinal:'%dη',week:{dow:1,// Monday is the first day of the week.\ndoy:4// The week that contains Jan 4st is the first week of the year.\n}});return el;});/***/},/***/\"8d57\":/***/function d57(module,exports,__webpack_require__){//! moment.js locale configuration\n//! locale : Polish [pl]\n//! author : Rafal Hirsz : https://github.com/evoL\n;(function(global,factory){true?factory(__webpack_require__(\"c1df\")):undefined;})(this,function(moment){'use strict';//! moment.js locale configuration\nvar monthsNominative='styczeń_luty_marzec_kwiecień_maj_czerwiec_lipiec_sierpień_wrzesień_październik_listopad_grudzień'.split('_'),monthsSubjective='stycznia_lutego_marca_kwietnia_maja_czerwca_lipca_sierpnia_września_października_listopada_grudnia'.split('_');function plural(n){return n%10<5&&n%10>1&&~~(n/10)%10!==1;}function translate(number,withoutSuffix,key){var result=number+' ';switch(key){case'ss':return result+(plural(number)?'sekundy':'sekund');case'm':return withoutSuffix?'minuta':'minutę';case'mm':return result+(plural(number)?'minuty':'minut');case'h':return withoutSuffix?'godzina':'godzinę';case'hh':return result+(plural(number)?'godziny':'godzin');case'MM':return result+(plural(number)?'miesiące':'miesięcy');case'yy':return result+(plural(number)?'lata':'lat');}}var pl=moment.defineLocale('pl',{months:function months(momentToFormat,format){if(!momentToFormat){return monthsNominative;}else if(format===''){// Hack: if format empty we know this is used to generate\n// RegExp by moment. Give then back both valid forms of months\n// in RegExp ready format.\nreturn'('+monthsSubjective[momentToFormat.month()]+'|'+monthsNominative[momentToFormat.month()]+')';}else if(/D MMMM/.test(format)){return monthsSubjective[momentToFormat.month()];}else{return monthsNominative[momentToFormat.month()];}},monthsShort:'sty_lut_mar_kwi_maj_cze_lip_sie_wrz_paź_lis_gru'.split('_'),weekdays:'niedziela_poniedziałek_wtorek_środa_czwartek_piątek_sobota'.split('_'),weekdaysShort:'ndz_pon_wt_śr_czw_pt_sob'.split('_'),weekdaysMin:'Nd_Pn_Wt_Śr_Cz_Pt_So'.split('_'),longDateFormat:{LT:'HH:mm',LTS:'HH:mm:ss',L:'DD.MM.YYYY',LL:'D MMMM YYYY',LLL:'D MMMM YYYY HH:mm',LLLL:'dddd, D MMMM YYYY HH:mm'},calendar:{sameDay:'[Dziś o] LT',nextDay:'[Jutro o] LT',nextWeek:function nextWeek(){switch(this.day()){case 0:return'[W niedzielę o] LT';case 2:return'[We wtorek o] LT';case 3:return'[W środę o] LT';case 6:return'[W sobotę o] LT';default:return'[W] dddd [o] LT';}},lastDay:'[Wczoraj o] LT',lastWeek:function lastWeek(){switch(this.day()){case 0:return'[W zeszłą niedzielę o] LT';case 3:return'[W zeszłą środę o] LT';case 6:return'[W zeszłą sobotę o] LT';default:return'[W zeszły] dddd [o] LT';}},sameElse:'L'},relativeTime:{future:'za %s',past:'%s temu',s:'kilka sekund',ss:translate,m:translate,mm:translate,h:translate,hh:translate,d:'1 dzień',dd:'%d dni',M:'miesiąc',MM:translate,y:'rok',yy:translate},dayOfMonthOrdinalParse:/\\d{1,2}\\./,ordinal:'%d.',week:{dow:1,// Monday is the first day of the week.\ndoy:4// The week that contains Jan 4th is the first week of the year.\n}});return pl;});/***/},/***/\"8df4\":/***/function df4(module,exports,__webpack_require__){//! moment.js locale configuration\n//! locale : Persian [fa]\n//! author : Ebrahim Byagowi : https://github.com/ebraminio\n;(function(global,factory){true?factory(__webpack_require__(\"c1df\")):undefined;})(this,function(moment){'use strict';//! moment.js locale configuration\nvar symbolMap={'1':'۱','2':'۲','3':'۳','4':'۴','5':'۵','6':'۶','7':'۷','8':'۸','9':'۹','0':'۰'},numberMap={'۱':'1','۲':'2','۳':'3','۴':'4','۵':'5','۶':'6','۷':'7','۸':'8','۹':'9','۰':'0'};var fa=moment.defineLocale('fa',{months:'ژانویه_فوریه_مارس_آوریل_مه_ژوئن_ژوئیه_اوت_سپتامبر_اکتبر_نوامبر_دسامبر'.split('_'),monthsShort:'ژانویه_فوریه_مارس_آوریل_مه_ژوئن_ژوئیه_اوت_سپتامبر_اکتبر_نوامبر_دسامبر'.split('_'),weekdays:\"\\u06CC\\u06A9\\u200C\\u0634\\u0646\\u0628\\u0647_\\u062F\\u0648\\u0634\\u0646\\u0628\\u0647_\\u0633\\u0647\\u200C\\u0634\\u0646\\u0628\\u0647_\\u0686\\u0647\\u0627\\u0631\\u0634\\u0646\\u0628\\u0647_\\u067E\\u0646\\u062C\\u200C\\u0634\\u0646\\u0628\\u0647_\\u062C\\u0645\\u0639\\u0647_\\u0634\\u0646\\u0628\\u0647\".split('_'),weekdaysShort:\"\\u06CC\\u06A9\\u200C\\u0634\\u0646\\u0628\\u0647_\\u062F\\u0648\\u0634\\u0646\\u0628\\u0647_\\u0633\\u0647\\u200C\\u0634\\u0646\\u0628\\u0647_\\u0686\\u0647\\u0627\\u0631\\u0634\\u0646\\u0628\\u0647_\\u067E\\u0646\\u062C\\u200C\\u0634\\u0646\\u0628\\u0647_\\u062C\\u0645\\u0639\\u0647_\\u0634\\u0646\\u0628\\u0647\".split('_'),weekdaysMin:'ی_د_س_چ_پ_ج_ش'.split('_'),weekdaysParseExact:true,longDateFormat:{LT:'HH:mm',LTS:'HH:mm:ss',L:'DD/MM/YYYY',LL:'D MMMM YYYY',LLL:'D MMMM YYYY HH:mm',LLLL:'dddd, D MMMM YYYY HH:mm'},meridiemParse:/قبل از ظهر|بعد از ظهر/,isPM:function isPM(input){return /بعد از ظهر/.test(input);},meridiem:function meridiem(hour,minute,isLower){if(hour<12){return'قبل از ظهر';}else{return'بعد از ظهر';}},calendar:{sameDay:'[امروز ساعت] LT',nextDay:'[فردا ساعت] LT',nextWeek:'dddd [ساعت] LT',lastDay:'[دیروز ساعت] LT',lastWeek:'dddd [پیش] [ساعت] LT',sameElse:'L'},relativeTime:{future:'در %s',past:'%s پیش',s:'چند ثانیه',ss:'%d ثانیه',m:'یک دقیقه',mm:'%d دقیقه',h:'یک ساعت',hh:'%d ساعت',d:'یک روز',dd:'%d روز',M:'یک ماه',MM:'%d ماه',y:'یک سال',yy:'%d سال'},preparse:function preparse(string){return string.replace(/[۰-۹]/g,function(match){return numberMap[match];}).replace(/،/g,',');},postformat:function postformat(string){return string.replace(/\\d/g,function(match){return symbolMap[match];}).replace(/,/g,'،');},dayOfMonthOrdinalParse:/\\d{1,2}م/,ordinal:'%dم',week:{dow:6,// Saturday is the first day of the week.\ndoy:12// The week that contains Jan 12th is the first week of the year.\n}});return fa;});/***/},/***/\"8e73\":/***/function e73(module,exports,__webpack_require__){//! moment.js locale configuration\n//! locale : Arabic [ar]\n//! author : Abdel Said: https://github.com/abdelsaid\n//! author : Ahmed Elkhatib\n//! author : forabi https://github.com/forabi\n;(function(global,factory){true?factory(__webpack_require__(\"c1df\")):undefined;})(this,function(moment){'use strict';//! moment.js locale configuration\nvar symbolMap={'1':'١','2':'٢','3':'٣','4':'٤','5':'٥','6':'٦','7':'٧','8':'٨','9':'٩','0':'٠'},numberMap={'١':'1','٢':'2','٣':'3','٤':'4','٥':'5','٦':'6','٧':'7','٨':'8','٩':'9','٠':'0'},pluralForm=function pluralForm(n){return n===0?0:n===1?1:n===2?2:n%100>=3&&n%100<=10?3:n%100>=11?4:5;},plurals={s:['أقل من ثانية','ثانية واحدة',['ثانيتان','ثانيتين'],'%d ثوان','%d ثانية','%d ثانية'],m:['أقل من دقيقة','دقيقة واحدة',['دقيقتان','دقيقتين'],'%d دقائق','%d دقيقة','%d دقيقة'],h:['أقل من ساعة','ساعة واحدة',['ساعتان','ساعتين'],'%d ساعات','%d ساعة','%d ساعة'],d:['أقل من يوم','يوم واحد',['يومان','يومين'],'%d أيام','%d يومًا','%d يوم'],M:['أقل من شهر','شهر واحد',['شهران','شهرين'],'%d أشهر','%d شهرا','%d شهر'],y:['أقل من عام','عام واحد',['عامان','عامين'],'%d أعوام','%d عامًا','%d عام']},pluralize=function pluralize(u){return function(number,withoutSuffix,string,isFuture){var f=pluralForm(number),str=plurals[u][pluralForm(number)];if(f===2){str=str[withoutSuffix?0:1];}return str.replace(/%d/i,number);};},months=['يناير','فبراير','مارس','أبريل','مايو','يونيو','يوليو','أغسطس','سبتمبر','أكتوبر','نوفمبر','ديسمبر'];var ar=moment.defineLocale('ar',{months:months,monthsShort:months,weekdays:'الأحد_الإثنين_الثلاثاء_الأربعاء_الخميس_الجمعة_السبت'.split('_'),weekdaysShort:'أحد_إثنين_ثلاثاء_أربعاء_خميس_جمعة_سبت'.split('_'),weekdaysMin:'ح_ن_ث_ر_خ_ج_س'.split('_'),weekdaysParseExact:true,longDateFormat:{LT:'HH:mm',LTS:'HH:mm:ss',L:\"D/\\u200FM/\\u200FYYYY\",LL:'D MMMM YYYY',LLL:'D MMMM YYYY HH:mm',LLLL:'dddd D MMMM YYYY HH:mm'},meridiemParse:/ص|م/,isPM:function isPM(input){return'م'===input;},meridiem:function meridiem(hour,minute,isLower){if(hour<12){return'ص';}else{return'م';}},calendar:{sameDay:'[اليوم عند الساعة] LT',nextDay:'[غدًا عند الساعة] LT',nextWeek:'dddd [عند الساعة] LT',lastDay:'[أمس عند الساعة] LT',lastWeek:'dddd [عند الساعة] LT',sameElse:'L'},relativeTime:{future:'بعد %s',past:'منذ %s',s:pluralize('s'),ss:pluralize('s'),m:pluralize('m'),mm:pluralize('m'),h:pluralize('h'),hh:pluralize('h'),d:pluralize('d'),dd:pluralize('d'),M:pluralize('M'),MM:pluralize('M'),y:pluralize('y'),yy:pluralize('y')},preparse:function preparse(string){return string.replace(/[١٢٣٤٥٦٧٨٩٠]/g,function(match){return numberMap[match];}).replace(/،/g,',');},postformat:function postformat(string){return string.replace(/\\d/g,function(match){return symbolMap[match];}).replace(/,/g,'،');},week:{dow:6,// Saturday is the first day of the week.\ndoy:12// The week that contains Jan 12th is the first week of the year.\n}});return ar;});/***/},/***/\"9043\":/***/function _(module,exports,__webpack_require__){//! moment.js locale configuration\n//! locale : Bengali [bn]\n//! author : Kaushik Gandhi : https://github.com/kaushikgandhi\n;(function(global,factory){true?factory(__webpack_require__(\"c1df\")):undefined;})(this,function(moment){'use strict';//! moment.js locale configuration\nvar symbolMap={'1':'১','2':'২','3':'৩','4':'৪','5':'৫','6':'৬','7':'৭','8':'৮','9':'৯','0':'০'},numberMap={'১':'1','২':'2','৩':'3','৪':'4','৫':'5','৬':'6','৭':'7','৮':'8','৯':'9','০':'0'};var bn=moment.defineLocale('bn',{months:'জানুয়ারি_ফেব্রুয়ারি_মার্চ_এপ্রিল_মে_জুন_জুলাই_আগস্ট_সেপ্টেম্বর_অক্টোবর_নভেম্বর_ডিসেম্বর'.split('_'),monthsShort:'জানু_ফেব্রু_মার্চ_এপ্রিল_মে_জুন_জুলাই_আগস্ট_সেপ্ট_অক্টো_নভে_ডিসে'.split('_'),weekdays:'রবিবার_সোমবার_মঙ্গলবার_বুধবার_বৃহস্পতিবার_শুক্রবার_শনিবার'.split('_'),weekdaysShort:'রবি_সোম_মঙ্গল_বুধ_বৃহস্পতি_শুক্র_শনি'.split('_'),weekdaysMin:'রবি_সোম_মঙ্গল_বুধ_বৃহ_শুক্র_শনি'.split('_'),longDateFormat:{LT:'A h:mm সময়',LTS:'A h:mm:ss সময়',L:'DD/MM/YYYY',LL:'D MMMM YYYY',LLL:'D MMMM YYYY, A h:mm সময়',LLLL:'dddd, D MMMM YYYY, A h:mm সময়'},calendar:{sameDay:'[আজ] LT',nextDay:'[আগামীকাল] LT',nextWeek:'dddd, LT',lastDay:'[গতকাল] LT',lastWeek:'[গত] dddd, LT',sameElse:'L'},relativeTime:{future:'%s পরে',past:'%s আগে',s:'কয়েক সেকেন্ড',ss:'%d সেকেন্ড',m:'এক মিনিট',mm:'%d মিনিট',h:'এক ঘন্টা',hh:'%d ঘন্টা',d:'এক দিন',dd:'%d দিন',M:'এক মাস',MM:'%d মাস',y:'এক বছর',yy:'%d বছর'},preparse:function preparse(string){return string.replace(/[১২৩৪৫৬৭৮৯০]/g,function(match){return numberMap[match];});},postformat:function postformat(string){return string.replace(/\\d/g,function(match){return symbolMap[match];});},meridiemParse:/রাত|সকাল|দুপুর|বিকাল|রাত/,meridiemHour:function meridiemHour(hour,meridiem){if(hour===12){hour=0;}if(meridiem==='রাত'&&hour>=4||meridiem==='দুপুর'&&hour<5||meridiem==='বিকাল'){return hour+12;}else{return hour;}},meridiem:function meridiem(hour,minute,isLower){if(hour<4){return'রাত';}else if(hour<10){return'সকাল';}else if(hour<17){return'দুপুর';}else if(hour<20){return'বিকাল';}else{return'রাত';}},week:{dow:0,// Sunday is the first day of the week.\ndoy:6// The week that contains Jan 6th is the first week of the year.\n}});return bn;});/***/},/***/\"90ea\":/***/function ea(module,exports,__webpack_require__){//! moment.js locale configuration\n//! locale : Chinese (Taiwan) [zh-tw]\n//! author : Ben : https://github.com/ben-lin\n//! author : Chris Lam : https://github.com/hehachris\n;(function(global,factory){true?factory(__webpack_require__(\"c1df\")):undefined;})(this,function(moment){'use strict';//! moment.js locale configuration\nvar zhTw=moment.defineLocale('zh-tw',{months:'一月_二月_三月_四月_五月_六月_七月_八月_九月_十月_十一月_十二月'.split('_'),monthsShort:'1月_2月_3月_4月_5月_6月_7月_8月_9月_10月_11月_12月'.split('_'),weekdays:'星期日_星期一_星期二_星期三_星期四_星期五_星期六'.split('_'),weekdaysShort:'週日_週一_週二_週三_週四_週五_週六'.split('_'),weekdaysMin:'日_一_二_三_四_五_六'.split('_'),longDateFormat:{LT:'HH:mm',LTS:'HH:mm:ss',L:'YYYY/MM/DD',LL:'YYYY年M月D日',LLL:'YYYY年M月D日 HH:mm',LLLL:'YYYY年M月D日dddd HH:mm',l:'YYYY/M/D',ll:'YYYY年M月D日',lll:'YYYY年M月D日 HH:mm',llll:'YYYY年M月D日dddd HH:mm'},meridiemParse:/凌晨|早上|上午|中午|下午|晚上/,meridiemHour:function meridiemHour(hour,meridiem){if(hour===12){hour=0;}if(meridiem==='凌晨'||meridiem==='早上'||meridiem==='上午'){return hour;}else if(meridiem==='中午'){return hour>=11?hour:hour+12;}else if(meridiem==='下午'||meridiem==='晚上'){return hour+12;}},meridiem:function meridiem(hour,minute,isLower){var hm=hour*100+minute;if(hm<600){return'凌晨';}else if(hm<900){return'早上';}else if(hm<1130){return'上午';}else if(hm<1230){return'中午';}else if(hm<1800){return'下午';}else{return'晚上';}},calendar:{sameDay:'[今天] LT',nextDay:'[明天] LT',nextWeek:'[下]dddd LT',lastDay:'[昨天] LT',lastWeek:'[上]dddd LT',sameElse:'L'},dayOfMonthOrdinalParse:/\\d{1,2}(日|月|週)/,ordinal:function ordinal(number,period){switch(period){case'd':case'D':case'DDD':return number+'日';case'M':return number+'月';case'w':case'W':return number+'週';default:return number;}},relativeTime:{future:'%s後',past:'%s前',s:'幾秒',ss:'%d 秒',m:'1 分鐘',mm:'%d 分鐘',h:'1 小時',hh:'%d 小時',d:'1 天',dd:'%d 天',M:'1 個月',MM:'%d 個月',y:'1 年',yy:'%d 年'}});return zhTw;});/***/},/***/\"92d9\":/***/function d9(module,exports,__webpack_require__){// Imports\nvar ___CSS_LOADER_API_IMPORT___=__webpack_require__(\"24fb\");exports=___CSS_LOADER_API_IMPORT___(false);// Module\nexports.push([module.i,\"@charset \\\"UTF-8\\\";\\n/*!\\n * CoreUI Plugins - Chart.js for CoreUI 3\\n * @version vv2.0.0-beta.0\\n * @link https://coreui.io\\n * Copyright (c) 2019 creativeLabs Łukasz Holeczek\\n * Licensed under MIT (https://coreui.io/license/plugins/chart.js)\\n */.c-chartjs-tooltip{position:absolute;z-index:1021;display:-ms-flexbox;display:flex;-ms-flex-direction:column;flex-direction:column;padding:.25rem .5rem;color:#fff;pointer-events:none;background:rgba(0,0,0,.7);opacity:0;transition:all .25s ease;-webkit-transform:translate(-50%);transform:translate(-50%);border-radius:.25rem}.c-chartjs-tooltip .c-tooltip-header{margin-bottom:.5rem}.c-chartjs-tooltip .c-tooltip-header-item{font-size:.765625rem;font-weight:700}.c-chartjs-tooltip .c-tooltip-body-item{display:-ms-flexbox;display:flex;-ms-flex-align:center;align-items:center;font-size:.765625rem;white-space:nowrap}.c-chartjs-tooltip .c-tooltip-body-item-color{display:inline-block;width:.875rem;height:.875rem;margin-right:.875rem}.c-chartjs-tooltip .c-tooltip-body-item-value{padding-left:1rem;margin-left:auto;font-weight:700}\",\"\"]);// Exports\nmodule.exports=exports;/***/},/***/\"957c\":/***/function c(module,exports,__webpack_require__){//! moment.js locale configuration\n//! locale : Russian [ru]\n//! author : Viktorminator : https://github.com/Viktorminator\n//! author : Menelion Elensúle : https://github.com/Oire\n//! author : Коренберг Марк : https://github.com/socketpair\n;(function(global,factory){true?factory(__webpack_require__(\"c1df\")):undefined;})(this,function(moment){'use strict';//! moment.js locale configuration\nfunction plural(word,num){var forms=word.split('_');return num%10===1&&num%100!==11?forms[0]:num%10>=2&&num%10<=4&&(num%100<10||num%100>=20)?forms[1]:forms[2];}function relativeTimeWithPlural(number,withoutSuffix,key){var format={ss:withoutSuffix?'секунда_секунды_секунд':'секунду_секунды_секунд',mm:withoutSuffix?'минута_минуты_минут':'минуту_минуты_минут',hh:'час_часа_часов',dd:'день_дня_дней',MM:'месяц_месяца_месяцев',yy:'год_года_лет'};if(key==='m'){return withoutSuffix?'минута':'минуту';}else{return number+' '+plural(format[key],+number);}}var monthsParse=[/^янв/i,/^фев/i,/^мар/i,/^апр/i,/^ма[йя]/i,/^июн/i,/^июл/i,/^авг/i,/^сен/i,/^окт/i,/^ноя/i,/^дек/i];// http://new.gramota.ru/spravka/rules/139-prop : § 103\n// Сокращения месяцев: http://new.gramota.ru/spravka/buro/search-answer?s=242637\n// CLDR data:          http://www.unicode.org/cldr/charts/28/summary/ru.html#1753\nvar ru=moment.defineLocale('ru',{months:{format:'января_февраля_марта_апреля_мая_июня_июля_августа_сентября_октября_ноября_декабря'.split('_'),standalone:'январь_февраль_март_апрель_май_июнь_июль_август_сентябрь_октябрь_ноябрь_декабрь'.split('_')},monthsShort:{// по CLDR именно \"июл.\" и \"июн.\", но какой смысл менять букву на точку?\nformat:'янв._февр._мар._апр._мая_июня_июля_авг._сент._окт._нояб._дек.'.split('_'),standalone:'янв._февр._март_апр._май_июнь_июль_авг._сент._окт._нояб._дек.'.split('_')},weekdays:{standalone:'воскресенье_понедельник_вторник_среда_четверг_пятница_суббота'.split('_'),format:'воскресенье_понедельник_вторник_среду_четверг_пятницу_субботу'.split('_'),isFormat:/\\[ ?[Вв] ?(?:прошлую|следующую|эту)? ?] ?dddd/},weekdaysShort:'вс_пн_вт_ср_чт_пт_сб'.split('_'),weekdaysMin:'вс_пн_вт_ср_чт_пт_сб'.split('_'),monthsParse:monthsParse,longMonthsParse:monthsParse,shortMonthsParse:monthsParse,// полные названия с падежами, по три буквы, для некоторых, по 4 буквы, сокращения с точкой и без точки\nmonthsRegex:/^(январ[ья]|янв\\.?|феврал[ья]|февр?\\.?|марта?|мар\\.?|апрел[ья]|апр\\.?|ма[йя]|июн[ья]|июн\\.?|июл[ья]|июл\\.?|августа?|авг\\.?|сентябр[ья]|сент?\\.?|октябр[ья]|окт\\.?|ноябр[ья]|нояб?\\.?|декабр[ья]|дек\\.?)/i,// копия предыдущего\nmonthsShortRegex:/^(январ[ья]|янв\\.?|феврал[ья]|февр?\\.?|марта?|мар\\.?|апрел[ья]|апр\\.?|ма[йя]|июн[ья]|июн\\.?|июл[ья]|июл\\.?|августа?|авг\\.?|сентябр[ья]|сент?\\.?|октябр[ья]|окт\\.?|ноябр[ья]|нояб?\\.?|декабр[ья]|дек\\.?)/i,// полные названия с падежами\nmonthsStrictRegex:/^(январ[яь]|феврал[яь]|марта?|апрел[яь]|ма[яй]|июн[яь]|июл[яь]|августа?|сентябр[яь]|октябр[яь]|ноябр[яь]|декабр[яь])/i,// Выражение, которое соответствует только сокращённым формам\nmonthsShortStrictRegex:/^(янв\\.|февр?\\.|мар[т.]|апр\\.|ма[яй]|июн[ья.]|июл[ья.]|авг\\.|сент?\\.|окт\\.|нояб?\\.|дек\\.)/i,longDateFormat:{LT:'H:mm',LTS:'H:mm:ss',L:'DD.MM.YYYY',LL:'D MMMM YYYY г.',LLL:'D MMMM YYYY г., H:mm',LLLL:'dddd, D MMMM YYYY г., H:mm'},calendar:{sameDay:'[Сегодня, в] LT',nextDay:'[Завтра, в] LT',lastDay:'[Вчера, в] LT',nextWeek:function nextWeek(now){if(now.week()!==this.week()){switch(this.day()){case 0:return'[В следующее] dddd, [в] LT';case 1:case 2:case 4:return'[В следующий] dddd, [в] LT';case 3:case 5:case 6:return'[В следующую] dddd, [в] LT';}}else{if(this.day()===2){return'[Во] dddd, [в] LT';}else{return'[В] dddd, [в] LT';}}},lastWeek:function lastWeek(now){if(now.week()!==this.week()){switch(this.day()){case 0:return'[В прошлое] dddd, [в] LT';case 1:case 2:case 4:return'[В прошлый] dddd, [в] LT';case 3:case 5:case 6:return'[В прошлую] dddd, [в] LT';}}else{if(this.day()===2){return'[Во] dddd, [в] LT';}else{return'[В] dddd, [в] LT';}}},sameElse:'L'},relativeTime:{future:'через %s',past:'%s назад',s:'несколько секунд',ss:relativeTimeWithPlural,m:relativeTimeWithPlural,mm:relativeTimeWithPlural,h:'час',hh:relativeTimeWithPlural,d:'день',dd:relativeTimeWithPlural,M:'месяц',MM:relativeTimeWithPlural,y:'год',yy:relativeTimeWithPlural},meridiemParse:/ночи|утра|дня|вечера/i,isPM:function isPM(input){return /^(дня|вечера)$/.test(input);},meridiem:function meridiem(hour,minute,isLower){if(hour<4){return'ночи';}else if(hour<12){return'утра';}else if(hour<17){return'дня';}else{return'вечера';}},dayOfMonthOrdinalParse:/\\d{1,2}-(й|го|я)/,ordinal:function ordinal(number,period){switch(period){case'M':case'd':case'DDD':return number+'-й';case'D':return number+'-го';case'w':case'W':return number+'-я';default:return number;}},week:{dow:1,// Monday is the first day of the week.\ndoy:4// The week that contains Jan 4th is the first week of the year.\n}});return ru;});/***/},/***/\"958b\":/***/function b(module,exports,__webpack_require__){//! moment.js locale configuration\n//! locale : Mongolian [mn]\n//! author : Javkhlantugs Nyamdorj : https://github.com/javkhaanj7\n;(function(global,factory){true?factory(__webpack_require__(\"c1df\")):undefined;})(this,function(moment){'use strict';//! moment.js locale configuration\nfunction translate(number,withoutSuffix,key,isFuture){switch(key){case's':return withoutSuffix?'хэдхэн секунд':'хэдхэн секундын';case'ss':return number+(withoutSuffix?' секунд':' секундын');case'm':case'mm':return number+(withoutSuffix?' минут':' минутын');case'h':case'hh':return number+(withoutSuffix?' цаг':' цагийн');case'd':case'dd':return number+(withoutSuffix?' өдөр':' өдрийн');case'M':case'MM':return number+(withoutSuffix?' сар':' сарын');case'y':case'yy':return number+(withoutSuffix?' жил':' жилийн');default:return number;}}var mn=moment.defineLocale('mn',{months:'Нэгдүгээр сар_Хоёрдугаар сар_Гуравдугаар сар_Дөрөвдүгээр сар_Тавдугаар сар_Зургадугаар сар_Долдугаар сар_Наймдугаар сар_Есдүгээр сар_Аравдугаар сар_Арван нэгдүгээр сар_Арван хоёрдугаар сар'.split('_'),monthsShort:'1 сар_2 сар_3 сар_4 сар_5 сар_6 сар_7 сар_8 сар_9 сар_10 сар_11 сар_12 сар'.split('_'),monthsParseExact:true,weekdays:'Ням_Даваа_Мягмар_Лхагва_Пүрэв_Баасан_Бямба'.split('_'),weekdaysShort:'Ням_Дав_Мяг_Лха_Пүр_Баа_Бям'.split('_'),weekdaysMin:'Ня_Да_Мя_Лх_Пү_Ба_Бя'.split('_'),weekdaysParseExact:true,longDateFormat:{LT:'HH:mm',LTS:'HH:mm:ss',L:'YYYY-MM-DD',LL:'YYYY оны MMMMын D',LLL:'YYYY оны MMMMын D HH:mm',LLLL:'dddd, YYYY оны MMMMын D HH:mm'},meridiemParse:/ҮӨ|ҮХ/i,isPM:function isPM(input){return input==='ҮХ';},meridiem:function meridiem(hour,minute,isLower){if(hour<12){return'ҮӨ';}else{return'ҮХ';}},calendar:{sameDay:'[Өнөөдөр] LT',nextDay:'[Маргааш] LT',nextWeek:'[Ирэх] dddd LT',lastDay:'[Өчигдөр] LT',lastWeek:'[Өнгөрсөн] dddd LT',sameElse:'L'},relativeTime:{future:'%s дараа',past:'%s өмнө',s:translate,ss:translate,m:translate,mm:translate,h:translate,hh:translate,d:translate,dd:translate,M:translate,MM:translate,y:translate,yy:translate},dayOfMonthOrdinalParse:/\\d{1,2} өдөр/,ordinal:function ordinal(number,period){switch(period){case'd':case'D':case'DDD':return number+' өдөр';default:return number;}}});return mn;});/***/},/***/\"9609\":/***/function _(module,exports,__webpack_require__){//! moment.js locale configuration\n//! locale : Kyrgyz [ky]\n//! author : Chyngyz Arystan uulu : https://github.com/chyngyz\n;(function(global,factory){true?factory(__webpack_require__(\"c1df\")):undefined;})(this,function(moment){'use strict';//! moment.js locale configuration\nvar suffixes={0:'-чү',1:'-чи',2:'-чи',3:'-чү',4:'-чү',5:'-чи',6:'-чы',7:'-чи',8:'-чи',9:'-чу',10:'-чу',20:'-чы',30:'-чу',40:'-чы',50:'-чү',60:'-чы',70:'-чи',80:'-чи',90:'-чу',100:'-чү'};var ky=moment.defineLocale('ky',{months:'январь_февраль_март_апрель_май_июнь_июль_август_сентябрь_октябрь_ноябрь_декабрь'.split('_'),monthsShort:'янв_фев_март_апр_май_июнь_июль_авг_сен_окт_ноя_дек'.split('_'),weekdays:'Жекшемби_Дүйшөмбү_Шейшемби_Шаршемби_Бейшемби_Жума_Ишемби'.split('_'),weekdaysShort:'Жек_Дүй_Шей_Шар_Бей_Жум_Ише'.split('_'),weekdaysMin:'Жк_Дй_Шй_Шр_Бй_Жм_Иш'.split('_'),longDateFormat:{LT:'HH:mm',LTS:'HH:mm:ss',L:'DD.MM.YYYY',LL:'D MMMM YYYY',LLL:'D MMMM YYYY HH:mm',LLLL:'dddd, D MMMM YYYY HH:mm'},calendar:{sameDay:'[Бүгүн саат] LT',nextDay:'[Эртең саат] LT',nextWeek:'dddd [саат] LT',lastDay:'[Кечээ саат] LT',lastWeek:'[Өткөн аптанын] dddd [күнү] [саат] LT',sameElse:'L'},relativeTime:{future:'%s ичинде',past:'%s мурун',s:'бирнече секунд',ss:'%d секунд',m:'бир мүнөт',mm:'%d мүнөт',h:'бир саат',hh:'%d саат',d:'бир күн',dd:'%d күн',M:'бир ай',MM:'%d ай',y:'бир жыл',yy:'%d жыл'},dayOfMonthOrdinalParse:/\\d{1,2}-(чи|чы|чү|чу)/,ordinal:function ordinal(number){var a=number%10,b=number>=100?100:null;return number+(suffixes[number]||suffixes[a]||suffixes[b]);},week:{dow:1,// Monday is the first day of the week.\ndoy:7// The week that contains Jan 7th is the first week of the year.\n}});return ky;});/***/},/***/\"972c\":/***/function c(module,exports,__webpack_require__){//! moment.js locale configuration\n//! locale : Romanian [ro]\n//! author : Vlad Gurdiga : https://github.com/gurdiga\n//! author : Valentin Agachi : https://github.com/avaly\n//! author : Emanuel Cepoi : https://github.com/cepem\n;(function(global,factory){true?factory(__webpack_require__(\"c1df\")):undefined;})(this,function(moment){'use strict';//! moment.js locale configuration\nfunction relativeTimeWithPlural(number,withoutSuffix,key){var format={ss:'secunde',mm:'minute',hh:'ore',dd:'zile',MM:'luni',yy:'ani'},separator=' ';if(number%100>=20||number>=100&&number%100===0){separator=' de ';}return number+separator+format[key];}var ro=moment.defineLocale('ro',{months:'ianuarie_februarie_martie_aprilie_mai_iunie_iulie_august_septembrie_octombrie_noiembrie_decembrie'.split('_'),monthsShort:'ian._feb._mart._apr._mai_iun._iul._aug._sept._oct._nov._dec.'.split('_'),monthsParseExact:true,weekdays:'duminică_luni_marți_miercuri_joi_vineri_sâmbătă'.split('_'),weekdaysShort:'Dum_Lun_Mar_Mie_Joi_Vin_Sâm'.split('_'),weekdaysMin:'Du_Lu_Ma_Mi_Jo_Vi_Sâ'.split('_'),longDateFormat:{LT:'H:mm',LTS:'H:mm:ss',L:'DD.MM.YYYY',LL:'D MMMM YYYY',LLL:'D MMMM YYYY H:mm',LLLL:'dddd, D MMMM YYYY H:mm'},calendar:{sameDay:'[azi la] LT',nextDay:'[mâine la] LT',nextWeek:'dddd [la] LT',lastDay:'[ieri la] LT',lastWeek:'[fosta] dddd [la] LT',sameElse:'L'},relativeTime:{future:'peste %s',past:'%s în urmă',s:'câteva secunde',ss:relativeTimeWithPlural,m:'un minut',mm:relativeTimeWithPlural,h:'o oră',hh:relativeTimeWithPlural,d:'o zi',dd:relativeTimeWithPlural,M:'o lună',MM:relativeTimeWithPlural,y:'un an',yy:relativeTimeWithPlural},week:{dow:1,// Monday is the first day of the week.\ndoy:7// The week that contains Jan 7th is the first week of the year.\n}});return ro;});/***/},/***/\"9797\":/***/function _(module,exports,__webpack_require__){//! moment.js locale configuration\n//! locale : Welsh [cy]\n//! author : Robert Allen : https://github.com/robgallen\n//! author : https://github.com/ryangreaves\n;(function(global,factory){true?factory(__webpack_require__(\"c1df\")):undefined;})(this,function(moment){'use strict';//! moment.js locale configuration\nvar cy=moment.defineLocale('cy',{months:'Ionawr_Chwefror_Mawrth_Ebrill_Mai_Mehefin_Gorffennaf_Awst_Medi_Hydref_Tachwedd_Rhagfyr'.split('_'),monthsShort:'Ion_Chwe_Maw_Ebr_Mai_Meh_Gor_Aws_Med_Hyd_Tach_Rhag'.split('_'),weekdays:'Dydd Sul_Dydd Llun_Dydd Mawrth_Dydd Mercher_Dydd Iau_Dydd Gwener_Dydd Sadwrn'.split('_'),weekdaysShort:'Sul_Llun_Maw_Mer_Iau_Gwe_Sad'.split('_'),weekdaysMin:'Su_Ll_Ma_Me_Ia_Gw_Sa'.split('_'),weekdaysParseExact:true,// time formats are the same as en-gb\nlongDateFormat:{LT:'HH:mm',LTS:'HH:mm:ss',L:'DD/MM/YYYY',LL:'D MMMM YYYY',LLL:'D MMMM YYYY HH:mm',LLLL:'dddd, D MMMM YYYY HH:mm'},calendar:{sameDay:'[Heddiw am] LT',nextDay:'[Yfory am] LT',nextWeek:'dddd [am] LT',lastDay:'[Ddoe am] LT',lastWeek:'dddd [diwethaf am] LT',sameElse:'L'},relativeTime:{future:'mewn %s',past:'%s yn ôl',s:'ychydig eiliadau',ss:'%d eiliad',m:'munud',mm:'%d munud',h:'awr',hh:'%d awr',d:'diwrnod',dd:'%d diwrnod',M:'mis',MM:'%d mis',y:'blwyddyn',yy:'%d flynedd'},dayOfMonthOrdinalParse:/\\d{1,2}(fed|ain|af|il|ydd|ed|eg)/,// traditional ordinal numbers above 31 are not commonly used in colloquial Welsh\nordinal:function ordinal(number){var b=number,output='',lookup=['','af','il','ydd','ydd','ed','ed','ed','fed','fed','fed',// 1af to 10fed\n'eg','fed','eg','eg','fed','eg','eg','fed','eg','fed'// 11eg to 20fed\n];if(b>20){if(b===40||b===50||b===60||b===80||b===100){output='fed';// not 30ain, 70ain or 90ain\n}else{output='ain';}}else if(b>0){output=lookup[b];}return number+output;},week:{dow:1,// Monday is the first day of the week.\ndoy:4// The week that contains Jan 4th is the first week of the year.\n}});return cy;});/***/},/***/\"9f26\":/***/function f26(module,exports,__webpack_require__){//! moment.js locale configuration\n//! locale : French [fr]\n//! author : John Fischer : https://github.com/jfroffice\n;(function(global,factory){true?factory(__webpack_require__(\"c1df\")):undefined;})(this,function(moment){'use strict';//! moment.js locale configuration\nvar monthsStrictRegex=/^(janvier|février|mars|avril|mai|juin|juillet|août|septembre|octobre|novembre|décembre)/i,monthsShortStrictRegex=/(janv\\.?|févr\\.?|mars|avr\\.?|mai|juin|juil\\.?|août|sept\\.?|oct\\.?|nov\\.?|déc\\.?)/i,monthsRegex=/(janv\\.?|févr\\.?|mars|avr\\.?|mai|juin|juil\\.?|août|sept\\.?|oct\\.?|nov\\.?|déc\\.?|janvier|février|mars|avril|mai|juin|juillet|août|septembre|octobre|novembre|décembre)/i,monthsParse=[/^janv/i,/^févr/i,/^mars/i,/^avr/i,/^mai/i,/^juin/i,/^juil/i,/^août/i,/^sept/i,/^oct/i,/^nov/i,/^déc/i];var fr=moment.defineLocale('fr',{months:'janvier_février_mars_avril_mai_juin_juillet_août_septembre_octobre_novembre_décembre'.split('_'),monthsShort:'janv._févr._mars_avr._mai_juin_juil._août_sept._oct._nov._déc.'.split('_'),monthsRegex:monthsRegex,monthsShortRegex:monthsRegex,monthsStrictRegex:monthsStrictRegex,monthsShortStrictRegex:monthsShortStrictRegex,monthsParse:monthsParse,longMonthsParse:monthsParse,shortMonthsParse:monthsParse,weekdays:'dimanche_lundi_mardi_mercredi_jeudi_vendredi_samedi'.split('_'),weekdaysShort:'dim._lun._mar._mer._jeu._ven._sam.'.split('_'),weekdaysMin:'di_lu_ma_me_je_ve_sa'.split('_'),weekdaysParseExact:true,longDateFormat:{LT:'HH:mm',LTS:'HH:mm:ss',L:'DD/MM/YYYY',LL:'D MMMM YYYY',LLL:'D MMMM YYYY HH:mm',LLLL:'dddd D MMMM YYYY HH:mm'},calendar:{sameDay:'[Aujourd’hui à] LT',nextDay:'[Demain à] LT',nextWeek:'dddd [à] LT',lastDay:'[Hier à] LT',lastWeek:'dddd [dernier à] LT',sameElse:'L'},relativeTime:{future:'dans %s',past:'il y a %s',s:'quelques secondes',ss:'%d secondes',m:'une minute',mm:'%d minutes',h:'une heure',hh:'%d heures',d:'un jour',dd:'%d jours',M:'un mois',MM:'%d mois',y:'un an',yy:'%d ans'},dayOfMonthOrdinalParse:/\\d{1,2}(er|)/,ordinal:function ordinal(number,period){switch(period){// TODO: Return 'e' when day of month > 1. Move this case inside\n// block for masculine words below.\n// See https://github.com/moment/moment/issues/3375\ncase'D':return number+(number===1?'er':'');// Words with masculine grammatical gender: mois, trimestre, jour\ndefault:case'M':case'Q':case'DDD':case'd':return number+(number===1?'er':'e');// Words with feminine grammatical gender: semaine\ncase'w':case'W':return number+(number===1?'re':'e');}},week:{dow:1,// Monday is the first day of the week.\ndoy:4// The week that contains Jan 4th is the first week of the year.\n}});return fr;});/***/},/***/\"a356\":/***/function a356(module,exports,__webpack_require__){//! moment.js locale configuration\n//! locale : Arabic (Algeria) [ar-dz]\n//! author : Amine Roukh: https://github.com/Amine27\n//! author : Abdel Said: https://github.com/abdelsaid\n//! author : Ahmed Elkhatib\n//! author : forabi https://github.com/forabi\n//! author : Noureddine LOUAHEDJ : https://github.com/noureddinem\n;(function(global,factory){true?factory(__webpack_require__(\"c1df\")):undefined;})(this,function(moment){'use strict';//! moment.js locale configuration\nvar pluralForm=function pluralForm(n){return n===0?0:n===1?1:n===2?2:n%100>=3&&n%100<=10?3:n%100>=11?4:5;},plurals={s:['أقل من ثانية','ثانية واحدة',['ثانيتان','ثانيتين'],'%d ثوان','%d ثانية','%d ثانية'],m:['أقل من دقيقة','دقيقة واحدة',['دقيقتان','دقيقتين'],'%d دقائق','%d دقيقة','%d دقيقة'],h:['أقل من ساعة','ساعة واحدة',['ساعتان','ساعتين'],'%d ساعات','%d ساعة','%d ساعة'],d:['أقل من يوم','يوم واحد',['يومان','يومين'],'%d أيام','%d يومًا','%d يوم'],M:['أقل من شهر','شهر واحد',['شهران','شهرين'],'%d أشهر','%d شهرا','%d شهر'],y:['أقل من عام','عام واحد',['عامان','عامين'],'%d أعوام','%d عامًا','%d عام']},pluralize=function pluralize(u){return function(number,withoutSuffix,string,isFuture){var f=pluralForm(number),str=plurals[u][pluralForm(number)];if(f===2){str=str[withoutSuffix?0:1];}return str.replace(/%d/i,number);};},months=['جانفي','فيفري','مارس','أفريل','ماي','جوان','جويلية','أوت','سبتمبر','أكتوبر','نوفمبر','ديسمبر'];var arDz=moment.defineLocale('ar-dz',{months:months,monthsShort:months,weekdays:'الأحد_الإثنين_الثلاثاء_الأربعاء_الخميس_الجمعة_السبت'.split('_'),weekdaysShort:'أحد_إثنين_ثلاثاء_أربعاء_خميس_جمعة_سبت'.split('_'),weekdaysMin:'ح_ن_ث_ر_خ_ج_س'.split('_'),weekdaysParseExact:true,longDateFormat:{LT:'HH:mm',LTS:'HH:mm:ss',L:\"D/\\u200FM/\\u200FYYYY\",LL:'D MMMM YYYY',LLL:'D MMMM YYYY HH:mm',LLLL:'dddd D MMMM YYYY HH:mm'},meridiemParse:/ص|م/,isPM:function isPM(input){return'م'===input;},meridiem:function meridiem(hour,minute,isLower){if(hour<12){return'ص';}else{return'م';}},calendar:{sameDay:'[اليوم عند الساعة] LT',nextDay:'[غدًا عند الساعة] LT',nextWeek:'dddd [عند الساعة] LT',lastDay:'[أمس عند الساعة] LT',lastWeek:'dddd [عند الساعة] LT',sameElse:'L'},relativeTime:{future:'بعد %s',past:'منذ %s',s:pluralize('s'),ss:pluralize('s'),m:pluralize('m'),mm:pluralize('m'),h:pluralize('h'),hh:pluralize('h'),d:pluralize('d'),dd:pluralize('d'),M:pluralize('M'),MM:pluralize('M'),y:pluralize('y'),yy:pluralize('y')},postformat:function postformat(string){return string.replace(/,/g,'،');},week:{dow:0,// Sunday is the first day of the week.\ndoy:4// The week that contains Jan 4th is the first week of the year.\n}});return arDz;});/***/},/***/\"a7fa\":/***/function a7fa(module,exports,__webpack_require__){//! moment.js locale configuration\n//! locale : Bambara [bm]\n//! author : Estelle Comment : https://github.com/estellecomment\n;(function(global,factory){true?factory(__webpack_require__(\"c1df\")):undefined;})(this,function(moment){'use strict';//! moment.js locale configuration\nvar bm=moment.defineLocale('bm',{months:'Zanwuyekalo_Fewuruyekalo_Marisikalo_Awirilikalo_Mɛkalo_Zuwɛnkalo_Zuluyekalo_Utikalo_Sɛtanburukalo_ɔkutɔburukalo_Nowanburukalo_Desanburukalo'.split('_'),monthsShort:'Zan_Few_Mar_Awi_Mɛ_Zuw_Zul_Uti_Sɛt_ɔku_Now_Des'.split('_'),weekdays:'Kari_Ntɛnɛn_Tarata_Araba_Alamisa_Juma_Sibiri'.split('_'),weekdaysShort:'Kar_Ntɛ_Tar_Ara_Ala_Jum_Sib'.split('_'),weekdaysMin:'Ka_Nt_Ta_Ar_Al_Ju_Si'.split('_'),longDateFormat:{LT:'HH:mm',LTS:'HH:mm:ss',L:'DD/MM/YYYY',LL:'MMMM [tile] D [san] YYYY',LLL:'MMMM [tile] D [san] YYYY [lɛrɛ] HH:mm',LLLL:'dddd MMMM [tile] D [san] YYYY [lɛrɛ] HH:mm'},calendar:{sameDay:'[Bi lɛrɛ] LT',nextDay:'[Sini lɛrɛ] LT',nextWeek:'dddd [don lɛrɛ] LT',lastDay:'[Kunu lɛrɛ] LT',lastWeek:'dddd [tɛmɛnen lɛrɛ] LT',sameElse:'L'},relativeTime:{future:'%s kɔnɔ',past:'a bɛ %s bɔ',s:'sanga dama dama',ss:'sekondi %d',m:'miniti kelen',mm:'miniti %d',h:'lɛrɛ kelen',hh:'lɛrɛ %d',d:'tile kelen',dd:'tile %d',M:'kalo kelen',MM:'kalo %d',y:'san kelen',yy:'san %d'},week:{dow:1,// Monday is the first day of the week.\ndoy:4// The week that contains Jan 4th is the first week of the year.\n}});return bm;});/***/},/***/\"aaf2\":/***/function aaf2(module,exports,__webpack_require__){//! moment.js locale configuration\n//! locale : Konkani Devanagari script [gom-deva]\n//! author : The Discoverer : https://github.com/WikiDiscoverer\n;(function(global,factory){true?factory(__webpack_require__(\"c1df\")):undefined;})(this,function(moment){'use strict';//! moment.js locale configuration\nfunction processRelativeTime(number,withoutSuffix,key,isFuture){var format={s:['थोडया सॅकंडांनी','थोडे सॅकंड'],ss:[number+' सॅकंडांनी',number+' सॅकंड'],m:['एका मिणटान','एक मिनूट'],mm:[number+' मिणटांनी',number+' मिणटां'],h:['एका वरान','एक वर'],hh:[number+' वरांनी',number+' वरां'],d:['एका दिसान','एक दीस'],dd:[number+' दिसांनी',number+' दीस'],M:['एका म्हयन्यान','एक म्हयनो'],MM:[number+' म्हयन्यानी',number+' म्हयने'],y:['एका वर्सान','एक वर्स'],yy:[number+' वर्सांनी',number+' वर्सां']};return isFuture?format[key][0]:format[key][1];}var gomDeva=moment.defineLocale('gom-deva',{months:{standalone:'जानेवारी_फेब्रुवारी_मार्च_एप्रील_मे_जून_जुलय_ऑगस्ट_सप्टेंबर_ऑक्टोबर_नोव्हेंबर_डिसेंबर'.split('_'),format:'जानेवारीच्या_फेब्रुवारीच्या_मार्चाच्या_एप्रीलाच्या_मेयाच्या_जूनाच्या_जुलयाच्या_ऑगस्टाच्या_सप्टेंबराच्या_ऑक्टोबराच्या_नोव्हेंबराच्या_डिसेंबराच्या'.split('_'),isFormat:/MMMM(\\s)+D[oD]?/},monthsShort:'जाने._फेब्रु._मार्च_एप्री._मे_जून_जुल._ऑग._सप्टें._ऑक्टो._नोव्हें._डिसें.'.split('_'),monthsParseExact:true,weekdays:'आयतार_सोमार_मंगळार_बुधवार_बिरेस्तार_सुक्रार_शेनवार'.split('_'),weekdaysShort:'आयत._सोम._मंगळ._बुध._ब्रेस्त._सुक्र._शेन.'.split('_'),weekdaysMin:'आ_सो_मं_बु_ब्रे_सु_शे'.split('_'),weekdaysParseExact:true,longDateFormat:{LT:'A h:mm [वाजतां]',LTS:'A h:mm:ss [वाजतां]',L:'DD-MM-YYYY',LL:'D MMMM YYYY',LLL:'D MMMM YYYY A h:mm [वाजतां]',LLLL:'dddd, MMMM Do, YYYY, A h:mm [वाजतां]',llll:'ddd, D MMM YYYY, A h:mm [वाजतां]'},calendar:{sameDay:'[आयज] LT',nextDay:'[फाल्यां] LT',nextWeek:'[फुडलो] dddd[,] LT',lastDay:'[काल] LT',lastWeek:'[फाटलो] dddd[,] LT',sameElse:'L'},relativeTime:{future:'%s',past:'%s आदीं',s:processRelativeTime,ss:processRelativeTime,m:processRelativeTime,mm:processRelativeTime,h:processRelativeTime,hh:processRelativeTime,d:processRelativeTime,dd:processRelativeTime,M:processRelativeTime,MM:processRelativeTime,y:processRelativeTime,yy:processRelativeTime},dayOfMonthOrdinalParse:/\\d{1,2}(वेर)/,ordinal:function ordinal(number,period){switch(period){// the ordinal 'वेर' only applies to day of the month\ncase'D':return number+'वेर';default:case'M':case'Q':case'DDD':case'd':case'w':case'W':return number;}},week:{dow:1,// Monday is the first day of the week.\ndoy:4// The week that contains Jan 4th is the first week of the year.\n},meridiemParse:/राती|सकाळीं|दनपारां|सांजे/,meridiemHour:function meridiemHour(hour,meridiem){if(hour===12){hour=0;}if(meridiem==='राती'){return hour<4?hour:hour+12;}else if(meridiem==='सकाळीं'){return hour;}else if(meridiem==='दनपारां'){return hour>12?hour:hour+12;}else if(meridiem==='सांजे'){return hour+12;}},meridiem:function meridiem(hour,minute,isLower){if(hour<4){return'राती';}else if(hour<12){return'सकाळीं';}else if(hour<16){return'दनपारां';}else if(hour<20){return'सांजे';}else{return'राती';}}});return gomDeva;});/***/},/***/\"ada2\":/***/function ada2(module,exports,__webpack_require__){//! moment.js locale configuration\n//! locale : Ukrainian [uk]\n//! author : zemlanin : https://github.com/zemlanin\n//! Author : Menelion Elensúle : https://github.com/Oire\n;(function(global,factory){true?factory(__webpack_require__(\"c1df\")):undefined;})(this,function(moment){'use strict';//! moment.js locale configuration\nfunction plural(word,num){var forms=word.split('_');return num%10===1&&num%100!==11?forms[0]:num%10>=2&&num%10<=4&&(num%100<10||num%100>=20)?forms[1]:forms[2];}function relativeTimeWithPlural(number,withoutSuffix,key){var format={ss:withoutSuffix?'секунда_секунди_секунд':'секунду_секунди_секунд',mm:withoutSuffix?'хвилина_хвилини_хвилин':'хвилину_хвилини_хвилин',hh:withoutSuffix?'година_години_годин':'годину_години_годин',dd:'день_дні_днів',MM:'місяць_місяці_місяців',yy:'рік_роки_років'};if(key==='m'){return withoutSuffix?'хвилина':'хвилину';}else if(key==='h'){return withoutSuffix?'година':'годину';}else{return number+' '+plural(format[key],+number);}}function weekdaysCaseReplace(m,format){var weekdays={nominative:'неділя_понеділок_вівторок_середа_четвер_п’ятниця_субота'.split('_'),accusative:'неділю_понеділок_вівторок_середу_четвер_п’ятницю_суботу'.split('_'),genitive:'неділі_понеділка_вівторка_середи_четверга_п’ятниці_суботи'.split('_')},nounCase;if(m===true){return weekdays['nominative'].slice(1,7).concat(weekdays['nominative'].slice(0,1));}if(!m){return weekdays['nominative'];}nounCase=/(\\[[ВвУу]\\]) ?dddd/.test(format)?'accusative':/\\[?(?:минулої|наступної)? ?\\] ?dddd/.test(format)?'genitive':'nominative';return weekdays[nounCase][m.day()];}function processHoursFunction(str){return function(){return str+'о'+(this.hours()===11?'б':'')+'] LT';};}var uk=moment.defineLocale('uk',{months:{format:'січня_лютого_березня_квітня_травня_червня_липня_серпня_вересня_жовтня_листопада_грудня'.split('_'),standalone:'січень_лютий_березень_квітень_травень_червень_липень_серпень_вересень_жовтень_листопад_грудень'.split('_')},monthsShort:'січ_лют_бер_квіт_трав_черв_лип_серп_вер_жовт_лист_груд'.split('_'),weekdays:weekdaysCaseReplace,weekdaysShort:'нд_пн_вт_ср_чт_пт_сб'.split('_'),weekdaysMin:'нд_пн_вт_ср_чт_пт_сб'.split('_'),longDateFormat:{LT:'HH:mm',LTS:'HH:mm:ss',L:'DD.MM.YYYY',LL:'D MMMM YYYY р.',LLL:'D MMMM YYYY р., HH:mm',LLLL:'dddd, D MMMM YYYY р., HH:mm'},calendar:{sameDay:processHoursFunction('[Сьогодні '),nextDay:processHoursFunction('[Завтра '),lastDay:processHoursFunction('[Вчора '),nextWeek:processHoursFunction('[У] dddd ['),lastWeek:function lastWeek(){switch(this.day()){case 0:case 3:case 5:case 6:return processHoursFunction('[Минулої] dddd [').call(this);case 1:case 2:case 4:return processHoursFunction('[Минулого] dddd [').call(this);}},sameElse:'L'},relativeTime:{future:'за %s',past:'%s тому',s:'декілька секунд',ss:relativeTimeWithPlural,m:relativeTimeWithPlural,mm:relativeTimeWithPlural,h:'годину',hh:relativeTimeWithPlural,d:'день',dd:relativeTimeWithPlural,M:'місяць',MM:relativeTimeWithPlural,y:'рік',yy:relativeTimeWithPlural},// M. E.: those two are virtually unused but a user might want to implement them for his/her website for some reason\nmeridiemParse:/ночі|ранку|дня|вечора/,isPM:function isPM(input){return /^(дня|вечора)$/.test(input);},meridiem:function meridiem(hour,minute,isLower){if(hour<4){return'ночі';}else if(hour<12){return'ранку';}else if(hour<17){return'дня';}else{return'вечора';}},dayOfMonthOrdinalParse:/\\d{1,2}-(й|го)/,ordinal:function ordinal(number,period){switch(period){case'M':case'd':case'DDD':case'w':case'W':return number+'-й';case'D':return number+'-го';default:return number;}},week:{dow:1,// Monday is the first day of the week.\ndoy:7// The week that contains Jan 7th is the first week of the year.\n}});return uk;});/***/},/***/\"b29d\":/***/function b29d(module,exports,__webpack_require__){//! moment.js locale configuration\n//! locale : Lao [lo]\n//! author : Ryan Hart : https://github.com/ryanhart2\n;(function(global,factory){true?factory(__webpack_require__(\"c1df\")):undefined;})(this,function(moment){'use strict';//! moment.js locale configuration\nvar lo=moment.defineLocale('lo',{months:'ມັງກອນ_ກຸມພາ_ມີນາ_ເມສາ_ພຶດສະພາ_ມິຖຸນາ_ກໍລະກົດ_ສິງຫາ_ກັນຍາ_ຕຸລາ_ພະຈິກ_ທັນວາ'.split('_'),monthsShort:'ມັງກອນ_ກຸມພາ_ມີນາ_ເມສາ_ພຶດສະພາ_ມິຖຸນາ_ກໍລະກົດ_ສິງຫາ_ກັນຍາ_ຕຸລາ_ພະຈິກ_ທັນວາ'.split('_'),weekdays:'ອາທິດ_ຈັນ_ອັງຄານ_ພຸດ_ພະຫັດ_ສຸກ_ເສົາ'.split('_'),weekdaysShort:'ທິດ_ຈັນ_ອັງຄານ_ພຸດ_ພະຫັດ_ສຸກ_ເສົາ'.split('_'),weekdaysMin:'ທ_ຈ_ອຄ_ພ_ພຫ_ສກ_ສ'.split('_'),weekdaysParseExact:true,longDateFormat:{LT:'HH:mm',LTS:'HH:mm:ss',L:'DD/MM/YYYY',LL:'D MMMM YYYY',LLL:'D MMMM YYYY HH:mm',LLLL:'ວັນdddd D MMMM YYYY HH:mm'},meridiemParse:/ຕອນເຊົ້າ|ຕອນແລງ/,isPM:function isPM(input){return input==='ຕອນແລງ';},meridiem:function meridiem(hour,minute,isLower){if(hour<12){return'ຕອນເຊົ້າ';}else{return'ຕອນແລງ';}},calendar:{sameDay:'[ມື້ນີ້ເວລາ] LT',nextDay:'[ມື້ອື່ນເວລາ] LT',nextWeek:'[ວັນ]dddd[ໜ້າເວລາ] LT',lastDay:'[ມື້ວານນີ້ເວລາ] LT',lastWeek:'[ວັນ]dddd[ແລ້ວນີ້ເວລາ] LT',sameElse:'L'},relativeTime:{future:'ອີກ %s',past:'%sຜ່ານມາ',s:'ບໍ່ເທົ່າໃດວິນາທີ',ss:'%d ວິນາທີ',m:'1 ນາທີ',mm:'%d ນາທີ',h:'1 ຊົ່ວໂມງ',hh:'%d ຊົ່ວໂມງ',d:'1 ມື້',dd:'%d ມື້',M:'1 ເດືອນ',MM:'%d ເດືອນ',y:'1 ປີ',yy:'%d ປີ'},dayOfMonthOrdinalParse:/(ທີ່)\\d{1,2}/,ordinal:function ordinal(number){return'ທີ່'+number;}});return lo;});/***/},/***/\"b3eb\":/***/function b3eb(module,exports,__webpack_require__){//! moment.js locale configuration\n//! locale : German (Austria) [de-at]\n//! author : lluchs : https://github.com/lluchs\n//! author: Menelion Elensúle: https://github.com/Oire\n//! author : Martin Groller : https://github.com/MadMG\n//! author : Mikolaj Dadela : https://github.com/mik01aj\n;(function(global,factory){true?factory(__webpack_require__(\"c1df\")):undefined;})(this,function(moment){'use strict';//! moment.js locale configuration\nfunction processRelativeTime(number,withoutSuffix,key,isFuture){var format={m:['eine Minute','einer Minute'],h:['eine Stunde','einer Stunde'],d:['ein Tag','einem Tag'],dd:[number+' Tage',number+' Tagen'],w:['eine Woche','einer Woche'],M:['ein Monat','einem Monat'],MM:[number+' Monate',number+' Monaten'],y:['ein Jahr','einem Jahr'],yy:[number+' Jahre',number+' Jahren']};return withoutSuffix?format[key][0]:format[key][1];}var deAt=moment.defineLocale('de-at',{months:'Jänner_Februar_März_April_Mai_Juni_Juli_August_September_Oktober_November_Dezember'.split('_'),monthsShort:'Jän._Feb._März_Apr._Mai_Juni_Juli_Aug._Sep._Okt._Nov._Dez.'.split('_'),monthsParseExact:true,weekdays:'Sonntag_Montag_Dienstag_Mittwoch_Donnerstag_Freitag_Samstag'.split('_'),weekdaysShort:'So._Mo._Di._Mi._Do._Fr._Sa.'.split('_'),weekdaysMin:'So_Mo_Di_Mi_Do_Fr_Sa'.split('_'),weekdaysParseExact:true,longDateFormat:{LT:'HH:mm',LTS:'HH:mm:ss',L:'DD.MM.YYYY',LL:'D. MMMM YYYY',LLL:'D. MMMM YYYY HH:mm',LLLL:'dddd, D. MMMM YYYY HH:mm'},calendar:{sameDay:'[heute um] LT [Uhr]',sameElse:'L',nextDay:'[morgen um] LT [Uhr]',nextWeek:'dddd [um] LT [Uhr]',lastDay:'[gestern um] LT [Uhr]',lastWeek:'[letzten] dddd [um] LT [Uhr]'},relativeTime:{future:'in %s',past:'vor %s',s:'ein paar Sekunden',ss:'%d Sekunden',m:processRelativeTime,mm:'%d Minuten',h:processRelativeTime,hh:'%d Stunden',d:processRelativeTime,dd:processRelativeTime,w:processRelativeTime,ww:'%d Wochen',M:processRelativeTime,MM:processRelativeTime,y:processRelativeTime,yy:processRelativeTime},dayOfMonthOrdinalParse:/\\d{1,2}\\./,ordinal:'%d.',week:{dow:1,// Monday is the first day of the week.\ndoy:4// The week that contains Jan 4th is the first week of the year.\n}});return deAt;});/***/},/***/\"b469\":/***/function b469(module,exports,__webpack_require__){//! moment.js locale configuration\n//! locale : German [de]\n//! author : lluchs : https://github.com/lluchs\n//! author: Menelion Elensúle: https://github.com/Oire\n//! author : Mikolaj Dadela : https://github.com/mik01aj\n;(function(global,factory){true?factory(__webpack_require__(\"c1df\")):undefined;})(this,function(moment){'use strict';//! moment.js locale configuration\nfunction processRelativeTime(number,withoutSuffix,key,isFuture){var format={m:['eine Minute','einer Minute'],h:['eine Stunde','einer Stunde'],d:['ein Tag','einem Tag'],dd:[number+' Tage',number+' Tagen'],w:['eine Woche','einer Woche'],M:['ein Monat','einem Monat'],MM:[number+' Monate',number+' Monaten'],y:['ein Jahr','einem Jahr'],yy:[number+' Jahre',number+' Jahren']};return withoutSuffix?format[key][0]:format[key][1];}var de=moment.defineLocale('de',{months:'Januar_Februar_März_April_Mai_Juni_Juli_August_September_Oktober_November_Dezember'.split('_'),monthsShort:'Jan._Feb._März_Apr._Mai_Juni_Juli_Aug._Sep._Okt._Nov._Dez.'.split('_'),monthsParseExact:true,weekdays:'Sonntag_Montag_Dienstag_Mittwoch_Donnerstag_Freitag_Samstag'.split('_'),weekdaysShort:'So._Mo._Di._Mi._Do._Fr._Sa.'.split('_'),weekdaysMin:'So_Mo_Di_Mi_Do_Fr_Sa'.split('_'),weekdaysParseExact:true,longDateFormat:{LT:'HH:mm',LTS:'HH:mm:ss',L:'DD.MM.YYYY',LL:'D. MMMM YYYY',LLL:'D. MMMM YYYY HH:mm',LLLL:'dddd, D. MMMM YYYY HH:mm'},calendar:{sameDay:'[heute um] LT [Uhr]',sameElse:'L',nextDay:'[morgen um] LT [Uhr]',nextWeek:'dddd [um] LT [Uhr]',lastDay:'[gestern um] LT [Uhr]',lastWeek:'[letzten] dddd [um] LT [Uhr]'},relativeTime:{future:'in %s',past:'vor %s',s:'ein paar Sekunden',ss:'%d Sekunden',m:processRelativeTime,mm:'%d Minuten',h:processRelativeTime,hh:'%d Stunden',d:processRelativeTime,dd:processRelativeTime,w:processRelativeTime,ww:'%d Wochen',M:processRelativeTime,MM:processRelativeTime,y:processRelativeTime,yy:processRelativeTime},dayOfMonthOrdinalParse:/\\d{1,2}\\./,ordinal:'%d.',week:{dow:1,// Monday is the first day of the week.\ndoy:4// The week that contains Jan 4th is the first week of the year.\n}});return de;});/***/},/***/\"b53d\":/***/function b53d(module,exports,__webpack_require__){//! moment.js locale configuration\n//! locale : Central Atlas Tamazight Latin [tzm-latn]\n//! author : Abdel Said : https://github.com/abdelsaid\n;(function(global,factory){true?factory(__webpack_require__(\"c1df\")):undefined;})(this,function(moment){'use strict';//! moment.js locale configuration\nvar tzmLatn=moment.defineLocale('tzm-latn',{months:'innayr_brˤayrˤ_marˤsˤ_ibrir_mayyw_ywnyw_ywlywz_ɣwšt_šwtanbir_ktˤwbrˤ_nwwanbir_dwjnbir'.split('_'),monthsShort:'innayr_brˤayrˤ_marˤsˤ_ibrir_mayyw_ywnyw_ywlywz_ɣwšt_šwtanbir_ktˤwbrˤ_nwwanbir_dwjnbir'.split('_'),weekdays:'asamas_aynas_asinas_akras_akwas_asimwas_asiḍyas'.split('_'),weekdaysShort:'asamas_aynas_asinas_akras_akwas_asimwas_asiḍyas'.split('_'),weekdaysMin:'asamas_aynas_asinas_akras_akwas_asimwas_asiḍyas'.split('_'),longDateFormat:{LT:'HH:mm',LTS:'HH:mm:ss',L:'DD/MM/YYYY',LL:'D MMMM YYYY',LLL:'D MMMM YYYY HH:mm',LLLL:'dddd D MMMM YYYY HH:mm'},calendar:{sameDay:'[asdkh g] LT',nextDay:'[aska g] LT',nextWeek:'dddd [g] LT',lastDay:'[assant g] LT',lastWeek:'dddd [g] LT',sameElse:'L'},relativeTime:{future:'dadkh s yan %s',past:'yan %s',s:'imik',ss:'%d imik',m:'minuḍ',mm:'%d minuḍ',h:'saɛa',hh:'%d tassaɛin',d:'ass',dd:'%d ossan',M:'ayowr',MM:'%d iyyirn',y:'asgas',yy:'%d isgasn'},week:{dow:6,// Saturday is the first day of the week.\ndoy:12// The week that contains Jan 12th is the first week of the year.\n}});return tzmLatn;});/***/},/***/\"b540\":/***/function b540(module,exports,__webpack_require__){//! moment.js locale configuration\n//! locale : Javanese [jv]\n//! author : Rony Lantip : https://github.com/lantip\n//! reference: http://jv.wikipedia.org/wiki/Basa_Jawa\n;(function(global,factory){true?factory(__webpack_require__(\"c1df\")):undefined;})(this,function(moment){'use strict';//! moment.js locale configuration\nvar jv=moment.defineLocale('jv',{months:'Januari_Februari_Maret_April_Mei_Juni_Juli_Agustus_September_Oktober_Nopember_Desember'.split('_'),monthsShort:'Jan_Feb_Mar_Apr_Mei_Jun_Jul_Ags_Sep_Okt_Nop_Des'.split('_'),weekdays:'Minggu_Senen_Seloso_Rebu_Kemis_Jemuwah_Septu'.split('_'),weekdaysShort:'Min_Sen_Sel_Reb_Kem_Jem_Sep'.split('_'),weekdaysMin:'Mg_Sn_Sl_Rb_Km_Jm_Sp'.split('_'),longDateFormat:{LT:'HH.mm',LTS:'HH.mm.ss',L:'DD/MM/YYYY',LL:'D MMMM YYYY',LLL:'D MMMM YYYY [pukul] HH.mm',LLLL:'dddd, D MMMM YYYY [pukul] HH.mm'},meridiemParse:/enjing|siyang|sonten|ndalu/,meridiemHour:function meridiemHour(hour,meridiem){if(hour===12){hour=0;}if(meridiem==='enjing'){return hour;}else if(meridiem==='siyang'){return hour>=11?hour:hour+12;}else if(meridiem==='sonten'||meridiem==='ndalu'){return hour+12;}},meridiem:function meridiem(hours,minutes,isLower){if(hours<11){return'enjing';}else if(hours<15){return'siyang';}else if(hours<19){return'sonten';}else{return'ndalu';}},calendar:{sameDay:'[Dinten puniko pukul] LT',nextDay:'[Mbenjang pukul] LT',nextWeek:'dddd [pukul] LT',lastDay:'[Kala wingi pukul] LT',lastWeek:'dddd [kepengker pukul] LT',sameElse:'L'},relativeTime:{future:'wonten ing %s',past:'%s ingkang kepengker',s:'sawetawis detik',ss:'%d detik',m:'setunggal menit',mm:'%d menit',h:'setunggal jam',hh:'%d jam',d:'sedinten',dd:'%d dinten',M:'sewulan',MM:'%d wulan',y:'setaun',yy:'%d taun'},week:{dow:1,// Monday is the first day of the week.\ndoy:7// The week that contains Jan 7th is the first week of the year.\n}});return jv;});/***/},/***/\"b7e9\":/***/function b7e9(module,exports,__webpack_require__){//! moment.js locale configuration\n//! locale : English (Singapore) [en-sg]\n//! author : Matthew Castrillon-Madrigal : https://github.com/techdimension\n;(function(global,factory){true?factory(__webpack_require__(\"c1df\")):undefined;})(this,function(moment){'use strict';//! moment.js locale configuration\nvar enSg=moment.defineLocale('en-sg',{months:'January_February_March_April_May_June_July_August_September_October_November_December'.split('_'),monthsShort:'Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec'.split('_'),weekdays:'Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday'.split('_'),weekdaysShort:'Sun_Mon_Tue_Wed_Thu_Fri_Sat'.split('_'),weekdaysMin:'Su_Mo_Tu_We_Th_Fr_Sa'.split('_'),longDateFormat:{LT:'HH:mm',LTS:'HH:mm:ss',L:'DD/MM/YYYY',LL:'D MMMM YYYY',LLL:'D MMMM YYYY HH:mm',LLLL:'dddd, D MMMM YYYY HH:mm'},calendar:{sameDay:'[Today at] LT',nextDay:'[Tomorrow at] LT',nextWeek:'dddd [at] LT',lastDay:'[Yesterday at] LT',lastWeek:'[Last] dddd [at] LT',sameElse:'L'},relativeTime:{future:'in %s',past:'%s ago',s:'a few seconds',ss:'%d seconds',m:'a minute',mm:'%d minutes',h:'an hour',hh:'%d hours',d:'a day',dd:'%d days',M:'a month',MM:'%d months',y:'a year',yy:'%d years'},dayOfMonthOrdinalParse:/\\d{1,2}(st|nd|rd|th)/,ordinal:function ordinal(number){var b=number%10,output=~~(number%100/10)===1?'th':b===1?'st':b===2?'nd':b===3?'rd':'th';return number+output;},week:{dow:1,// Monday is the first day of the week.\ndoy:4// The week that contains Jan 4th is the first week of the year.\n}});return enSg;});/***/},/***/\"b84c\":/***/function b84c(module,exports,__webpack_require__){//! moment.js locale configuration\n//! locale : Nynorsk [nn]\n//! authors : https://github.com/mechuwind\n//!           Stephen Ramthun : https://github.com/stephenramthun\n;(function(global,factory){true?factory(__webpack_require__(\"c1df\")):undefined;})(this,function(moment){'use strict';//! moment.js locale configuration\nvar nn=moment.defineLocale('nn',{months:'januar_februar_mars_april_mai_juni_juli_august_september_oktober_november_desember'.split('_'),monthsShort:'jan._feb._mars_apr._mai_juni_juli_aug._sep._okt._nov._des.'.split('_'),monthsParseExact:true,weekdays:'sundag_måndag_tysdag_onsdag_torsdag_fredag_laurdag'.split('_'),weekdaysShort:'su._må._ty._on._to._fr._lau.'.split('_'),weekdaysMin:'su_må_ty_on_to_fr_la'.split('_'),weekdaysParseExact:true,longDateFormat:{LT:'HH:mm',LTS:'HH:mm:ss',L:'DD.MM.YYYY',LL:'D. MMMM YYYY',LLL:'D. MMMM YYYY [kl.] H:mm',LLLL:'dddd D. MMMM YYYY [kl.] HH:mm'},calendar:{sameDay:'[I dag klokka] LT',nextDay:'[I morgon klokka] LT',nextWeek:'dddd [klokka] LT',lastDay:'[I går klokka] LT',lastWeek:'[Føregåande] dddd [klokka] LT',sameElse:'L'},relativeTime:{future:'om %s',past:'%s sidan',s:'nokre sekund',ss:'%d sekund',m:'eit minutt',mm:'%d minutt',h:'ein time',hh:'%d timar',d:'ein dag',dd:'%d dagar',M:'ein månad',MM:'%d månader',y:'eit år',yy:'%d år'},dayOfMonthOrdinalParse:/\\d{1,2}\\./,ordinal:'%d.',week:{dow:1,// Monday is the first day of the week.\ndoy:4// The week that contains Jan 4th is the first week of the year.\n}});return nn;});/***/},/***/\"b97c\":/***/function b97c(module,exports,__webpack_require__){//! moment.js locale configuration\n//! locale : Latvian [lv]\n//! author : Kristaps Karlsons : https://github.com/skakri\n//! author : Jānis Elmeris : https://github.com/JanisE\n;(function(global,factory){true?factory(__webpack_require__(\"c1df\")):undefined;})(this,function(moment){'use strict';//! moment.js locale configuration\nvar units={ss:'sekundes_sekundēm_sekunde_sekundes'.split('_'),m:'minūtes_minūtēm_minūte_minūtes'.split('_'),mm:'minūtes_minūtēm_minūte_minūtes'.split('_'),h:'stundas_stundām_stunda_stundas'.split('_'),hh:'stundas_stundām_stunda_stundas'.split('_'),d:'dienas_dienām_diena_dienas'.split('_'),dd:'dienas_dienām_diena_dienas'.split('_'),M:'mēneša_mēnešiem_mēnesis_mēneši'.split('_'),MM:'mēneša_mēnešiem_mēnesis_mēneši'.split('_'),y:'gada_gadiem_gads_gadi'.split('_'),yy:'gada_gadiem_gads_gadi'.split('_')};/**\n     * @param withoutSuffix boolean true = a length of time; false = before/after a period of time.\n     */function format(forms,number,withoutSuffix){if(withoutSuffix){// E.g. \"21 minūte\", \"3 minūtes\".\nreturn number%10===1&&number%100!==11?forms[2]:forms[3];}else{// E.g. \"21 minūtes\" as in \"pēc 21 minūtes\".\n// E.g. \"3 minūtēm\" as in \"pēc 3 minūtēm\".\nreturn number%10===1&&number%100!==11?forms[0]:forms[1];}}function relativeTimeWithPlural(number,withoutSuffix,key){return number+' '+format(units[key],number,withoutSuffix);}function relativeTimeWithSingular(number,withoutSuffix,key){return format(units[key],number,withoutSuffix);}function relativeSeconds(number,withoutSuffix){return withoutSuffix?'dažas sekundes':'dažām sekundēm';}var lv=moment.defineLocale('lv',{months:'janvāris_februāris_marts_aprīlis_maijs_jūnijs_jūlijs_augusts_septembris_oktobris_novembris_decembris'.split('_'),monthsShort:'jan_feb_mar_apr_mai_jūn_jūl_aug_sep_okt_nov_dec'.split('_'),weekdays:'svētdiena_pirmdiena_otrdiena_trešdiena_ceturtdiena_piektdiena_sestdiena'.split('_'),weekdaysShort:'Sv_P_O_T_C_Pk_S'.split('_'),weekdaysMin:'Sv_P_O_T_C_Pk_S'.split('_'),weekdaysParseExact:true,longDateFormat:{LT:'HH:mm',LTS:'HH:mm:ss',L:'DD.MM.YYYY.',LL:'YYYY. [gada] D. MMMM',LLL:'YYYY. [gada] D. MMMM, HH:mm',LLLL:'YYYY. [gada] D. MMMM, dddd, HH:mm'},calendar:{sameDay:'[Šodien pulksten] LT',nextDay:'[Rīt pulksten] LT',nextWeek:'dddd [pulksten] LT',lastDay:'[Vakar pulksten] LT',lastWeek:'[Pagājušā] dddd [pulksten] LT',sameElse:'L'},relativeTime:{future:'pēc %s',past:'pirms %s',s:relativeSeconds,ss:relativeTimeWithPlural,m:relativeTimeWithSingular,mm:relativeTimeWithPlural,h:relativeTimeWithSingular,hh:relativeTimeWithPlural,d:relativeTimeWithSingular,dd:relativeTimeWithPlural,M:relativeTimeWithSingular,MM:relativeTimeWithPlural,y:relativeTimeWithSingular,yy:relativeTimeWithPlural},dayOfMonthOrdinalParse:/\\d{1,2}\\./,ordinal:'%d.',week:{dow:1,// Monday is the first day of the week.\ndoy:4// The week that contains Jan 4th is the first week of the year.\n}});return lv;});/***/},/***/\"bb71\":/***/function bb71(module,exports,__webpack_require__){//! moment.js locale configuration\n//! locale : German (Switzerland) [de-ch]\n//! author : sschueller : https://github.com/sschueller\n;(function(global,factory){true?factory(__webpack_require__(\"c1df\")):undefined;})(this,function(moment){'use strict';//! moment.js locale configuration\nfunction processRelativeTime(number,withoutSuffix,key,isFuture){var format={m:['eine Minute','einer Minute'],h:['eine Stunde','einer Stunde'],d:['ein Tag','einem Tag'],dd:[number+' Tage',number+' Tagen'],w:['eine Woche','einer Woche'],M:['ein Monat','einem Monat'],MM:[number+' Monate',number+' Monaten'],y:['ein Jahr','einem Jahr'],yy:[number+' Jahre',number+' Jahren']};return withoutSuffix?format[key][0]:format[key][1];}var deCh=moment.defineLocale('de-ch',{months:'Januar_Februar_März_April_Mai_Juni_Juli_August_September_Oktober_November_Dezember'.split('_'),monthsShort:'Jan._Feb._März_Apr._Mai_Juni_Juli_Aug._Sep._Okt._Nov._Dez.'.split('_'),monthsParseExact:true,weekdays:'Sonntag_Montag_Dienstag_Mittwoch_Donnerstag_Freitag_Samstag'.split('_'),weekdaysShort:'So_Mo_Di_Mi_Do_Fr_Sa'.split('_'),weekdaysMin:'So_Mo_Di_Mi_Do_Fr_Sa'.split('_'),weekdaysParseExact:true,longDateFormat:{LT:'HH:mm',LTS:'HH:mm:ss',L:'DD.MM.YYYY',LL:'D. MMMM YYYY',LLL:'D. MMMM YYYY HH:mm',LLLL:'dddd, D. MMMM YYYY HH:mm'},calendar:{sameDay:'[heute um] LT [Uhr]',sameElse:'L',nextDay:'[morgen um] LT [Uhr]',nextWeek:'dddd [um] LT [Uhr]',lastDay:'[gestern um] LT [Uhr]',lastWeek:'[letzten] dddd [um] LT [Uhr]'},relativeTime:{future:'in %s',past:'vor %s',s:'ein paar Sekunden',ss:'%d Sekunden',m:processRelativeTime,mm:'%d Minuten',h:processRelativeTime,hh:'%d Stunden',d:processRelativeTime,dd:processRelativeTime,w:processRelativeTime,ww:'%d Wochen',M:processRelativeTime,MM:processRelativeTime,y:processRelativeTime,yy:processRelativeTime},dayOfMonthOrdinalParse:/\\d{1,2}\\./,ordinal:'%d.',week:{dow:1,// Monday is the first day of the week.\ndoy:4// The week that contains Jan 4th is the first week of the year.\n}});return deCh;});/***/},/***/\"c109\":/***/function c109(module,exports,__webpack_require__){//! moment.js locale configuration\n//! locale : Central Atlas Tamazight [tzm]\n//! author : Abdel Said : https://github.com/abdelsaid\n;(function(global,factory){true?factory(__webpack_require__(\"c1df\")):undefined;})(this,function(moment){'use strict';//! moment.js locale configuration\nvar tzm=moment.defineLocale('tzm',{months:'ⵉⵏⵏⴰⵢⵔ_ⴱⵕⴰⵢⵕ_ⵎⴰⵕⵚ_ⵉⴱⵔⵉⵔ_ⵎⴰⵢⵢⵓ_ⵢⵓⵏⵢⵓ_ⵢⵓⵍⵢⵓⵣ_ⵖⵓⵛⵜ_ⵛⵓⵜⴰⵏⴱⵉⵔ_ⴽⵟⵓⴱⵕ_ⵏⵓⵡⴰⵏⴱⵉⵔ_ⴷⵓⵊⵏⴱⵉⵔ'.split('_'),monthsShort:'ⵉⵏⵏⴰⵢⵔ_ⴱⵕⴰⵢⵕ_ⵎⴰⵕⵚ_ⵉⴱⵔⵉⵔ_ⵎⴰⵢⵢⵓ_ⵢⵓⵏⵢⵓ_ⵢⵓⵍⵢⵓⵣ_ⵖⵓⵛⵜ_ⵛⵓⵜⴰⵏⴱⵉⵔ_ⴽⵟⵓⴱⵕ_ⵏⵓⵡⴰⵏⴱⵉⵔ_ⴷⵓⵊⵏⴱⵉⵔ'.split('_'),weekdays:'ⴰⵙⴰⵎⴰⵙ_ⴰⵢⵏⴰⵙ_ⴰⵙⵉⵏⴰⵙ_ⴰⴽⵔⴰⵙ_ⴰⴽⵡⴰⵙ_ⴰⵙⵉⵎⵡⴰⵙ_ⴰⵙⵉⴹⵢⴰⵙ'.split('_'),weekdaysShort:'ⴰⵙⴰⵎⴰⵙ_ⴰⵢⵏⴰⵙ_ⴰⵙⵉⵏⴰⵙ_ⴰⴽⵔⴰⵙ_ⴰⴽⵡⴰⵙ_ⴰⵙⵉⵎⵡⴰⵙ_ⴰⵙⵉⴹⵢⴰⵙ'.split('_'),weekdaysMin:'ⴰⵙⴰⵎⴰⵙ_ⴰⵢⵏⴰⵙ_ⴰⵙⵉⵏⴰⵙ_ⴰⴽⵔⴰⵙ_ⴰⴽⵡⴰⵙ_ⴰⵙⵉⵎⵡⴰⵙ_ⴰⵙⵉⴹⵢⴰⵙ'.split('_'),longDateFormat:{LT:'HH:mm',LTS:'HH:mm:ss',L:'DD/MM/YYYY',LL:'D MMMM YYYY',LLL:'D MMMM YYYY HH:mm',LLLL:'dddd D MMMM YYYY HH:mm'},calendar:{sameDay:'[ⴰⵙⴷⵅ ⴴ] LT',nextDay:'[ⴰⵙⴽⴰ ⴴ] LT',nextWeek:'dddd [ⴴ] LT',lastDay:'[ⴰⵚⴰⵏⵜ ⴴ] LT',lastWeek:'dddd [ⴴ] LT',sameElse:'L'},relativeTime:{future:'ⴷⴰⴷⵅ ⵙ ⵢⴰⵏ %s',past:'ⵢⴰⵏ %s',s:'ⵉⵎⵉⴽ',ss:'%d ⵉⵎⵉⴽ',m:'ⵎⵉⵏⵓⴺ',mm:'%d ⵎⵉⵏⵓⴺ',h:'ⵙⴰⵄⴰ',hh:'%d ⵜⴰⵙⵙⴰⵄⵉⵏ',d:'ⴰⵙⵙ',dd:'%d oⵙⵙⴰⵏ',M:'ⴰⵢoⵓⵔ',MM:'%d ⵉⵢⵢⵉⵔⵏ',y:'ⴰⵙⴳⴰⵙ',yy:'%d ⵉⵙⴳⴰⵙⵏ'},week:{dow:6,// Saturday is the first day of the week.\ndoy:12// The week that contains Jan 12th is the first week of the year.\n}});return tzm;});/***/},/***/\"c1df\":/***/function c1df(module,exports,__webpack_require__){/* WEBPACK VAR INJECTION */(function(module){var require;//! moment.js\n//! version : 2.27.0\n//! authors : Tim Wood, Iskren Chernev, Moment.js contributors\n//! license : MIT\n//! momentjs.com\n;(function(global,factory){true?module.exports=factory():undefined;})(this,function(){'use strict';var hookCallback;function hooks(){return hookCallback.apply(null,arguments);}// This is done to register the method called with moment()\n// without creating circular dependencies.\nfunction setHookCallback(callback){hookCallback=callback;}function isArray(input){return input instanceof Array||Object.prototype.toString.call(input)==='[object Array]';}function isObject(input){// IE8 will treat undefined and null as object if it wasn't for\n// input != null\nreturn input!=null&&Object.prototype.toString.call(input)==='[object Object]';}function hasOwnProp(a,b){return Object.prototype.hasOwnProperty.call(a,b);}function isObjectEmpty(obj){if(Object.getOwnPropertyNames){return Object.getOwnPropertyNames(obj).length===0;}else{var k;for(k in obj){if(hasOwnProp(obj,k)){return false;}}return true;}}function isUndefined(input){return input===void 0;}function isNumber(input){return typeof input==='number'||Object.prototype.toString.call(input)==='[object Number]';}function isDate(input){return input instanceof Date||Object.prototype.toString.call(input)==='[object Date]';}function map(arr,fn){var res=[],i;for(i=0;i<arr.length;++i){res.push(fn(arr[i],i));}return res;}function extend(a,b){for(var i in b){if(hasOwnProp(b,i)){a[i]=b[i];}}if(hasOwnProp(b,'toString')){a.toString=b.toString;}if(hasOwnProp(b,'valueOf')){a.valueOf=b.valueOf;}return a;}function createUTC(input,format,locale,strict){return createLocalOrUTC(input,format,locale,strict,true).utc();}function defaultParsingFlags(){// We need to deep clone this object.\nreturn{empty:false,unusedTokens:[],unusedInput:[],overflow:-2,charsLeftOver:0,nullInput:false,invalidEra:null,invalidMonth:null,invalidFormat:false,userInvalidated:false,iso:false,parsedDateParts:[],era:null,meridiem:null,rfc2822:false,weekdayMismatch:false};}function getParsingFlags(m){if(m._pf==null){m._pf=defaultParsingFlags();}return m._pf;}var some;if(Array.prototype.some){some=Array.prototype.some;}else{some=function some(fun){var t=Object(this),len=t.length>>>0,i;for(i=0;i<len;i++){if(i in t&&fun.call(this,t[i],i,t)){return true;}}return false;};}function isValid(m){if(m._isValid==null){var flags=getParsingFlags(m),parsedParts=some.call(flags.parsedDateParts,function(i){return i!=null;}),isNowValid=!isNaN(m._d.getTime())&&flags.overflow<0&&!flags.empty&&!flags.invalidEra&&!flags.invalidMonth&&!flags.invalidWeekday&&!flags.weekdayMismatch&&!flags.nullInput&&!flags.invalidFormat&&!flags.userInvalidated&&(!flags.meridiem||flags.meridiem&&parsedParts);if(m._strict){isNowValid=isNowValid&&flags.charsLeftOver===0&&flags.unusedTokens.length===0&&flags.bigHour===undefined;}if(Object.isFrozen==null||!Object.isFrozen(m)){m._isValid=isNowValid;}else{return isNowValid;}}return m._isValid;}function createInvalid(flags){var m=createUTC(NaN);if(flags!=null){extend(getParsingFlags(m),flags);}else{getParsingFlags(m).userInvalidated=true;}return m;}// Plugins that add properties should also add the key here (null value),\n// so we can properly clone ourselves.\nvar momentProperties=hooks.momentProperties=[],updateInProgress=false;function copyConfig(to,from){var i,prop,val;if(!isUndefined(from._isAMomentObject)){to._isAMomentObject=from._isAMomentObject;}if(!isUndefined(from._i)){to._i=from._i;}if(!isUndefined(from._f)){to._f=from._f;}if(!isUndefined(from._l)){to._l=from._l;}if(!isUndefined(from._strict)){to._strict=from._strict;}if(!isUndefined(from._tzm)){to._tzm=from._tzm;}if(!isUndefined(from._isUTC)){to._isUTC=from._isUTC;}if(!isUndefined(from._offset)){to._offset=from._offset;}if(!isUndefined(from._pf)){to._pf=getParsingFlags(from);}if(!isUndefined(from._locale)){to._locale=from._locale;}if(momentProperties.length>0){for(i=0;i<momentProperties.length;i++){prop=momentProperties[i];val=from[prop];if(!isUndefined(val)){to[prop]=val;}}}return to;}// Moment prototype object\nfunction Moment(config){copyConfig(this,config);this._d=new Date(config._d!=null?config._d.getTime():NaN);if(!this.isValid()){this._d=new Date(NaN);}// Prevent infinite loop in case updateOffset creates new moment\n// objects.\nif(updateInProgress===false){updateInProgress=true;hooks.updateOffset(this);updateInProgress=false;}}function isMoment(obj){return obj instanceof Moment||obj!=null&&obj._isAMomentObject!=null;}function warn(msg){if(hooks.suppressDeprecationWarnings===false&&typeof console!=='undefined'&&console.warn){console.warn('Deprecation warning: '+msg);}}function deprecate(msg,fn){var firstTime=true;return extend(function(){if(hooks.deprecationHandler!=null){hooks.deprecationHandler(null,msg);}if(firstTime){var args=[],arg,i,key;for(i=0;i<arguments.length;i++){arg='';if(_typeof2(arguments[i])==='object'){arg+='\\n['+i+'] ';for(key in arguments[0]){if(hasOwnProp(arguments[0],key)){arg+=key+': '+arguments[0][key]+', ';}}arg=arg.slice(0,-2);// Remove trailing comma and space\n}else{arg=arguments[i];}args.push(arg);}warn(msg+'\\nArguments: '+Array.prototype.slice.call(args).join('')+'\\n'+new Error().stack);firstTime=false;}return fn.apply(this,arguments);},fn);}var deprecations={};function deprecateSimple(name,msg){if(hooks.deprecationHandler!=null){hooks.deprecationHandler(name,msg);}if(!deprecations[name]){warn(msg);deprecations[name]=true;}}hooks.suppressDeprecationWarnings=false;hooks.deprecationHandler=null;function isFunction(input){return typeof Function!=='undefined'&&input instanceof Function||Object.prototype.toString.call(input)==='[object Function]';}function set(config){var prop,i;for(i in config){if(hasOwnProp(config,i)){prop=config[i];if(isFunction(prop)){this[i]=prop;}else{this['_'+i]=prop;}}}this._config=config;// Lenient ordinal parsing accepts just a number in addition to\n// number + (possibly) stuff coming from _dayOfMonthOrdinalParse.\n// TODO: Remove \"ordinalParse\" fallback in next major release.\nthis._dayOfMonthOrdinalParseLenient=new RegExp((this._dayOfMonthOrdinalParse.source||this._ordinalParse.source)+'|'+/\\d{1,2}/.source);}function mergeConfigs(parentConfig,childConfig){var res=extend({},parentConfig),prop;for(prop in childConfig){if(hasOwnProp(childConfig,prop)){if(isObject(parentConfig[prop])&&isObject(childConfig[prop])){res[prop]={};extend(res[prop],parentConfig[prop]);extend(res[prop],childConfig[prop]);}else if(childConfig[prop]!=null){res[prop]=childConfig[prop];}else{delete res[prop];}}}for(prop in parentConfig){if(hasOwnProp(parentConfig,prop)&&!hasOwnProp(childConfig,prop)&&isObject(parentConfig[prop])){// make sure changes to properties don't modify parent config\nres[prop]=extend({},res[prop]);}}return res;}function Locale(config){if(config!=null){this.set(config);}}var keys;if(Object.keys){keys=Object.keys;}else{keys=function keys(obj){var i,res=[];for(i in obj){if(hasOwnProp(obj,i)){res.push(i);}}return res;};}var defaultCalendar={sameDay:'[Today at] LT',nextDay:'[Tomorrow at] LT',nextWeek:'dddd [at] LT',lastDay:'[Yesterday at] LT',lastWeek:'[Last] dddd [at] LT',sameElse:'L'};function calendar(key,mom,now){var output=this._calendar[key]||this._calendar['sameElse'];return isFunction(output)?output.call(mom,now):output;}function zeroFill(number,targetLength,forceSign){var absNumber=''+Math.abs(number),zerosToFill=targetLength-absNumber.length,sign=number>=0;return(sign?forceSign?'+':'':'-')+Math.pow(10,Math.max(0,zerosToFill)).toString().substr(1)+absNumber;}var formattingTokens=/(\\[[^\\[]*\\])|(\\\\)?([Hh]mm(ss)?|Mo|MM?M?M?|Do|DDDo|DD?D?D?|ddd?d?|do?|w[o|w]?|W[o|W]?|Qo?|N{1,5}|YYYYYY|YYYYY|YYYY|YY|y{2,4}|yo?|gg(ggg?)?|GG(GGG?)?|e|E|a|A|hh?|HH?|kk?|mm?|ss?|S{1,9}|x|X|zz?|ZZ?|.)/g,localFormattingTokens=/(\\[[^\\[]*\\])|(\\\\)?(LTS|LT|LL?L?L?|l{1,4})/g,formatFunctions={},formatTokenFunctions={};// token:    'M'\n// padded:   ['MM', 2]\n// ordinal:  'Mo'\n// callback: function () { this.month() + 1 }\nfunction addFormatToken(token,padded,ordinal,callback){var func=callback;if(typeof callback==='string'){func=function func(){return this[callback]();};}if(token){formatTokenFunctions[token]=func;}if(padded){formatTokenFunctions[padded[0]]=function(){return zeroFill(func.apply(this,arguments),padded[1],padded[2]);};}if(ordinal){formatTokenFunctions[ordinal]=function(){return this.localeData().ordinal(func.apply(this,arguments),token);};}}function removeFormattingTokens(input){if(input.match(/\\[[\\s\\S]/)){return input.replace(/^\\[|\\]$/g,'');}return input.replace(/\\\\/g,'');}function makeFormatFunction(format){var array=format.match(formattingTokens),i,length;for(i=0,length=array.length;i<length;i++){if(formatTokenFunctions[array[i]]){array[i]=formatTokenFunctions[array[i]];}else{array[i]=removeFormattingTokens(array[i]);}}return function(mom){var output='',i;for(i=0;i<length;i++){output+=isFunction(array[i])?array[i].call(mom,format):array[i];}return output;};}// format date using native date object\nfunction formatMoment(m,format){if(!m.isValid()){return m.localeData().invalidDate();}format=expandFormat(format,m.localeData());formatFunctions[format]=formatFunctions[format]||makeFormatFunction(format);return formatFunctions[format](m);}function expandFormat(format,locale){var i=5;function replaceLongDateFormatTokens(input){return locale.longDateFormat(input)||input;}localFormattingTokens.lastIndex=0;while(i>=0&&localFormattingTokens.test(format)){format=format.replace(localFormattingTokens,replaceLongDateFormatTokens);localFormattingTokens.lastIndex=0;i-=1;}return format;}var defaultLongDateFormat={LTS:'h:mm:ss A',LT:'h:mm A',L:'MM/DD/YYYY',LL:'MMMM D, YYYY',LLL:'MMMM D, YYYY h:mm A',LLLL:'dddd, MMMM D, YYYY h:mm A'};function longDateFormat(key){var format=this._longDateFormat[key],formatUpper=this._longDateFormat[key.toUpperCase()];if(format||!formatUpper){return format;}this._longDateFormat[key]=formatUpper.match(formattingTokens).map(function(tok){if(tok==='MMMM'||tok==='MM'||tok==='DD'||tok==='dddd'){return tok.slice(1);}return tok;}).join('');return this._longDateFormat[key];}var defaultInvalidDate='Invalid date';function invalidDate(){return this._invalidDate;}var defaultOrdinal='%d',defaultDayOfMonthOrdinalParse=/\\d{1,2}/;function ordinal(number){return this._ordinal.replace('%d',number);}var defaultRelativeTime={future:'in %s',past:'%s ago',s:'a few seconds',ss:'%d seconds',m:'a minute',mm:'%d minutes',h:'an hour',hh:'%d hours',d:'a day',dd:'%d days',w:'a week',ww:'%d weeks',M:'a month',MM:'%d months',y:'a year',yy:'%d years'};function relativeTime(number,withoutSuffix,string,isFuture){var output=this._relativeTime[string];return isFunction(output)?output(number,withoutSuffix,string,isFuture):output.replace(/%d/i,number);}function pastFuture(diff,output){var format=this._relativeTime[diff>0?'future':'past'];return isFunction(format)?format(output):format.replace(/%s/i,output);}var aliases={};function addUnitAlias(unit,shorthand){var lowerCase=unit.toLowerCase();aliases[lowerCase]=aliases[lowerCase+'s']=aliases[shorthand]=unit;}function normalizeUnits(units){return typeof units==='string'?aliases[units]||aliases[units.toLowerCase()]:undefined;}function normalizeObjectUnits(inputObject){var normalizedInput={},normalizedProp,prop;for(prop in inputObject){if(hasOwnProp(inputObject,prop)){normalizedProp=normalizeUnits(prop);if(normalizedProp){normalizedInput[normalizedProp]=inputObject[prop];}}}return normalizedInput;}var priorities={};function addUnitPriority(unit,priority){priorities[unit]=priority;}function getPrioritizedUnits(unitsObj){var units=[],u;for(u in unitsObj){if(hasOwnProp(unitsObj,u)){units.push({unit:u,priority:priorities[u]});}}units.sort(function(a,b){return a.priority-b.priority;});return units;}function isLeapYear(year){return year%4===0&&year%100!==0||year%400===0;}function absFloor(number){if(number<0){// -0 -> 0\nreturn Math.ceil(number)||0;}else{return Math.floor(number);}}function toInt(argumentForCoercion){var coercedNumber=+argumentForCoercion,value=0;if(coercedNumber!==0&&isFinite(coercedNumber)){value=absFloor(coercedNumber);}return value;}function makeGetSet(unit,keepTime){return function(value){if(value!=null){set$1(this,unit,value);hooks.updateOffset(this,keepTime);return this;}else{return get(this,unit);}};}function get(mom,unit){return mom.isValid()?mom._d['get'+(mom._isUTC?'UTC':'')+unit]():NaN;}function set$1(mom,unit,value){if(mom.isValid()&&!isNaN(value)){if(unit==='FullYear'&&isLeapYear(mom.year())&&mom.month()===1&&mom.date()===29){value=toInt(value);mom._d['set'+(mom._isUTC?'UTC':'')+unit](value,mom.month(),daysInMonth(value,mom.month()));}else{mom._d['set'+(mom._isUTC?'UTC':'')+unit](value);}}}// MOMENTS\nfunction stringGet(units){units=normalizeUnits(units);if(isFunction(this[units])){return this[units]();}return this;}function stringSet(units,value){if(_typeof2(units)==='object'){units=normalizeObjectUnits(units);var prioritized=getPrioritizedUnits(units),i;for(i=0;i<prioritized.length;i++){this[prioritized[i].unit](units[prioritized[i].unit]);}}else{units=normalizeUnits(units);if(isFunction(this[units])){return this[units](value);}}return this;}var match1=/\\d/,//       0 - 9\nmatch2=/\\d\\d/,//      00 - 99\nmatch3=/\\d{3}/,//     000 - 999\nmatch4=/\\d{4}/,//    0000 - 9999\nmatch6=/[+-]?\\d{6}/,// -999999 - 999999\nmatch1to2=/\\d\\d?/,//       0 - 99\nmatch3to4=/\\d\\d\\d\\d?/,//     999 - 9999\nmatch5to6=/\\d\\d\\d\\d\\d\\d?/,//   99999 - 999999\nmatch1to3=/\\d{1,3}/,//       0 - 999\nmatch1to4=/\\d{1,4}/,//       0 - 9999\nmatch1to6=/[+-]?\\d{1,6}/,// -999999 - 999999\nmatchUnsigned=/\\d+/,//       0 - inf\nmatchSigned=/[+-]?\\d+/,//    -inf - inf\nmatchOffset=/Z|[+-]\\d\\d:?\\d\\d/gi,// +00:00 -00:00 +0000 -0000 or Z\nmatchShortOffset=/Z|[+-]\\d\\d(?::?\\d\\d)?/gi,// +00 -00 +00:00 -00:00 +0000 -0000 or Z\nmatchTimestamp=/[+-]?\\d+(\\.\\d{1,3})?/,// 123456789 123456789.123\n// any word (or two) characters or numbers including two/three word month in arabic.\n// includes scottish gaelic two word and hyphenated months\nmatchWord=/[0-9]{0,256}['a-z\\u00A0-\\u05FF\\u0700-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFF07\\uFF10-\\uFFEF]{1,256}|[\\u0600-\\u06FF\\/]{1,256}(\\s*?[\\u0600-\\u06FF]{1,256}){1,2}/i,regexes;regexes={};function addRegexToken(token,regex,strictRegex){regexes[token]=isFunction(regex)?regex:function(isStrict,localeData){return isStrict&&strictRegex?strictRegex:regex;};}function getParseRegexForToken(token,config){if(!hasOwnProp(regexes,token)){return new RegExp(unescapeFormat(token));}return regexes[token](config._strict,config._locale);}// Code from http://stackoverflow.com/questions/3561493/is-there-a-regexp-escape-function-in-javascript\nfunction unescapeFormat(s){return regexEscape(s.replace('\\\\','').replace(/\\\\(\\[)|\\\\(\\])|\\[([^\\]\\[]*)\\]|\\\\(.)/g,function(matched,p1,p2,p3,p4){return p1||p2||p3||p4;}));}function regexEscape(s){return s.replace(/[-\\/\\\\^$*+?.()|[\\]{}]/g,'\\\\$&');}var tokens={};function addParseToken(token,callback){var i,func=callback;if(typeof token==='string'){token=[token];}if(isNumber(callback)){func=function func(input,array){array[callback]=toInt(input);};}for(i=0;i<token.length;i++){tokens[token[i]]=func;}}function addWeekParseToken(token,callback){addParseToken(token,function(input,array,config,token){config._w=config._w||{};callback(input,config._w,config,token);});}function addTimeToArrayFromToken(token,input,config){if(input!=null&&hasOwnProp(tokens,token)){tokens[token](input,config._a,config,token);}}var YEAR=0,MONTH=1,DATE=2,HOUR=3,MINUTE=4,SECOND=5,MILLISECOND=6,WEEK=7,WEEKDAY=8;function mod(n,x){return(n%x+x)%x;}var indexOf;if(Array.prototype.indexOf){indexOf=Array.prototype.indexOf;}else{indexOf=function indexOf(o){// I know\nvar i;for(i=0;i<this.length;++i){if(this[i]===o){return i;}}return-1;};}function daysInMonth(year,month){if(isNaN(year)||isNaN(month)){return NaN;}var modMonth=mod(month,12);year+=(month-modMonth)/12;return modMonth===1?isLeapYear(year)?29:28:31-modMonth%7%2;}// FORMATTING\naddFormatToken('M',['MM',2],'Mo',function(){return this.month()+1;});addFormatToken('MMM',0,0,function(format){return this.localeData().monthsShort(this,format);});addFormatToken('MMMM',0,0,function(format){return this.localeData().months(this,format);});// ALIASES\naddUnitAlias('month','M');// PRIORITY\naddUnitPriority('month',8);// PARSING\naddRegexToken('M',match1to2);addRegexToken('MM',match1to2,match2);addRegexToken('MMM',function(isStrict,locale){return locale.monthsShortRegex(isStrict);});addRegexToken('MMMM',function(isStrict,locale){return locale.monthsRegex(isStrict);});addParseToken(['M','MM'],function(input,array){array[MONTH]=toInt(input)-1;});addParseToken(['MMM','MMMM'],function(input,array,config,token){var month=config._locale.monthsParse(input,token,config._strict);// if we didn't find a month name, mark the date as invalid.\nif(month!=null){array[MONTH]=month;}else{getParsingFlags(config).invalidMonth=input;}});// LOCALES\nvar defaultLocaleMonths='January_February_March_April_May_June_July_August_September_October_November_December'.split('_'),defaultLocaleMonthsShort='Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec'.split('_'),MONTHS_IN_FORMAT=/D[oD]?(\\[[^\\[\\]]*\\]|\\s)+MMMM?/,defaultMonthsShortRegex=matchWord,defaultMonthsRegex=matchWord;function localeMonths(m,format){if(!m){return isArray(this._months)?this._months:this._months['standalone'];}return isArray(this._months)?this._months[m.month()]:this._months[(this._months.isFormat||MONTHS_IN_FORMAT).test(format)?'format':'standalone'][m.month()];}function localeMonthsShort(m,format){if(!m){return isArray(this._monthsShort)?this._monthsShort:this._monthsShort['standalone'];}return isArray(this._monthsShort)?this._monthsShort[m.month()]:this._monthsShort[MONTHS_IN_FORMAT.test(format)?'format':'standalone'][m.month()];}function handleStrictParse(monthName,format,strict){var i,ii,mom,llc=monthName.toLocaleLowerCase();if(!this._monthsParse){// this is not used\nthis._monthsParse=[];this._longMonthsParse=[];this._shortMonthsParse=[];for(i=0;i<12;++i){mom=createUTC([2000,i]);this._shortMonthsParse[i]=this.monthsShort(mom,'').toLocaleLowerCase();this._longMonthsParse[i]=this.months(mom,'').toLocaleLowerCase();}}if(strict){if(format==='MMM'){ii=indexOf.call(this._shortMonthsParse,llc);return ii!==-1?ii:null;}else{ii=indexOf.call(this._longMonthsParse,llc);return ii!==-1?ii:null;}}else{if(format==='MMM'){ii=indexOf.call(this._shortMonthsParse,llc);if(ii!==-1){return ii;}ii=indexOf.call(this._longMonthsParse,llc);return ii!==-1?ii:null;}else{ii=indexOf.call(this._longMonthsParse,llc);if(ii!==-1){return ii;}ii=indexOf.call(this._shortMonthsParse,llc);return ii!==-1?ii:null;}}}function localeMonthsParse(monthName,format,strict){var i,mom,regex;if(this._monthsParseExact){return handleStrictParse.call(this,monthName,format,strict);}if(!this._monthsParse){this._monthsParse=[];this._longMonthsParse=[];this._shortMonthsParse=[];}// TODO: add sorting\n// Sorting makes sure if one month (or abbr) is a prefix of another\n// see sorting in computeMonthsParse\nfor(i=0;i<12;i++){// make the regex if we don't have it already\nmom=createUTC([2000,i]);if(strict&&!this._longMonthsParse[i]){this._longMonthsParse[i]=new RegExp('^'+this.months(mom,'').replace('.','')+'$','i');this._shortMonthsParse[i]=new RegExp('^'+this.monthsShort(mom,'').replace('.','')+'$','i');}if(!strict&&!this._monthsParse[i]){regex='^'+this.months(mom,'')+'|^'+this.monthsShort(mom,'');this._monthsParse[i]=new RegExp(regex.replace('.',''),'i');}// test the regex\nif(strict&&format==='MMMM'&&this._longMonthsParse[i].test(monthName)){return i;}else if(strict&&format==='MMM'&&this._shortMonthsParse[i].test(monthName)){return i;}else if(!strict&&this._monthsParse[i].test(monthName)){return i;}}}// MOMENTS\nfunction setMonth(mom,value){var dayOfMonth;if(!mom.isValid()){// No op\nreturn mom;}if(typeof value==='string'){if(/^\\d+$/.test(value)){value=toInt(value);}else{value=mom.localeData().monthsParse(value);// TODO: Another silent failure?\nif(!isNumber(value)){return mom;}}}dayOfMonth=Math.min(mom.date(),daysInMonth(mom.year(),value));mom._d['set'+(mom._isUTC?'UTC':'')+'Month'](value,dayOfMonth);return mom;}function getSetMonth(value){if(value!=null){setMonth(this,value);hooks.updateOffset(this,true);return this;}else{return get(this,'Month');}}function getDaysInMonth(){return daysInMonth(this.year(),this.month());}function monthsShortRegex(isStrict){if(this._monthsParseExact){if(!hasOwnProp(this,'_monthsRegex')){computeMonthsParse.call(this);}if(isStrict){return this._monthsShortStrictRegex;}else{return this._monthsShortRegex;}}else{if(!hasOwnProp(this,'_monthsShortRegex')){this._monthsShortRegex=defaultMonthsShortRegex;}return this._monthsShortStrictRegex&&isStrict?this._monthsShortStrictRegex:this._monthsShortRegex;}}function monthsRegex(isStrict){if(this._monthsParseExact){if(!hasOwnProp(this,'_monthsRegex')){computeMonthsParse.call(this);}if(isStrict){return this._monthsStrictRegex;}else{return this._monthsRegex;}}else{if(!hasOwnProp(this,'_monthsRegex')){this._monthsRegex=defaultMonthsRegex;}return this._monthsStrictRegex&&isStrict?this._monthsStrictRegex:this._monthsRegex;}}function computeMonthsParse(){function cmpLenRev(a,b){return b.length-a.length;}var shortPieces=[],longPieces=[],mixedPieces=[],i,mom;for(i=0;i<12;i++){// make the regex if we don't have it already\nmom=createUTC([2000,i]);shortPieces.push(this.monthsShort(mom,''));longPieces.push(this.months(mom,''));mixedPieces.push(this.months(mom,''));mixedPieces.push(this.monthsShort(mom,''));}// Sorting makes sure if one month (or abbr) is a prefix of another it\n// will match the longer piece.\nshortPieces.sort(cmpLenRev);longPieces.sort(cmpLenRev);mixedPieces.sort(cmpLenRev);for(i=0;i<12;i++){shortPieces[i]=regexEscape(shortPieces[i]);longPieces[i]=regexEscape(longPieces[i]);}for(i=0;i<24;i++){mixedPieces[i]=regexEscape(mixedPieces[i]);}this._monthsRegex=new RegExp('^('+mixedPieces.join('|')+')','i');this._monthsShortRegex=this._monthsRegex;this._monthsStrictRegex=new RegExp('^('+longPieces.join('|')+')','i');this._monthsShortStrictRegex=new RegExp('^('+shortPieces.join('|')+')','i');}// FORMATTING\naddFormatToken('Y',0,0,function(){var y=this.year();return y<=9999?zeroFill(y,4):'+'+y;});addFormatToken(0,['YY',2],0,function(){return this.year()%100;});addFormatToken(0,['YYYY',4],0,'year');addFormatToken(0,['YYYYY',5],0,'year');addFormatToken(0,['YYYYYY',6,true],0,'year');// ALIASES\naddUnitAlias('year','y');// PRIORITIES\naddUnitPriority('year',1);// PARSING\naddRegexToken('Y',matchSigned);addRegexToken('YY',match1to2,match2);addRegexToken('YYYY',match1to4,match4);addRegexToken('YYYYY',match1to6,match6);addRegexToken('YYYYYY',match1to6,match6);addParseToken(['YYYYY','YYYYYY'],YEAR);addParseToken('YYYY',function(input,array){array[YEAR]=input.length===2?hooks.parseTwoDigitYear(input):toInt(input);});addParseToken('YY',function(input,array){array[YEAR]=hooks.parseTwoDigitYear(input);});addParseToken('Y',function(input,array){array[YEAR]=parseInt(input,10);});// HELPERS\nfunction daysInYear(year){return isLeapYear(year)?366:365;}// HOOKS\nhooks.parseTwoDigitYear=function(input){return toInt(input)+(toInt(input)>68?1900:2000);};// MOMENTS\nvar getSetYear=makeGetSet('FullYear',true);function getIsLeapYear(){return isLeapYear(this.year());}function createDate(y,m,d,h,M,s,ms){// can't just apply() to create a date:\n// https://stackoverflow.com/q/181348\nvar date;// the date constructor remaps years 0-99 to 1900-1999\nif(y<100&&y>=0){// preserve leap years using a full 400 year cycle, then reset\ndate=new Date(y+400,m,d,h,M,s,ms);if(isFinite(date.getFullYear())){date.setFullYear(y);}}else{date=new Date(y,m,d,h,M,s,ms);}return date;}function createUTCDate(y){var date,args;// the Date.UTC function remaps years 0-99 to 1900-1999\nif(y<100&&y>=0){args=Array.prototype.slice.call(arguments);// preserve leap years using a full 400 year cycle, then reset\nargs[0]=y+400;date=new Date(Date.UTC.apply(null,args));if(isFinite(date.getUTCFullYear())){date.setUTCFullYear(y);}}else{date=new Date(Date.UTC.apply(null,arguments));}return date;}// start-of-first-week - start-of-year\nfunction firstWeekOffset(year,dow,doy){var// first-week day -- which january is always in the first week (4 for iso, 1 for other)\nfwd=7+dow-doy,// first-week day local weekday -- which local weekday is fwd\nfwdlw=(7+createUTCDate(year,0,fwd).getUTCDay()-dow)%7;return-fwdlw+fwd-1;}// https://en.wikipedia.org/wiki/ISO_week_date#Calculating_a_date_given_the_year.2C_week_number_and_weekday\nfunction dayOfYearFromWeeks(year,week,weekday,dow,doy){var localWeekday=(7+weekday-dow)%7,weekOffset=firstWeekOffset(year,dow,doy),dayOfYear=1+7*(week-1)+localWeekday+weekOffset,resYear,resDayOfYear;if(dayOfYear<=0){resYear=year-1;resDayOfYear=daysInYear(resYear)+dayOfYear;}else if(dayOfYear>daysInYear(year)){resYear=year+1;resDayOfYear=dayOfYear-daysInYear(year);}else{resYear=year;resDayOfYear=dayOfYear;}return{year:resYear,dayOfYear:resDayOfYear};}function weekOfYear(mom,dow,doy){var weekOffset=firstWeekOffset(mom.year(),dow,doy),week=Math.floor((mom.dayOfYear()-weekOffset-1)/7)+1,resWeek,resYear;if(week<1){resYear=mom.year()-1;resWeek=week+weeksInYear(resYear,dow,doy);}else if(week>weeksInYear(mom.year(),dow,doy)){resWeek=week-weeksInYear(mom.year(),dow,doy);resYear=mom.year()+1;}else{resYear=mom.year();resWeek=week;}return{week:resWeek,year:resYear};}function weeksInYear(year,dow,doy){var weekOffset=firstWeekOffset(year,dow,doy),weekOffsetNext=firstWeekOffset(year+1,dow,doy);return(daysInYear(year)-weekOffset+weekOffsetNext)/7;}// FORMATTING\naddFormatToken('w',['ww',2],'wo','week');addFormatToken('W',['WW',2],'Wo','isoWeek');// ALIASES\naddUnitAlias('week','w');addUnitAlias('isoWeek','W');// PRIORITIES\naddUnitPriority('week',5);addUnitPriority('isoWeek',5);// PARSING\naddRegexToken('w',match1to2);addRegexToken('ww',match1to2,match2);addRegexToken('W',match1to2);addRegexToken('WW',match1to2,match2);addWeekParseToken(['w','ww','W','WW'],function(input,week,config,token){week[token.substr(0,1)]=toInt(input);});// HELPERS\n// LOCALES\nfunction localeWeek(mom){return weekOfYear(mom,this._week.dow,this._week.doy).week;}var defaultLocaleWeek={dow:0,// Sunday is the first day of the week.\ndoy:6// The week that contains Jan 6th is the first week of the year.\n};function localeFirstDayOfWeek(){return this._week.dow;}function localeFirstDayOfYear(){return this._week.doy;}// MOMENTS\nfunction getSetWeek(input){var week=this.localeData().week(this);return input==null?week:this.add((input-week)*7,'d');}function getSetISOWeek(input){var week=weekOfYear(this,1,4).week;return input==null?week:this.add((input-week)*7,'d');}// FORMATTING\naddFormatToken('d',0,'do','day');addFormatToken('dd',0,0,function(format){return this.localeData().weekdaysMin(this,format);});addFormatToken('ddd',0,0,function(format){return this.localeData().weekdaysShort(this,format);});addFormatToken('dddd',0,0,function(format){return this.localeData().weekdays(this,format);});addFormatToken('e',0,0,'weekday');addFormatToken('E',0,0,'isoWeekday');// ALIASES\naddUnitAlias('day','d');addUnitAlias('weekday','e');addUnitAlias('isoWeekday','E');// PRIORITY\naddUnitPriority('day',11);addUnitPriority('weekday',11);addUnitPriority('isoWeekday',11);// PARSING\naddRegexToken('d',match1to2);addRegexToken('e',match1to2);addRegexToken('E',match1to2);addRegexToken('dd',function(isStrict,locale){return locale.weekdaysMinRegex(isStrict);});addRegexToken('ddd',function(isStrict,locale){return locale.weekdaysShortRegex(isStrict);});addRegexToken('dddd',function(isStrict,locale){return locale.weekdaysRegex(isStrict);});addWeekParseToken(['dd','ddd','dddd'],function(input,week,config,token){var weekday=config._locale.weekdaysParse(input,token,config._strict);// if we didn't get a weekday name, mark the date as invalid\nif(weekday!=null){week.d=weekday;}else{getParsingFlags(config).invalidWeekday=input;}});addWeekParseToken(['d','e','E'],function(input,week,config,token){week[token]=toInt(input);});// HELPERS\nfunction parseWeekday(input,locale){if(typeof input!=='string'){return input;}if(!isNaN(input)){return parseInt(input,10);}input=locale.weekdaysParse(input);if(typeof input==='number'){return input;}return null;}function parseIsoWeekday(input,locale){if(typeof input==='string'){return locale.weekdaysParse(input)%7||7;}return isNaN(input)?null:input;}// LOCALES\nfunction shiftWeekdays(ws,n){return ws.slice(n,7).concat(ws.slice(0,n));}var defaultLocaleWeekdays='Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday'.split('_'),defaultLocaleWeekdaysShort='Sun_Mon_Tue_Wed_Thu_Fri_Sat'.split('_'),defaultLocaleWeekdaysMin='Su_Mo_Tu_We_Th_Fr_Sa'.split('_'),defaultWeekdaysRegex=matchWord,defaultWeekdaysShortRegex=matchWord,defaultWeekdaysMinRegex=matchWord;function localeWeekdays(m,format){var weekdays=isArray(this._weekdays)?this._weekdays:this._weekdays[m&&m!==true&&this._weekdays.isFormat.test(format)?'format':'standalone'];return m===true?shiftWeekdays(weekdays,this._week.dow):m?weekdays[m.day()]:weekdays;}function localeWeekdaysShort(m){return m===true?shiftWeekdays(this._weekdaysShort,this._week.dow):m?this._weekdaysShort[m.day()]:this._weekdaysShort;}function localeWeekdaysMin(m){return m===true?shiftWeekdays(this._weekdaysMin,this._week.dow):m?this._weekdaysMin[m.day()]:this._weekdaysMin;}function handleStrictParse$1(weekdayName,format,strict){var i,ii,mom,llc=weekdayName.toLocaleLowerCase();if(!this._weekdaysParse){this._weekdaysParse=[];this._shortWeekdaysParse=[];this._minWeekdaysParse=[];for(i=0;i<7;++i){mom=createUTC([2000,1]).day(i);this._minWeekdaysParse[i]=this.weekdaysMin(mom,'').toLocaleLowerCase();this._shortWeekdaysParse[i]=this.weekdaysShort(mom,'').toLocaleLowerCase();this._weekdaysParse[i]=this.weekdays(mom,'').toLocaleLowerCase();}}if(strict){if(format==='dddd'){ii=indexOf.call(this._weekdaysParse,llc);return ii!==-1?ii:null;}else if(format==='ddd'){ii=indexOf.call(this._shortWeekdaysParse,llc);return ii!==-1?ii:null;}else{ii=indexOf.call(this._minWeekdaysParse,llc);return ii!==-1?ii:null;}}else{if(format==='dddd'){ii=indexOf.call(this._weekdaysParse,llc);if(ii!==-1){return ii;}ii=indexOf.call(this._shortWeekdaysParse,llc);if(ii!==-1){return ii;}ii=indexOf.call(this._minWeekdaysParse,llc);return ii!==-1?ii:null;}else if(format==='ddd'){ii=indexOf.call(this._shortWeekdaysParse,llc);if(ii!==-1){return ii;}ii=indexOf.call(this._weekdaysParse,llc);if(ii!==-1){return ii;}ii=indexOf.call(this._minWeekdaysParse,llc);return ii!==-1?ii:null;}else{ii=indexOf.call(this._minWeekdaysParse,llc);if(ii!==-1){return ii;}ii=indexOf.call(this._weekdaysParse,llc);if(ii!==-1){return ii;}ii=indexOf.call(this._shortWeekdaysParse,llc);return ii!==-1?ii:null;}}}function localeWeekdaysParse(weekdayName,format,strict){var i,mom,regex;if(this._weekdaysParseExact){return handleStrictParse$1.call(this,weekdayName,format,strict);}if(!this._weekdaysParse){this._weekdaysParse=[];this._minWeekdaysParse=[];this._shortWeekdaysParse=[];this._fullWeekdaysParse=[];}for(i=0;i<7;i++){// make the regex if we don't have it already\nmom=createUTC([2000,1]).day(i);if(strict&&!this._fullWeekdaysParse[i]){this._fullWeekdaysParse[i]=new RegExp('^'+this.weekdays(mom,'').replace('.','\\\\.?')+'$','i');this._shortWeekdaysParse[i]=new RegExp('^'+this.weekdaysShort(mom,'').replace('.','\\\\.?')+'$','i');this._minWeekdaysParse[i]=new RegExp('^'+this.weekdaysMin(mom,'').replace('.','\\\\.?')+'$','i');}if(!this._weekdaysParse[i]){regex='^'+this.weekdays(mom,'')+'|^'+this.weekdaysShort(mom,'')+'|^'+this.weekdaysMin(mom,'');this._weekdaysParse[i]=new RegExp(regex.replace('.',''),'i');}// test the regex\nif(strict&&format==='dddd'&&this._fullWeekdaysParse[i].test(weekdayName)){return i;}else if(strict&&format==='ddd'&&this._shortWeekdaysParse[i].test(weekdayName)){return i;}else if(strict&&format==='dd'&&this._minWeekdaysParse[i].test(weekdayName)){return i;}else if(!strict&&this._weekdaysParse[i].test(weekdayName)){return i;}}}// MOMENTS\nfunction getSetDayOfWeek(input){if(!this.isValid()){return input!=null?this:NaN;}var day=this._isUTC?this._d.getUTCDay():this._d.getDay();if(input!=null){input=parseWeekday(input,this.localeData());return this.add(input-day,'d');}else{return day;}}function getSetLocaleDayOfWeek(input){if(!this.isValid()){return input!=null?this:NaN;}var weekday=(this.day()+7-this.localeData()._week.dow)%7;return input==null?weekday:this.add(input-weekday,'d');}function getSetISODayOfWeek(input){if(!this.isValid()){return input!=null?this:NaN;}// behaves the same as moment#day except\n// as a getter, returns 7 instead of 0 (1-7 range instead of 0-6)\n// as a setter, sunday should belong to the previous week.\nif(input!=null){var weekday=parseIsoWeekday(input,this.localeData());return this.day(this.day()%7?weekday:weekday-7);}else{return this.day()||7;}}function weekdaysRegex(isStrict){if(this._weekdaysParseExact){if(!hasOwnProp(this,'_weekdaysRegex')){computeWeekdaysParse.call(this);}if(isStrict){return this._weekdaysStrictRegex;}else{return this._weekdaysRegex;}}else{if(!hasOwnProp(this,'_weekdaysRegex')){this._weekdaysRegex=defaultWeekdaysRegex;}return this._weekdaysStrictRegex&&isStrict?this._weekdaysStrictRegex:this._weekdaysRegex;}}function weekdaysShortRegex(isStrict){if(this._weekdaysParseExact){if(!hasOwnProp(this,'_weekdaysRegex')){computeWeekdaysParse.call(this);}if(isStrict){return this._weekdaysShortStrictRegex;}else{return this._weekdaysShortRegex;}}else{if(!hasOwnProp(this,'_weekdaysShortRegex')){this._weekdaysShortRegex=defaultWeekdaysShortRegex;}return this._weekdaysShortStrictRegex&&isStrict?this._weekdaysShortStrictRegex:this._weekdaysShortRegex;}}function weekdaysMinRegex(isStrict){if(this._weekdaysParseExact){if(!hasOwnProp(this,'_weekdaysRegex')){computeWeekdaysParse.call(this);}if(isStrict){return this._weekdaysMinStrictRegex;}else{return this._weekdaysMinRegex;}}else{if(!hasOwnProp(this,'_weekdaysMinRegex')){this._weekdaysMinRegex=defaultWeekdaysMinRegex;}return this._weekdaysMinStrictRegex&&isStrict?this._weekdaysMinStrictRegex:this._weekdaysMinRegex;}}function computeWeekdaysParse(){function cmpLenRev(a,b){return b.length-a.length;}var minPieces=[],shortPieces=[],longPieces=[],mixedPieces=[],i,mom,minp,shortp,longp;for(i=0;i<7;i++){// make the regex if we don't have it already\nmom=createUTC([2000,1]).day(i);minp=regexEscape(this.weekdaysMin(mom,''));shortp=regexEscape(this.weekdaysShort(mom,''));longp=regexEscape(this.weekdays(mom,''));minPieces.push(minp);shortPieces.push(shortp);longPieces.push(longp);mixedPieces.push(minp);mixedPieces.push(shortp);mixedPieces.push(longp);}// Sorting makes sure if one weekday (or abbr) is a prefix of another it\n// will match the longer piece.\nminPieces.sort(cmpLenRev);shortPieces.sort(cmpLenRev);longPieces.sort(cmpLenRev);mixedPieces.sort(cmpLenRev);this._weekdaysRegex=new RegExp('^('+mixedPieces.join('|')+')','i');this._weekdaysShortRegex=this._weekdaysRegex;this._weekdaysMinRegex=this._weekdaysRegex;this._weekdaysStrictRegex=new RegExp('^('+longPieces.join('|')+')','i');this._weekdaysShortStrictRegex=new RegExp('^('+shortPieces.join('|')+')','i');this._weekdaysMinStrictRegex=new RegExp('^('+minPieces.join('|')+')','i');}// FORMATTING\nfunction hFormat(){return this.hours()%12||12;}function kFormat(){return this.hours()||24;}addFormatToken('H',['HH',2],0,'hour');addFormatToken('h',['hh',2],0,hFormat);addFormatToken('k',['kk',2],0,kFormat);addFormatToken('hmm',0,0,function(){return''+hFormat.apply(this)+zeroFill(this.minutes(),2);});addFormatToken('hmmss',0,0,function(){return''+hFormat.apply(this)+zeroFill(this.minutes(),2)+zeroFill(this.seconds(),2);});addFormatToken('Hmm',0,0,function(){return''+this.hours()+zeroFill(this.minutes(),2);});addFormatToken('Hmmss',0,0,function(){return''+this.hours()+zeroFill(this.minutes(),2)+zeroFill(this.seconds(),2);});function meridiem(token,lowercase){addFormatToken(token,0,0,function(){return this.localeData().meridiem(this.hours(),this.minutes(),lowercase);});}meridiem('a',true);meridiem('A',false);// ALIASES\naddUnitAlias('hour','h');// PRIORITY\naddUnitPriority('hour',13);// PARSING\nfunction matchMeridiem(isStrict,locale){return locale._meridiemParse;}addRegexToken('a',matchMeridiem);addRegexToken('A',matchMeridiem);addRegexToken('H',match1to2);addRegexToken('h',match1to2);addRegexToken('k',match1to2);addRegexToken('HH',match1to2,match2);addRegexToken('hh',match1to2,match2);addRegexToken('kk',match1to2,match2);addRegexToken('hmm',match3to4);addRegexToken('hmmss',match5to6);addRegexToken('Hmm',match3to4);addRegexToken('Hmmss',match5to6);addParseToken(['H','HH'],HOUR);addParseToken(['k','kk'],function(input,array,config){var kInput=toInt(input);array[HOUR]=kInput===24?0:kInput;});addParseToken(['a','A'],function(input,array,config){config._isPm=config._locale.isPM(input);config._meridiem=input;});addParseToken(['h','hh'],function(input,array,config){array[HOUR]=toInt(input);getParsingFlags(config).bigHour=true;});addParseToken('hmm',function(input,array,config){var pos=input.length-2;array[HOUR]=toInt(input.substr(0,pos));array[MINUTE]=toInt(input.substr(pos));getParsingFlags(config).bigHour=true;});addParseToken('hmmss',function(input,array,config){var pos1=input.length-4,pos2=input.length-2;array[HOUR]=toInt(input.substr(0,pos1));array[MINUTE]=toInt(input.substr(pos1,2));array[SECOND]=toInt(input.substr(pos2));getParsingFlags(config).bigHour=true;});addParseToken('Hmm',function(input,array,config){var pos=input.length-2;array[HOUR]=toInt(input.substr(0,pos));array[MINUTE]=toInt(input.substr(pos));});addParseToken('Hmmss',function(input,array,config){var pos1=input.length-4,pos2=input.length-2;array[HOUR]=toInt(input.substr(0,pos1));array[MINUTE]=toInt(input.substr(pos1,2));array[SECOND]=toInt(input.substr(pos2));});// LOCALES\nfunction localeIsPM(input){// IE8 Quirks Mode & IE7 Standards Mode do not allow accessing strings like arrays\n// Using charAt should be more compatible.\nreturn(input+'').toLowerCase().charAt(0)==='p';}var defaultLocaleMeridiemParse=/[ap]\\.?m?\\.?/i,// Setting the hour should keep the time, because the user explicitly\n// specified which hour they want. So trying to maintain the same hour (in\n// a new timezone) makes sense. Adding/subtracting hours does not follow\n// this rule.\ngetSetHour=makeGetSet('Hours',true);function localeMeridiem(hours,minutes,isLower){if(hours>11){return isLower?'pm':'PM';}else{return isLower?'am':'AM';}}var baseConfig={calendar:defaultCalendar,longDateFormat:defaultLongDateFormat,invalidDate:defaultInvalidDate,ordinal:defaultOrdinal,dayOfMonthOrdinalParse:defaultDayOfMonthOrdinalParse,relativeTime:defaultRelativeTime,months:defaultLocaleMonths,monthsShort:defaultLocaleMonthsShort,week:defaultLocaleWeek,weekdays:defaultLocaleWeekdays,weekdaysMin:defaultLocaleWeekdaysMin,weekdaysShort:defaultLocaleWeekdaysShort,meridiemParse:defaultLocaleMeridiemParse};// internal storage for locale config files\nvar locales={},localeFamilies={},globalLocale;function commonPrefix(arr1,arr2){var i,minl=Math.min(arr1.length,arr2.length);for(i=0;i<minl;i+=1){if(arr1[i]!==arr2[i]){return i;}}return minl;}function normalizeLocale(key){return key?key.toLowerCase().replace('_','-'):key;}// pick the locale from the array\n// try ['en-au', 'en-gb'] as 'en-au', 'en-gb', 'en', as in move through the list trying each\n// substring from most specific to least, but move to the next array item if it's a more specific variant than the current root\nfunction chooseLocale(names){var i=0,j,next,locale,split;while(i<names.length){split=normalizeLocale(names[i]).split('-');j=split.length;next=normalizeLocale(names[i+1]);next=next?next.split('-'):null;while(j>0){locale=loadLocale(split.slice(0,j).join('-'));if(locale){return locale;}if(next&&next.length>=j&&commonPrefix(split,next)>=j-1){//the next array item is better than a shallower substring of this one\nbreak;}j--;}i++;}return globalLocale;}function loadLocale(name){var oldLocale=null,aliasedRequire;// TODO: Find a better way to register and load all the locales in Node\nif(locales[name]===undefined&&typeof module!=='undefined'&&module&&module.exports){try{oldLocale=globalLocale._abbr;aliasedRequire=require;__webpack_require__(\"4678\")(\"./\"+name);getSetGlobalLocale(oldLocale);}catch(e){// mark as not found to avoid repeating expensive file require call causing high CPU\n// when trying to find en-US, en_US, en-us for every format call\nlocales[name]=null;// null means not found\n}}return locales[name];}// This function will load locale and then set the global locale.  If\n// no arguments are passed in, it will simply return the current global\n// locale key.\nfunction getSetGlobalLocale(key,values){var data;if(key){if(isUndefined(values)){data=getLocale(key);}else{data=defineLocale(key,values);}if(data){// moment.duration._locale = moment._locale = data;\nglobalLocale=data;}else{if(typeof console!=='undefined'&&console.warn){//warn user if arguments are passed but the locale could not be set\nconsole.warn('Locale '+key+' not found. Did you forget to load it?');}}}return globalLocale._abbr;}function defineLocale(name,config){if(config!==null){var locale,parentConfig=baseConfig;config.abbr=name;if(locales[name]!=null){deprecateSimple('defineLocaleOverride','use moment.updateLocale(localeName, config) to change '+'an existing locale. moment.defineLocale(localeName, '+'config) should only be used for creating a new locale '+'See http://momentjs.com/guides/#/warnings/define-locale/ for more info.');parentConfig=locales[name]._config;}else if(config.parentLocale!=null){if(locales[config.parentLocale]!=null){parentConfig=locales[config.parentLocale]._config;}else{locale=loadLocale(config.parentLocale);if(locale!=null){parentConfig=locale._config;}else{if(!localeFamilies[config.parentLocale]){localeFamilies[config.parentLocale]=[];}localeFamilies[config.parentLocale].push({name:name,config:config});return null;}}}locales[name]=new Locale(mergeConfigs(parentConfig,config));if(localeFamilies[name]){localeFamilies[name].forEach(function(x){defineLocale(x.name,x.config);});}// backwards compat for now: also set the locale\n// make sure we set the locale AFTER all child locales have been\n// created, so we won't end up with the child locale set.\ngetSetGlobalLocale(name);return locales[name];}else{// useful for testing\ndelete locales[name];return null;}}function updateLocale(name,config){if(config!=null){var locale,tmpLocale,parentConfig=baseConfig;if(locales[name]!=null&&locales[name].parentLocale!=null){// Update existing child locale in-place to avoid memory-leaks\nlocales[name].set(mergeConfigs(locales[name]._config,config));}else{// MERGE\ntmpLocale=loadLocale(name);if(tmpLocale!=null){parentConfig=tmpLocale._config;}config=mergeConfigs(parentConfig,config);if(tmpLocale==null){// updateLocale is called for creating a new locale\n// Set abbr so it will have a name (getters return\n// undefined otherwise).\nconfig.abbr=name;}locale=new Locale(config);locale.parentLocale=locales[name];locales[name]=locale;}// backwards compat for now: also set the locale\ngetSetGlobalLocale(name);}else{// pass null for config to unupdate, useful for tests\nif(locales[name]!=null){if(locales[name].parentLocale!=null){locales[name]=locales[name].parentLocale;if(name===getSetGlobalLocale()){getSetGlobalLocale(name);}}else if(locales[name]!=null){delete locales[name];}}}return locales[name];}// returns locale data\nfunction getLocale(key){var locale;if(key&&key._locale&&key._locale._abbr){key=key._locale._abbr;}if(!key){return globalLocale;}if(!isArray(key)){//short-circuit everything else\nlocale=loadLocale(key);if(locale){return locale;}key=[key];}return chooseLocale(key);}function listLocales(){return keys(locales);}function checkOverflow(m){var overflow,a=m._a;if(a&&getParsingFlags(m).overflow===-2){overflow=a[MONTH]<0||a[MONTH]>11?MONTH:a[DATE]<1||a[DATE]>daysInMonth(a[YEAR],a[MONTH])?DATE:a[HOUR]<0||a[HOUR]>24||a[HOUR]===24&&(a[MINUTE]!==0||a[SECOND]!==0||a[MILLISECOND]!==0)?HOUR:a[MINUTE]<0||a[MINUTE]>59?MINUTE:a[SECOND]<0||a[SECOND]>59?SECOND:a[MILLISECOND]<0||a[MILLISECOND]>999?MILLISECOND:-1;if(getParsingFlags(m)._overflowDayOfYear&&(overflow<YEAR||overflow>DATE)){overflow=DATE;}if(getParsingFlags(m)._overflowWeeks&&overflow===-1){overflow=WEEK;}if(getParsingFlags(m)._overflowWeekday&&overflow===-1){overflow=WEEKDAY;}getParsingFlags(m).overflow=overflow;}return m;}// iso 8601 regex\n// 0000-00-00 0000-W00 or 0000-W00-0 + T + 00 or 00:00 or 00:00:00 or 00:00:00.000 + +00:00 or +0000 or +00)\nvar extendedIsoRegex=/^\\s*((?:[+-]\\d{6}|\\d{4})-(?:\\d\\d-\\d\\d|W\\d\\d-\\d|W\\d\\d|\\d\\d\\d|\\d\\d))(?:(T| )(\\d\\d(?::\\d\\d(?::\\d\\d(?:[.,]\\d+)?)?)?)([+-]\\d\\d(?::?\\d\\d)?|\\s*Z)?)?$/,basicIsoRegex=/^\\s*((?:[+-]\\d{6}|\\d{4})(?:\\d\\d\\d\\d|W\\d\\d\\d|W\\d\\d|\\d\\d\\d|\\d\\d|))(?:(T| )(\\d\\d(?:\\d\\d(?:\\d\\d(?:[.,]\\d+)?)?)?)([+-]\\d\\d(?::?\\d\\d)?|\\s*Z)?)?$/,tzRegex=/Z|[+-]\\d\\d(?::?\\d\\d)?/,isoDates=[['YYYYYY-MM-DD',/[+-]\\d{6}-\\d\\d-\\d\\d/],['YYYY-MM-DD',/\\d{4}-\\d\\d-\\d\\d/],['GGGG-[W]WW-E',/\\d{4}-W\\d\\d-\\d/],['GGGG-[W]WW',/\\d{4}-W\\d\\d/,false],['YYYY-DDD',/\\d{4}-\\d{3}/],['YYYY-MM',/\\d{4}-\\d\\d/,false],['YYYYYYMMDD',/[+-]\\d{10}/],['YYYYMMDD',/\\d{8}/],['GGGG[W]WWE',/\\d{4}W\\d{3}/],['GGGG[W]WW',/\\d{4}W\\d{2}/,false],['YYYYDDD',/\\d{7}/],['YYYYMM',/\\d{6}/,false],['YYYY',/\\d{4}/,false]],// iso time formats and regexes\nisoTimes=[['HH:mm:ss.SSSS',/\\d\\d:\\d\\d:\\d\\d\\.\\d+/],['HH:mm:ss,SSSS',/\\d\\d:\\d\\d:\\d\\d,\\d+/],['HH:mm:ss',/\\d\\d:\\d\\d:\\d\\d/],['HH:mm',/\\d\\d:\\d\\d/],['HHmmss.SSSS',/\\d\\d\\d\\d\\d\\d\\.\\d+/],['HHmmss,SSSS',/\\d\\d\\d\\d\\d\\d,\\d+/],['HHmmss',/\\d\\d\\d\\d\\d\\d/],['HHmm',/\\d\\d\\d\\d/],['HH',/\\d\\d/]],aspNetJsonRegex=/^\\/?Date\\((-?\\d+)/i,// RFC 2822 regex: For details see https://tools.ietf.org/html/rfc2822#section-3.3\nrfc2822=/^(?:(Mon|Tue|Wed|Thu|Fri|Sat|Sun),?\\s)?(\\d{1,2})\\s(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)\\s(\\d{2,4})\\s(\\d\\d):(\\d\\d)(?::(\\d\\d))?\\s(?:(UT|GMT|[ECMP][SD]T)|([Zz])|([+-]\\d{4}))$/,obsOffsets={UT:0,GMT:0,EDT:-4*60,EST:-5*60,CDT:-5*60,CST:-6*60,MDT:-6*60,MST:-7*60,PDT:-7*60,PST:-8*60};// date from iso format\nfunction configFromISO(config){var i,l,string=config._i,match=extendedIsoRegex.exec(string)||basicIsoRegex.exec(string),allowTime,dateFormat,timeFormat,tzFormat;if(match){getParsingFlags(config).iso=true;for(i=0,l=isoDates.length;i<l;i++){if(isoDates[i][1].exec(match[1])){dateFormat=isoDates[i][0];allowTime=isoDates[i][2]!==false;break;}}if(dateFormat==null){config._isValid=false;return;}if(match[3]){for(i=0,l=isoTimes.length;i<l;i++){if(isoTimes[i][1].exec(match[3])){// match[2] should be 'T' or space\ntimeFormat=(match[2]||' ')+isoTimes[i][0];break;}}if(timeFormat==null){config._isValid=false;return;}}if(!allowTime&&timeFormat!=null){config._isValid=false;return;}if(match[4]){if(tzRegex.exec(match[4])){tzFormat='Z';}else{config._isValid=false;return;}}config._f=dateFormat+(timeFormat||'')+(tzFormat||'');configFromStringAndFormat(config);}else{config._isValid=false;}}function extractFromRFC2822Strings(yearStr,monthStr,dayStr,hourStr,minuteStr,secondStr){var result=[untruncateYear(yearStr),defaultLocaleMonthsShort.indexOf(monthStr),parseInt(dayStr,10),parseInt(hourStr,10),parseInt(minuteStr,10)];if(secondStr){result.push(parseInt(secondStr,10));}return result;}function untruncateYear(yearStr){var year=parseInt(yearStr,10);if(year<=49){return 2000+year;}else if(year<=999){return 1900+year;}return year;}function preprocessRFC2822(s){// Remove comments and folding whitespace and replace multiple-spaces with a single space\nreturn s.replace(/\\([^)]*\\)|[\\n\\t]/g,' ').replace(/(\\s\\s+)/g,' ').replace(/^\\s\\s*/,'').replace(/\\s\\s*$/,'');}function checkWeekday(weekdayStr,parsedInput,config){if(weekdayStr){// TODO: Replace the vanilla JS Date object with an independent day-of-week check.\nvar weekdayProvided=defaultLocaleWeekdaysShort.indexOf(weekdayStr),weekdayActual=new Date(parsedInput[0],parsedInput[1],parsedInput[2]).getDay();if(weekdayProvided!==weekdayActual){getParsingFlags(config).weekdayMismatch=true;config._isValid=false;return false;}}return true;}function calculateOffset(obsOffset,militaryOffset,numOffset){if(obsOffset){return obsOffsets[obsOffset];}else if(militaryOffset){// the only allowed military tz is Z\nreturn 0;}else{var hm=parseInt(numOffset,10),m=hm%100,h=(hm-m)/100;return h*60+m;}}// date and time from ref 2822 format\nfunction configFromRFC2822(config){var match=rfc2822.exec(preprocessRFC2822(config._i)),parsedArray;if(match){parsedArray=extractFromRFC2822Strings(match[4],match[3],match[2],match[5],match[6],match[7]);if(!checkWeekday(match[1],parsedArray,config)){return;}config._a=parsedArray;config._tzm=calculateOffset(match[8],match[9],match[10]);config._d=createUTCDate.apply(null,config._a);config._d.setUTCMinutes(config._d.getUTCMinutes()-config._tzm);getParsingFlags(config).rfc2822=true;}else{config._isValid=false;}}// date from 1) ASP.NET, 2) ISO, 3) RFC 2822 formats, or 4) optional fallback if parsing isn't strict\nfunction configFromString(config){var matched=aspNetJsonRegex.exec(config._i);if(matched!==null){config._d=new Date(+matched[1]);return;}configFromISO(config);if(config._isValid===false){delete config._isValid;}else{return;}configFromRFC2822(config);if(config._isValid===false){delete config._isValid;}else{return;}if(config._strict){config._isValid=false;}else{// Final attempt, use Input Fallback\nhooks.createFromInputFallback(config);}}hooks.createFromInputFallback=deprecate('value provided is not in a recognized RFC2822 or ISO format. moment construction falls back to js Date(), '+'which is not reliable across all browsers and versions. Non RFC2822/ISO date formats are '+'discouraged and will be removed in an upcoming major release. Please refer to '+'http://momentjs.com/guides/#/warnings/js-date/ for more info.',function(config){config._d=new Date(config._i+(config._useUTC?' UTC':''));});// Pick the first defined of two or three arguments.\nfunction defaults(a,b,c){if(a!=null){return a;}if(b!=null){return b;}return c;}function currentDateArray(config){// hooks is actually the exported moment object\nvar nowValue=new Date(hooks.now());if(config._useUTC){return[nowValue.getUTCFullYear(),nowValue.getUTCMonth(),nowValue.getUTCDate()];}return[nowValue.getFullYear(),nowValue.getMonth(),nowValue.getDate()];}// convert an array to a date.\n// the array should mirror the parameters below\n// note: all values past the year are optional and will default to the lowest possible value.\n// [year, month, day , hour, minute, second, millisecond]\nfunction configFromArray(config){var i,date,input=[],currentDate,expectedWeekday,yearToUse;if(config._d){return;}currentDate=currentDateArray(config);//compute day of the year from weeks and weekdays\nif(config._w&&config._a[DATE]==null&&config._a[MONTH]==null){dayOfYearFromWeekInfo(config);}//if the day of the year is set, figure out what it is\nif(config._dayOfYear!=null){yearToUse=defaults(config._a[YEAR],currentDate[YEAR]);if(config._dayOfYear>daysInYear(yearToUse)||config._dayOfYear===0){getParsingFlags(config)._overflowDayOfYear=true;}date=createUTCDate(yearToUse,0,config._dayOfYear);config._a[MONTH]=date.getUTCMonth();config._a[DATE]=date.getUTCDate();}// Default to current date.\n// * if no year, month, day of month are given, default to today\n// * if day of month is given, default month and year\n// * if month is given, default only year\n// * if year is given, don't default anything\nfor(i=0;i<3&&config._a[i]==null;++i){config._a[i]=input[i]=currentDate[i];}// Zero out whatever was not defaulted, including time\nfor(;i<7;i++){config._a[i]=input[i]=config._a[i]==null?i===2?1:0:config._a[i];}// Check for 24:00:00.000\nif(config._a[HOUR]===24&&config._a[MINUTE]===0&&config._a[SECOND]===0&&config._a[MILLISECOND]===0){config._nextDay=true;config._a[HOUR]=0;}config._d=(config._useUTC?createUTCDate:createDate).apply(null,input);expectedWeekday=config._useUTC?config._d.getUTCDay():config._d.getDay();// Apply timezone offset from input. The actual utcOffset can be changed\n// with parseZone.\nif(config._tzm!=null){config._d.setUTCMinutes(config._d.getUTCMinutes()-config._tzm);}if(config._nextDay){config._a[HOUR]=24;}// check for mismatching day of week\nif(config._w&&typeof config._w.d!=='undefined'&&config._w.d!==expectedWeekday){getParsingFlags(config).weekdayMismatch=true;}}function dayOfYearFromWeekInfo(config){var w,weekYear,week,weekday,dow,doy,temp,weekdayOverflow,curWeek;w=config._w;if(w.GG!=null||w.W!=null||w.E!=null){dow=1;doy=4;// TODO: We need to take the current isoWeekYear, but that depends on\n// how we interpret now (local, utc, fixed offset). So create\n// a now version of current config (take local/utc/offset flags, and\n// create now).\nweekYear=defaults(w.GG,config._a[YEAR],weekOfYear(createLocal(),1,4).year);week=defaults(w.W,1);weekday=defaults(w.E,1);if(weekday<1||weekday>7){weekdayOverflow=true;}}else{dow=config._locale._week.dow;doy=config._locale._week.doy;curWeek=weekOfYear(createLocal(),dow,doy);weekYear=defaults(w.gg,config._a[YEAR],curWeek.year);// Default to current week.\nweek=defaults(w.w,curWeek.week);if(w.d!=null){// weekday -- low day numbers are considered next week\nweekday=w.d;if(weekday<0||weekday>6){weekdayOverflow=true;}}else if(w.e!=null){// local weekday -- counting starts from beginning of week\nweekday=w.e+dow;if(w.e<0||w.e>6){weekdayOverflow=true;}}else{// default to beginning of week\nweekday=dow;}}if(week<1||week>weeksInYear(weekYear,dow,doy)){getParsingFlags(config)._overflowWeeks=true;}else if(weekdayOverflow!=null){getParsingFlags(config)._overflowWeekday=true;}else{temp=dayOfYearFromWeeks(weekYear,week,weekday,dow,doy);config._a[YEAR]=temp.year;config._dayOfYear=temp.dayOfYear;}}// constant that refers to the ISO standard\nhooks.ISO_8601=function(){};// constant that refers to the RFC 2822 form\nhooks.RFC_2822=function(){};// date from string and format string\nfunction configFromStringAndFormat(config){// TODO: Move this to another part of the creation flow to prevent circular deps\nif(config._f===hooks.ISO_8601){configFromISO(config);return;}if(config._f===hooks.RFC_2822){configFromRFC2822(config);return;}config._a=[];getParsingFlags(config).empty=true;// This array is used to make a Date, either with `new Date` or `Date.UTC`\nvar string=''+config._i,i,parsedInput,tokens,token,skipped,stringLength=string.length,totalParsedInputLength=0,era;tokens=expandFormat(config._f,config._locale).match(formattingTokens)||[];for(i=0;i<tokens.length;i++){token=tokens[i];parsedInput=(string.match(getParseRegexForToken(token,config))||[])[0];if(parsedInput){skipped=string.substr(0,string.indexOf(parsedInput));if(skipped.length>0){getParsingFlags(config).unusedInput.push(skipped);}string=string.slice(string.indexOf(parsedInput)+parsedInput.length);totalParsedInputLength+=parsedInput.length;}// don't parse if it's not a known token\nif(formatTokenFunctions[token]){if(parsedInput){getParsingFlags(config).empty=false;}else{getParsingFlags(config).unusedTokens.push(token);}addTimeToArrayFromToken(token,parsedInput,config);}else if(config._strict&&!parsedInput){getParsingFlags(config).unusedTokens.push(token);}}// add remaining unparsed input length to the string\ngetParsingFlags(config).charsLeftOver=stringLength-totalParsedInputLength;if(string.length>0){getParsingFlags(config).unusedInput.push(string);}// clear _12h flag if hour is <= 12\nif(config._a[HOUR]<=12&&getParsingFlags(config).bigHour===true&&config._a[HOUR]>0){getParsingFlags(config).bigHour=undefined;}getParsingFlags(config).parsedDateParts=config._a.slice(0);getParsingFlags(config).meridiem=config._meridiem;// handle meridiem\nconfig._a[HOUR]=meridiemFixWrap(config._locale,config._a[HOUR],config._meridiem);// handle era\nera=getParsingFlags(config).era;if(era!==null){config._a[YEAR]=config._locale.erasConvertYear(era,config._a[YEAR]);}configFromArray(config);checkOverflow(config);}function meridiemFixWrap(locale,hour,meridiem){var isPm;if(meridiem==null){// nothing to do\nreturn hour;}if(locale.meridiemHour!=null){return locale.meridiemHour(hour,meridiem);}else if(locale.isPM!=null){// Fallback\nisPm=locale.isPM(meridiem);if(isPm&&hour<12){hour+=12;}if(!isPm&&hour===12){hour=0;}return hour;}else{// this is not supposed to happen\nreturn hour;}}// date from string and array of format strings\nfunction configFromStringAndArray(config){var tempConfig,bestMoment,scoreToBeat,i,currentScore,validFormatFound,bestFormatIsValid=false;if(config._f.length===0){getParsingFlags(config).invalidFormat=true;config._d=new Date(NaN);return;}for(i=0;i<config._f.length;i++){currentScore=0;validFormatFound=false;tempConfig=copyConfig({},config);if(config._useUTC!=null){tempConfig._useUTC=config._useUTC;}tempConfig._f=config._f[i];configFromStringAndFormat(tempConfig);if(isValid(tempConfig)){validFormatFound=true;}// if there is any input that was not parsed add a penalty for that format\ncurrentScore+=getParsingFlags(tempConfig).charsLeftOver;//or tokens\ncurrentScore+=getParsingFlags(tempConfig).unusedTokens.length*10;getParsingFlags(tempConfig).score=currentScore;if(!bestFormatIsValid){if(scoreToBeat==null||currentScore<scoreToBeat||validFormatFound){scoreToBeat=currentScore;bestMoment=tempConfig;if(validFormatFound){bestFormatIsValid=true;}}}else{if(currentScore<scoreToBeat){scoreToBeat=currentScore;bestMoment=tempConfig;}}}extend(config,bestMoment||tempConfig);}function configFromObject(config){if(config._d){return;}var i=normalizeObjectUnits(config._i),dayOrDate=i.day===undefined?i.date:i.day;config._a=map([i.year,i.month,dayOrDate,i.hour,i.minute,i.second,i.millisecond],function(obj){return obj&&parseInt(obj,10);});configFromArray(config);}function createFromConfig(config){var res=new Moment(checkOverflow(prepareConfig(config)));if(res._nextDay){// Adding is smart enough around DST\nres.add(1,'d');res._nextDay=undefined;}return res;}function prepareConfig(config){var input=config._i,format=config._f;config._locale=config._locale||getLocale(config._l);if(input===null||format===undefined&&input===''){return createInvalid({nullInput:true});}if(typeof input==='string'){config._i=input=config._locale.preparse(input);}if(isMoment(input)){return new Moment(checkOverflow(input));}else if(isDate(input)){config._d=input;}else if(isArray(format)){configFromStringAndArray(config);}else if(format){configFromStringAndFormat(config);}else{configFromInput(config);}if(!isValid(config)){config._d=null;}return config;}function configFromInput(config){var input=config._i;if(isUndefined(input)){config._d=new Date(hooks.now());}else if(isDate(input)){config._d=new Date(input.valueOf());}else if(typeof input==='string'){configFromString(config);}else if(isArray(input)){config._a=map(input.slice(0),function(obj){return parseInt(obj,10);});configFromArray(config);}else if(isObject(input)){configFromObject(config);}else if(isNumber(input)){// from milliseconds\nconfig._d=new Date(input);}else{hooks.createFromInputFallback(config);}}function createLocalOrUTC(input,format,locale,strict,isUTC){var c={};if(format===true||format===false){strict=format;format=undefined;}if(locale===true||locale===false){strict=locale;locale=undefined;}if(isObject(input)&&isObjectEmpty(input)||isArray(input)&&input.length===0){input=undefined;}// object construction must be done this way.\n// https://github.com/moment/moment/issues/1423\nc._isAMomentObject=true;c._useUTC=c._isUTC=isUTC;c._l=locale;c._i=input;c._f=format;c._strict=strict;return createFromConfig(c);}function createLocal(input,format,locale,strict){return createLocalOrUTC(input,format,locale,strict,false);}var prototypeMin=deprecate('moment().min is deprecated, use moment.max instead. http://momentjs.com/guides/#/warnings/min-max/',function(){var other=createLocal.apply(null,arguments);if(this.isValid()&&other.isValid()){return other<this?this:other;}else{return createInvalid();}}),prototypeMax=deprecate('moment().max is deprecated, use moment.min instead. http://momentjs.com/guides/#/warnings/min-max/',function(){var other=createLocal.apply(null,arguments);if(this.isValid()&&other.isValid()){return other>this?this:other;}else{return createInvalid();}});// Pick a moment m from moments so that m[fn](other) is true for all\n// other. This relies on the function fn to be transitive.\n//\n// moments should either be an array of moment objects or an array, whose\n// first element is an array of moment objects.\nfunction pickBy(fn,moments){var res,i;if(moments.length===1&&isArray(moments[0])){moments=moments[0];}if(!moments.length){return createLocal();}res=moments[0];for(i=1;i<moments.length;++i){if(!moments[i].isValid()||moments[i][fn](res)){res=moments[i];}}return res;}// TODO: Use [].sort instead?\nfunction min(){var args=[].slice.call(arguments,0);return pickBy('isBefore',args);}function max(){var args=[].slice.call(arguments,0);return pickBy('isAfter',args);}var now=function now(){return Date.now?Date.now():+new Date();};var ordering=['year','quarter','month','week','day','hour','minute','second','millisecond'];function isDurationValid(m){var key,unitHasDecimal=false,i;for(key in m){if(hasOwnProp(m,key)&&!(indexOf.call(ordering,key)!==-1&&(m[key]==null||!isNaN(m[key])))){return false;}}for(i=0;i<ordering.length;++i){if(m[ordering[i]]){if(unitHasDecimal){return false;// only allow non-integers for smallest unit\n}if(parseFloat(m[ordering[i]])!==toInt(m[ordering[i]])){unitHasDecimal=true;}}}return true;}function isValid$1(){return this._isValid;}function createInvalid$1(){return createDuration(NaN);}function Duration(duration){var normalizedInput=normalizeObjectUnits(duration),years=normalizedInput.year||0,quarters=normalizedInput.quarter||0,months=normalizedInput.month||0,weeks=normalizedInput.week||normalizedInput.isoWeek||0,days=normalizedInput.day||0,hours=normalizedInput.hour||0,minutes=normalizedInput.minute||0,seconds=normalizedInput.second||0,milliseconds=normalizedInput.millisecond||0;this._isValid=isDurationValid(normalizedInput);// representation for dateAddRemove\nthis._milliseconds=+milliseconds+seconds*1e3+// 1000\nminutes*6e4+// 1000 * 60\nhours*1000*60*60;//using 1000 * 60 * 60 instead of 36e5 to avoid floating point rounding errors https://github.com/moment/moment/issues/2978\n// Because of dateAddRemove treats 24 hours as different from a\n// day when working around DST, we need to store them separately\nthis._days=+days+weeks*7;// It is impossible to translate months into days without knowing\n// which months you are are talking about, so we have to store\n// it separately.\nthis._months=+months+quarters*3+years*12;this._data={};this._locale=getLocale();this._bubble();}function isDuration(obj){return obj instanceof Duration;}function absRound(number){if(number<0){return Math.round(-1*number)*-1;}else{return Math.round(number);}}// compare two arrays, return the number of differences\nfunction compareArrays(array1,array2,dontConvert){var len=Math.min(array1.length,array2.length),lengthDiff=Math.abs(array1.length-array2.length),diffs=0,i;for(i=0;i<len;i++){if(dontConvert&&array1[i]!==array2[i]||!dontConvert&&toInt(array1[i])!==toInt(array2[i])){diffs++;}}return diffs+lengthDiff;}// FORMATTING\nfunction offset(token,separator){addFormatToken(token,0,0,function(){var offset=this.utcOffset(),sign='+';if(offset<0){offset=-offset;sign='-';}return sign+zeroFill(~~(offset/60),2)+separator+zeroFill(~~offset%60,2);});}offset('Z',':');offset('ZZ','');// PARSING\naddRegexToken('Z',matchShortOffset);addRegexToken('ZZ',matchShortOffset);addParseToken(['Z','ZZ'],function(input,array,config){config._useUTC=true;config._tzm=offsetFromString(matchShortOffset,input);});// HELPERS\n// timezone chunker\n// '+10:00' > ['10',  '00']\n// '-1530'  > ['-15', '30']\nvar chunkOffset=/([\\+\\-]|\\d\\d)/gi;function offsetFromString(matcher,string){var matches=(string||'').match(matcher),chunk,parts,minutes;if(matches===null){return null;}chunk=matches[matches.length-1]||[];parts=(chunk+'').match(chunkOffset)||['-',0,0];minutes=+(parts[1]*60)+toInt(parts[2]);return minutes===0?0:parts[0]==='+'?minutes:-minutes;}// Return a moment from input, that is local/utc/zone equivalent to model.\nfunction cloneWithOffset(input,model){var res,diff;if(model._isUTC){res=model.clone();diff=(isMoment(input)||isDate(input)?input.valueOf():createLocal(input).valueOf())-res.valueOf();// Use low-level api, because this fn is low-level api.\nres._d.setTime(res._d.valueOf()+diff);hooks.updateOffset(res,false);return res;}else{return createLocal(input).local();}}function getDateOffset(m){// On Firefox.24 Date#getTimezoneOffset returns a floating point.\n// https://github.com/moment/moment/pull/1871\nreturn-Math.round(m._d.getTimezoneOffset());}// HOOKS\n// This function will be called whenever a moment is mutated.\n// It is intended to keep the offset in sync with the timezone.\nhooks.updateOffset=function(){};// MOMENTS\n// keepLocalTime = true means only change the timezone, without\n// affecting the local hour. So 5:31:26 +0300 --[utcOffset(2, true)]-->\n// 5:31:26 +0200 It is possible that 5:31:26 doesn't exist with offset\n// +0200, so we adjust the time as needed, to be valid.\n//\n// Keeping the time actually adds/subtracts (one hour)\n// from the actual represented time. That is why we call updateOffset\n// a second time. In case it wants us to change the offset again\n// _changeInProgress == true case, then we have to adjust, because\n// there is no such time in the given timezone.\nfunction getSetOffset(input,keepLocalTime,keepMinutes){var offset=this._offset||0,localAdjust;if(!this.isValid()){return input!=null?this:NaN;}if(input!=null){if(typeof input==='string'){input=offsetFromString(matchShortOffset,input);if(input===null){return this;}}else if(Math.abs(input)<16&&!keepMinutes){input=input*60;}if(!this._isUTC&&keepLocalTime){localAdjust=getDateOffset(this);}this._offset=input;this._isUTC=true;if(localAdjust!=null){this.add(localAdjust,'m');}if(offset!==input){if(!keepLocalTime||this._changeInProgress){addSubtract(this,createDuration(input-offset,'m'),1,false);}else if(!this._changeInProgress){this._changeInProgress=true;hooks.updateOffset(this,true);this._changeInProgress=null;}}return this;}else{return this._isUTC?offset:getDateOffset(this);}}function getSetZone(input,keepLocalTime){if(input!=null){if(typeof input!=='string'){input=-input;}this.utcOffset(input,keepLocalTime);return this;}else{return-this.utcOffset();}}function setOffsetToUTC(keepLocalTime){return this.utcOffset(0,keepLocalTime);}function setOffsetToLocal(keepLocalTime){if(this._isUTC){this.utcOffset(0,keepLocalTime);this._isUTC=false;if(keepLocalTime){this.subtract(getDateOffset(this),'m');}}return this;}function setOffsetToParsedOffset(){if(this._tzm!=null){this.utcOffset(this._tzm,false,true);}else if(typeof this._i==='string'){var tZone=offsetFromString(matchOffset,this._i);if(tZone!=null){this.utcOffset(tZone);}else{this.utcOffset(0,true);}}return this;}function hasAlignedHourOffset(input){if(!this.isValid()){return false;}input=input?createLocal(input).utcOffset():0;return(this.utcOffset()-input)%60===0;}function isDaylightSavingTime(){return this.utcOffset()>this.clone().month(0).utcOffset()||this.utcOffset()>this.clone().month(5).utcOffset();}function isDaylightSavingTimeShifted(){if(!isUndefined(this._isDSTShifted)){return this._isDSTShifted;}var c={},other;copyConfig(c,this);c=prepareConfig(c);if(c._a){other=c._isUTC?createUTC(c._a):createLocal(c._a);this._isDSTShifted=this.isValid()&&compareArrays(c._a,other.toArray())>0;}else{this._isDSTShifted=false;}return this._isDSTShifted;}function isLocal(){return this.isValid()?!this._isUTC:false;}function isUtcOffset(){return this.isValid()?this._isUTC:false;}function isUtc(){return this.isValid()?this._isUTC&&this._offset===0:false;}// ASP.NET json date format regex\nvar aspNetRegex=/^(-|\\+)?(?:(\\d*)[. ])?(\\d+):(\\d+)(?::(\\d+)(\\.\\d*)?)?$/,// from http://docs.closure-library.googlecode.com/git/closure_goog_date_date.js.source.html\n// somewhat more in line with 4.4.3.2 2004 spec, but allows decimal anywhere\n// and further modified to allow for strings containing both week and day\nisoRegex=/^(-|\\+)?P(?:([-+]?[0-9,.]*)Y)?(?:([-+]?[0-9,.]*)M)?(?:([-+]?[0-9,.]*)W)?(?:([-+]?[0-9,.]*)D)?(?:T(?:([-+]?[0-9,.]*)H)?(?:([-+]?[0-9,.]*)M)?(?:([-+]?[0-9,.]*)S)?)?$/;function createDuration(input,key){var duration=input,// matching against regexp is expensive, do it on demand\nmatch=null,sign,ret,diffRes;if(isDuration(input)){duration={ms:input._milliseconds,d:input._days,M:input._months};}else if(isNumber(input)||!isNaN(+input)){duration={};if(key){duration[key]=+input;}else{duration.milliseconds=+input;}}else if(match=aspNetRegex.exec(input)){sign=match[1]==='-'?-1:1;duration={y:0,d:toInt(match[DATE])*sign,h:toInt(match[HOUR])*sign,m:toInt(match[MINUTE])*sign,s:toInt(match[SECOND])*sign,ms:toInt(absRound(match[MILLISECOND]*1000))*sign// the millisecond decimal point is included in the match\n};}else if(match=isoRegex.exec(input)){sign=match[1]==='-'?-1:1;duration={y:parseIso(match[2],sign),M:parseIso(match[3],sign),w:parseIso(match[4],sign),d:parseIso(match[5],sign),h:parseIso(match[6],sign),m:parseIso(match[7],sign),s:parseIso(match[8],sign)};}else if(duration==null){// checks for null or undefined\nduration={};}else if(_typeof2(duration)==='object'&&('from'in duration||'to'in duration)){diffRes=momentsDifference(createLocal(duration.from),createLocal(duration.to));duration={};duration.ms=diffRes.milliseconds;duration.M=diffRes.months;}ret=new Duration(duration);if(isDuration(input)&&hasOwnProp(input,'_locale')){ret._locale=input._locale;}if(isDuration(input)&&hasOwnProp(input,'_isValid')){ret._isValid=input._isValid;}return ret;}createDuration.fn=Duration.prototype;createDuration.invalid=createInvalid$1;function parseIso(inp,sign){// We'd normally use ~~inp for this, but unfortunately it also\n// converts floats to ints.\n// inp may be undefined, so careful calling replace on it.\nvar res=inp&&parseFloat(inp.replace(',','.'));// apply sign while we're at it\nreturn(isNaN(res)?0:res)*sign;}function positiveMomentsDifference(base,other){var res={};res.months=other.month()-base.month()+(other.year()-base.year())*12;if(base.clone().add(res.months,'M').isAfter(other)){--res.months;}res.milliseconds=+other-+base.clone().add(res.months,'M');return res;}function momentsDifference(base,other){var res;if(!(base.isValid()&&other.isValid())){return{milliseconds:0,months:0};}other=cloneWithOffset(other,base);if(base.isBefore(other)){res=positiveMomentsDifference(base,other);}else{res=positiveMomentsDifference(other,base);res.milliseconds=-res.milliseconds;res.months=-res.months;}return res;}// TODO: remove 'name' arg after deprecation is removed\nfunction createAdder(direction,name){return function(val,period){var dur,tmp;//invert the arguments, but complain about it\nif(period!==null&&!isNaN(+period)){deprecateSimple(name,'moment().'+name+'(period, number) is deprecated. Please use moment().'+name+'(number, period). '+'See http://momentjs.com/guides/#/warnings/add-inverted-param/ for more info.');tmp=val;val=period;period=tmp;}dur=createDuration(val,period);addSubtract(this,dur,direction);return this;};}function addSubtract(mom,duration,isAdding,updateOffset){var milliseconds=duration._milliseconds,days=absRound(duration._days),months=absRound(duration._months);if(!mom.isValid()){// No op\nreturn;}updateOffset=updateOffset==null?true:updateOffset;if(months){setMonth(mom,get(mom,'Month')+months*isAdding);}if(days){set$1(mom,'Date',get(mom,'Date')+days*isAdding);}if(milliseconds){mom._d.setTime(mom._d.valueOf()+milliseconds*isAdding);}if(updateOffset){hooks.updateOffset(mom,days||months);}}var add=createAdder(1,'add'),subtract=createAdder(-1,'subtract');function isString(input){return typeof input==='string'||input instanceof String;}// type MomentInput = Moment | Date | string | number | (number | string)[] | MomentInputObject | void; // null | undefined\nfunction isMomentInput(input){return isMoment(input)||isDate(input)||isString(input)||isNumber(input)||isNumberOrStringArray(input)||isMomentInputObject(input)||input===null||input===undefined;}function isMomentInputObject(input){var objectTest=isObject(input)&&!isObjectEmpty(input),propertyTest=false,properties=['years','year','y','months','month','M','days','day','d','dates','date','D','hours','hour','h','minutes','minute','m','seconds','second','s','milliseconds','millisecond','ms'],i,property;for(i=0;i<properties.length;i+=1){property=properties[i];propertyTest=propertyTest||hasOwnProp(input,property);}return objectTest&&propertyTest;}function isNumberOrStringArray(input){var arrayTest=isArray(input),dataTypeTest=false;if(arrayTest){dataTypeTest=input.filter(function(item){return!isNumber(item)&&isString(input);}).length===0;}return arrayTest&&dataTypeTest;}function isCalendarSpec(input){var objectTest=isObject(input)&&!isObjectEmpty(input),propertyTest=false,properties=['sameDay','nextDay','lastDay','nextWeek','lastWeek','sameElse'],i,property;for(i=0;i<properties.length;i+=1){property=properties[i];propertyTest=propertyTest||hasOwnProp(input,property);}return objectTest&&propertyTest;}function getCalendarFormat(myMoment,now){var diff=myMoment.diff(now,'days',true);return diff<-6?'sameElse':diff<-1?'lastWeek':diff<0?'lastDay':diff<1?'sameDay':diff<2?'nextDay':diff<7?'nextWeek':'sameElse';}function calendar$1(time,formats){// Support for single parameter, formats only overload to the calendar function\nif(arguments.length===1){if(isMomentInput(arguments[0])){time=arguments[0];formats=undefined;}else if(isCalendarSpec(arguments[0])){formats=arguments[0];time=undefined;}}// We want to compare the start of today, vs this.\n// Getting start-of-today depends on whether we're local/utc/offset or not.\nvar now=time||createLocal(),sod=cloneWithOffset(now,this).startOf('day'),format=hooks.calendarFormat(this,sod)||'sameElse',output=formats&&(isFunction(formats[format])?formats[format].call(this,now):formats[format]);return this.format(output||this.localeData().calendar(format,this,createLocal(now)));}function clone(){return new Moment(this);}function isAfter(input,units){var localInput=isMoment(input)?input:createLocal(input);if(!(this.isValid()&&localInput.isValid())){return false;}units=normalizeUnits(units)||'millisecond';if(units==='millisecond'){return this.valueOf()>localInput.valueOf();}else{return localInput.valueOf()<this.clone().startOf(units).valueOf();}}function isBefore(input,units){var localInput=isMoment(input)?input:createLocal(input);if(!(this.isValid()&&localInput.isValid())){return false;}units=normalizeUnits(units)||'millisecond';if(units==='millisecond'){return this.valueOf()<localInput.valueOf();}else{return this.clone().endOf(units).valueOf()<localInput.valueOf();}}function isBetween(from,to,units,inclusivity){var localFrom=isMoment(from)?from:createLocal(from),localTo=isMoment(to)?to:createLocal(to);if(!(this.isValid()&&localFrom.isValid()&&localTo.isValid())){return false;}inclusivity=inclusivity||'()';return(inclusivity[0]==='('?this.isAfter(localFrom,units):!this.isBefore(localFrom,units))&&(inclusivity[1]===')'?this.isBefore(localTo,units):!this.isAfter(localTo,units));}function isSame(input,units){var localInput=isMoment(input)?input:createLocal(input),inputMs;if(!(this.isValid()&&localInput.isValid())){return false;}units=normalizeUnits(units)||'millisecond';if(units==='millisecond'){return this.valueOf()===localInput.valueOf();}else{inputMs=localInput.valueOf();return this.clone().startOf(units).valueOf()<=inputMs&&inputMs<=this.clone().endOf(units).valueOf();}}function isSameOrAfter(input,units){return this.isSame(input,units)||this.isAfter(input,units);}function isSameOrBefore(input,units){return this.isSame(input,units)||this.isBefore(input,units);}function diff(input,units,asFloat){var that,zoneDelta,output;if(!this.isValid()){return NaN;}that=cloneWithOffset(input,this);if(!that.isValid()){return NaN;}zoneDelta=(that.utcOffset()-this.utcOffset())*6e4;units=normalizeUnits(units);switch(units){case'year':output=monthDiff(this,that)/12;break;case'month':output=monthDiff(this,that);break;case'quarter':output=monthDiff(this,that)/3;break;case'second':output=(this-that)/1e3;break;// 1000\ncase'minute':output=(this-that)/6e4;break;// 1000 * 60\ncase'hour':output=(this-that)/36e5;break;// 1000 * 60 * 60\ncase'day':output=(this-that-zoneDelta)/864e5;break;// 1000 * 60 * 60 * 24, negate dst\ncase'week':output=(this-that-zoneDelta)/6048e5;break;// 1000 * 60 * 60 * 24 * 7, negate dst\ndefault:output=this-that;}return asFloat?output:absFloor(output);}function monthDiff(a,b){if(a.date()<b.date()){// end-of-month calculations work correct when the start month has more\n// days than the end month.\nreturn-monthDiff(b,a);}// difference in months\nvar wholeMonthDiff=(b.year()-a.year())*12+(b.month()-a.month()),// b is in (anchor - 1 month, anchor + 1 month)\nanchor=a.clone().add(wholeMonthDiff,'months'),anchor2,adjust;if(b-anchor<0){anchor2=a.clone().add(wholeMonthDiff-1,'months');// linear across the month\nadjust=(b-anchor)/(anchor-anchor2);}else{anchor2=a.clone().add(wholeMonthDiff+1,'months');// linear across the month\nadjust=(b-anchor)/(anchor2-anchor);}//check for negative zero, return zero if negative zero\nreturn-(wholeMonthDiff+adjust)||0;}hooks.defaultFormat='YYYY-MM-DDTHH:mm:ssZ';hooks.defaultFormatUtc='YYYY-MM-DDTHH:mm:ss[Z]';function toString(){return this.clone().locale('en').format('ddd MMM DD YYYY HH:mm:ss [GMT]ZZ');}function toISOString(keepOffset){if(!this.isValid()){return null;}var utc=keepOffset!==true,m=utc?this.clone().utc():this;if(m.year()<0||m.year()>9999){return formatMoment(m,utc?'YYYYYY-MM-DD[T]HH:mm:ss.SSS[Z]':'YYYYYY-MM-DD[T]HH:mm:ss.SSSZ');}if(isFunction(Date.prototype.toISOString)){// native implementation is ~50x faster, use it when we can\nif(utc){return this.toDate().toISOString();}else{return new Date(this.valueOf()+this.utcOffset()*60*1000).toISOString().replace('Z',formatMoment(m,'Z'));}}return formatMoment(m,utc?'YYYY-MM-DD[T]HH:mm:ss.SSS[Z]':'YYYY-MM-DD[T]HH:mm:ss.SSSZ');}/**\n     * Return a human readable representation of a moment that can\n     * also be evaluated to get a new moment which is the same\n     *\n     * @link https://nodejs.org/dist/latest/docs/api/util.html#util_custom_inspect_function_on_objects\n     */function inspect(){if(!this.isValid()){return'moment.invalid(/* '+this._i+' */)';}var func='moment',zone='',prefix,year,datetime,suffix;if(!this.isLocal()){func=this.utcOffset()===0?'moment.utc':'moment.parseZone';zone='Z';}prefix='['+func+'(\"]';year=0<=this.year()&&this.year()<=9999?'YYYY':'YYYYYY';datetime='-MM-DD[T]HH:mm:ss.SSS';suffix=zone+'[\")]';return this.format(prefix+year+datetime+suffix);}function format(inputString){if(!inputString){inputString=this.isUtc()?hooks.defaultFormatUtc:hooks.defaultFormat;}var output=formatMoment(this,inputString);return this.localeData().postformat(output);}function from(time,withoutSuffix){if(this.isValid()&&(isMoment(time)&&time.isValid()||createLocal(time).isValid())){return createDuration({to:this,from:time}).locale(this.locale()).humanize(!withoutSuffix);}else{return this.localeData().invalidDate();}}function fromNow(withoutSuffix){return this.from(createLocal(),withoutSuffix);}function to(time,withoutSuffix){if(this.isValid()&&(isMoment(time)&&time.isValid()||createLocal(time).isValid())){return createDuration({from:this,to:time}).locale(this.locale()).humanize(!withoutSuffix);}else{return this.localeData().invalidDate();}}function toNow(withoutSuffix){return this.to(createLocal(),withoutSuffix);}// If passed a locale key, it will set the locale for this\n// instance.  Otherwise, it will return the locale configuration\n// variables for this instance.\nfunction locale(key){var newLocaleData;if(key===undefined){return this._locale._abbr;}else{newLocaleData=getLocale(key);if(newLocaleData!=null){this._locale=newLocaleData;}return this;}}var lang=deprecate('moment().lang() is deprecated. Instead, use moment().localeData() to get the language configuration. Use moment().locale() to change languages.',function(key){if(key===undefined){return this.localeData();}else{return this.locale(key);}});function localeData(){return this._locale;}var MS_PER_SECOND=1000,MS_PER_MINUTE=60*MS_PER_SECOND,MS_PER_HOUR=60*MS_PER_MINUTE,MS_PER_400_YEARS=(365*400+97)*24*MS_PER_HOUR;// actual modulo - handles negative numbers (for dates before 1970):\nfunction mod$1(dividend,divisor){return(dividend%divisor+divisor)%divisor;}function localStartOfDate(y,m,d){// the date constructor remaps years 0-99 to 1900-1999\nif(y<100&&y>=0){// preserve leap years using a full 400 year cycle, then reset\nreturn new Date(y+400,m,d)-MS_PER_400_YEARS;}else{return new Date(y,m,d).valueOf();}}function utcStartOfDate(y,m,d){// Date.UTC remaps years 0-99 to 1900-1999\nif(y<100&&y>=0){// preserve leap years using a full 400 year cycle, then reset\nreturn Date.UTC(y+400,m,d)-MS_PER_400_YEARS;}else{return Date.UTC(y,m,d);}}function startOf(units){var time,startOfDate;units=normalizeUnits(units);if(units===undefined||units==='millisecond'||!this.isValid()){return this;}startOfDate=this._isUTC?utcStartOfDate:localStartOfDate;switch(units){case'year':time=startOfDate(this.year(),0,1);break;case'quarter':time=startOfDate(this.year(),this.month()-this.month()%3,1);break;case'month':time=startOfDate(this.year(),this.month(),1);break;case'week':time=startOfDate(this.year(),this.month(),this.date()-this.weekday());break;case'isoWeek':time=startOfDate(this.year(),this.month(),this.date()-(this.isoWeekday()-1));break;case'day':case'date':time=startOfDate(this.year(),this.month(),this.date());break;case'hour':time=this._d.valueOf();time-=mod$1(time+(this._isUTC?0:this.utcOffset()*MS_PER_MINUTE),MS_PER_HOUR);break;case'minute':time=this._d.valueOf();time-=mod$1(time,MS_PER_MINUTE);break;case'second':time=this._d.valueOf();time-=mod$1(time,MS_PER_SECOND);break;}this._d.setTime(time);hooks.updateOffset(this,true);return this;}function endOf(units){var time,startOfDate;units=normalizeUnits(units);if(units===undefined||units==='millisecond'||!this.isValid()){return this;}startOfDate=this._isUTC?utcStartOfDate:localStartOfDate;switch(units){case'year':time=startOfDate(this.year()+1,0,1)-1;break;case'quarter':time=startOfDate(this.year(),this.month()-this.month()%3+3,1)-1;break;case'month':time=startOfDate(this.year(),this.month()+1,1)-1;break;case'week':time=startOfDate(this.year(),this.month(),this.date()-this.weekday()+7)-1;break;case'isoWeek':time=startOfDate(this.year(),this.month(),this.date()-(this.isoWeekday()-1)+7)-1;break;case'day':case'date':time=startOfDate(this.year(),this.month(),this.date()+1)-1;break;case'hour':time=this._d.valueOf();time+=MS_PER_HOUR-mod$1(time+(this._isUTC?0:this.utcOffset()*MS_PER_MINUTE),MS_PER_HOUR)-1;break;case'minute':time=this._d.valueOf();time+=MS_PER_MINUTE-mod$1(time,MS_PER_MINUTE)-1;break;case'second':time=this._d.valueOf();time+=MS_PER_SECOND-mod$1(time,MS_PER_SECOND)-1;break;}this._d.setTime(time);hooks.updateOffset(this,true);return this;}function valueOf(){return this._d.valueOf()-(this._offset||0)*60000;}function unix(){return Math.floor(this.valueOf()/1000);}function toDate(){return new Date(this.valueOf());}function toArray(){var m=this;return[m.year(),m.month(),m.date(),m.hour(),m.minute(),m.second(),m.millisecond()];}function toObject(){var m=this;return{years:m.year(),months:m.month(),date:m.date(),hours:m.hours(),minutes:m.minutes(),seconds:m.seconds(),milliseconds:m.milliseconds()};}function toJSON(){// new Date(NaN).toJSON() === null\nreturn this.isValid()?this.toISOString():null;}function isValid$2(){return isValid(this);}function parsingFlags(){return extend({},getParsingFlags(this));}function invalidAt(){return getParsingFlags(this).overflow;}function creationData(){return{input:this._i,format:this._f,locale:this._locale,isUTC:this._isUTC,strict:this._strict};}addFormatToken('N',0,0,'eraAbbr');addFormatToken('NN',0,0,'eraAbbr');addFormatToken('NNN',0,0,'eraAbbr');addFormatToken('NNNN',0,0,'eraName');addFormatToken('NNNNN',0,0,'eraNarrow');addFormatToken('y',['y',1],'yo','eraYear');addFormatToken('y',['yy',2],0,'eraYear');addFormatToken('y',['yyy',3],0,'eraYear');addFormatToken('y',['yyyy',4],0,'eraYear');addRegexToken('N',matchEraAbbr);addRegexToken('NN',matchEraAbbr);addRegexToken('NNN',matchEraAbbr);addRegexToken('NNNN',matchEraName);addRegexToken('NNNNN',matchEraNarrow);addParseToken(['N','NN','NNN','NNNN','NNNNN'],function(input,array,config,token){var era=config._locale.erasParse(input,token,config._strict);if(era){getParsingFlags(config).era=era;}else{getParsingFlags(config).invalidEra=input;}});addRegexToken('y',matchUnsigned);addRegexToken('yy',matchUnsigned);addRegexToken('yyy',matchUnsigned);addRegexToken('yyyy',matchUnsigned);addRegexToken('yo',matchEraYearOrdinal);addParseToken(['y','yy','yyy','yyyy'],YEAR);addParseToken(['yo'],function(input,array,config,token){var match;if(config._locale._eraYearOrdinalRegex){match=input.match(config._locale._eraYearOrdinalRegex);}if(config._locale.eraYearOrdinalParse){array[YEAR]=config._locale.eraYearOrdinalParse(input,match);}else{array[YEAR]=parseInt(input,10);}});function localeEras(m,format){var i,l,date,eras=this._eras||getLocale('en')._eras;for(i=0,l=eras.length;i<l;++i){switch(_typeof2(eras[i].since)){case'string':// truncate time\ndate=hooks(eras[i].since).startOf('day');eras[i].since=date.valueOf();break;}switch(_typeof2(eras[i].until)){case'undefined':eras[i].until=+Infinity;break;case'string':// truncate time\ndate=hooks(eras[i].until).startOf('day').valueOf();eras[i].until=date.valueOf();break;}}return eras;}function localeErasParse(eraName,format,strict){var i,l,eras=this.eras(),name,abbr,narrow;eraName=eraName.toUpperCase();for(i=0,l=eras.length;i<l;++i){name=eras[i].name.toUpperCase();abbr=eras[i].abbr.toUpperCase();narrow=eras[i].narrow.toUpperCase();if(strict){switch(format){case'N':case'NN':case'NNN':if(abbr===eraName){return eras[i];}break;case'NNNN':if(name===eraName){return eras[i];}break;case'NNNNN':if(narrow===eraName){return eras[i];}break;}}else if([name,abbr,narrow].indexOf(eraName)>=0){return eras[i];}}}function localeErasConvertYear(era,year){var dir=era.since<=era.until?+1:-1;if(year===undefined){return hooks(era.since).year();}else{return hooks(era.since).year()+(year-era.offset)*dir;}}function getEraName(){var i,l,val,eras=this.localeData().eras();for(i=0,l=eras.length;i<l;++i){// truncate time\nval=this.startOf('day').valueOf();if(eras[i].since<=val&&val<=eras[i].until){return eras[i].name;}if(eras[i].until<=val&&val<=eras[i].since){return eras[i].name;}}return'';}function getEraNarrow(){var i,l,val,eras=this.localeData().eras();for(i=0,l=eras.length;i<l;++i){// truncate time\nval=this.startOf('day').valueOf();if(eras[i].since<=val&&val<=eras[i].until){return eras[i].narrow;}if(eras[i].until<=val&&val<=eras[i].since){return eras[i].narrow;}}return'';}function getEraAbbr(){var i,l,val,eras=this.localeData().eras();for(i=0,l=eras.length;i<l;++i){// truncate time\nval=this.startOf('day').valueOf();if(eras[i].since<=val&&val<=eras[i].until){return eras[i].abbr;}if(eras[i].until<=val&&val<=eras[i].since){return eras[i].abbr;}}return'';}function getEraYear(){var i,l,dir,val,eras=this.localeData().eras();for(i=0,l=eras.length;i<l;++i){dir=eras[i].since<=eras[i].until?+1:-1;// truncate time\nval=this.startOf('day').valueOf();if(eras[i].since<=val&&val<=eras[i].until||eras[i].until<=val&&val<=eras[i].since){return(this.year()-hooks(eras[i].since).year())*dir+eras[i].offset;}}return this.year();}function erasNameRegex(isStrict){if(!hasOwnProp(this,'_erasNameRegex')){computeErasParse.call(this);}return isStrict?this._erasNameRegex:this._erasRegex;}function erasAbbrRegex(isStrict){if(!hasOwnProp(this,'_erasAbbrRegex')){computeErasParse.call(this);}return isStrict?this._erasAbbrRegex:this._erasRegex;}function erasNarrowRegex(isStrict){if(!hasOwnProp(this,'_erasNarrowRegex')){computeErasParse.call(this);}return isStrict?this._erasNarrowRegex:this._erasRegex;}function matchEraAbbr(isStrict,locale){return locale.erasAbbrRegex(isStrict);}function matchEraName(isStrict,locale){return locale.erasNameRegex(isStrict);}function matchEraNarrow(isStrict,locale){return locale.erasNarrowRegex(isStrict);}function matchEraYearOrdinal(isStrict,locale){return locale._eraYearOrdinalRegex||matchUnsigned;}function computeErasParse(){var abbrPieces=[],namePieces=[],narrowPieces=[],mixedPieces=[],i,l,eras=this.eras();for(i=0,l=eras.length;i<l;++i){namePieces.push(regexEscape(eras[i].name));abbrPieces.push(regexEscape(eras[i].abbr));narrowPieces.push(regexEscape(eras[i].narrow));mixedPieces.push(regexEscape(eras[i].name));mixedPieces.push(regexEscape(eras[i].abbr));mixedPieces.push(regexEscape(eras[i].narrow));}this._erasRegex=new RegExp('^('+mixedPieces.join('|')+')','i');this._erasNameRegex=new RegExp('^('+namePieces.join('|')+')','i');this._erasAbbrRegex=new RegExp('^('+abbrPieces.join('|')+')','i');this._erasNarrowRegex=new RegExp('^('+narrowPieces.join('|')+')','i');}// FORMATTING\naddFormatToken(0,['gg',2],0,function(){return this.weekYear()%100;});addFormatToken(0,['GG',2],0,function(){return this.isoWeekYear()%100;});function addWeekYearFormatToken(token,getter){addFormatToken(0,[token,token.length],0,getter);}addWeekYearFormatToken('gggg','weekYear');addWeekYearFormatToken('ggggg','weekYear');addWeekYearFormatToken('GGGG','isoWeekYear');addWeekYearFormatToken('GGGGG','isoWeekYear');// ALIASES\naddUnitAlias('weekYear','gg');addUnitAlias('isoWeekYear','GG');// PRIORITY\naddUnitPriority('weekYear',1);addUnitPriority('isoWeekYear',1);// PARSING\naddRegexToken('G',matchSigned);addRegexToken('g',matchSigned);addRegexToken('GG',match1to2,match2);addRegexToken('gg',match1to2,match2);addRegexToken('GGGG',match1to4,match4);addRegexToken('gggg',match1to4,match4);addRegexToken('GGGGG',match1to6,match6);addRegexToken('ggggg',match1to6,match6);addWeekParseToken(['gggg','ggggg','GGGG','GGGGG'],function(input,week,config,token){week[token.substr(0,2)]=toInt(input);});addWeekParseToken(['gg','GG'],function(input,week,config,token){week[token]=hooks.parseTwoDigitYear(input);});// MOMENTS\nfunction getSetWeekYear(input){return getSetWeekYearHelper.call(this,input,this.week(),this.weekday(),this.localeData()._week.dow,this.localeData()._week.doy);}function getSetISOWeekYear(input){return getSetWeekYearHelper.call(this,input,this.isoWeek(),this.isoWeekday(),1,4);}function getISOWeeksInYear(){return weeksInYear(this.year(),1,4);}function getISOWeeksInISOWeekYear(){return weeksInYear(this.isoWeekYear(),1,4);}function getWeeksInYear(){var weekInfo=this.localeData()._week;return weeksInYear(this.year(),weekInfo.dow,weekInfo.doy);}function getWeeksInWeekYear(){var weekInfo=this.localeData()._week;return weeksInYear(this.weekYear(),weekInfo.dow,weekInfo.doy);}function getSetWeekYearHelper(input,week,weekday,dow,doy){var weeksTarget;if(input==null){return weekOfYear(this,dow,doy).year;}else{weeksTarget=weeksInYear(input,dow,doy);if(week>weeksTarget){week=weeksTarget;}return setWeekAll.call(this,input,week,weekday,dow,doy);}}function setWeekAll(weekYear,week,weekday,dow,doy){var dayOfYearData=dayOfYearFromWeeks(weekYear,week,weekday,dow,doy),date=createUTCDate(dayOfYearData.year,0,dayOfYearData.dayOfYear);this.year(date.getUTCFullYear());this.month(date.getUTCMonth());this.date(date.getUTCDate());return this;}// FORMATTING\naddFormatToken('Q',0,'Qo','quarter');// ALIASES\naddUnitAlias('quarter','Q');// PRIORITY\naddUnitPriority('quarter',7);// PARSING\naddRegexToken('Q',match1);addParseToken('Q',function(input,array){array[MONTH]=(toInt(input)-1)*3;});// MOMENTS\nfunction getSetQuarter(input){return input==null?Math.ceil((this.month()+1)/3):this.month((input-1)*3+this.month()%3);}// FORMATTING\naddFormatToken('D',['DD',2],'Do','date');// ALIASES\naddUnitAlias('date','D');// PRIORITY\naddUnitPriority('date',9);// PARSING\naddRegexToken('D',match1to2);addRegexToken('DD',match1to2,match2);addRegexToken('Do',function(isStrict,locale){// TODO: Remove \"ordinalParse\" fallback in next major release.\nreturn isStrict?locale._dayOfMonthOrdinalParse||locale._ordinalParse:locale._dayOfMonthOrdinalParseLenient;});addParseToken(['D','DD'],DATE);addParseToken('Do',function(input,array){array[DATE]=toInt(input.match(match1to2)[0]);});// MOMENTS\nvar getSetDayOfMonth=makeGetSet('Date',true);// FORMATTING\naddFormatToken('DDD',['DDDD',3],'DDDo','dayOfYear');// ALIASES\naddUnitAlias('dayOfYear','DDD');// PRIORITY\naddUnitPriority('dayOfYear',4);// PARSING\naddRegexToken('DDD',match1to3);addRegexToken('DDDD',match3);addParseToken(['DDD','DDDD'],function(input,array,config){config._dayOfYear=toInt(input);});// HELPERS\n// MOMENTS\nfunction getSetDayOfYear(input){var dayOfYear=Math.round((this.clone().startOf('day')-this.clone().startOf('year'))/864e5)+1;return input==null?dayOfYear:this.add(input-dayOfYear,'d');}// FORMATTING\naddFormatToken('m',['mm',2],0,'minute');// ALIASES\naddUnitAlias('minute','m');// PRIORITY\naddUnitPriority('minute',14);// PARSING\naddRegexToken('m',match1to2);addRegexToken('mm',match1to2,match2);addParseToken(['m','mm'],MINUTE);// MOMENTS\nvar getSetMinute=makeGetSet('Minutes',false);// FORMATTING\naddFormatToken('s',['ss',2],0,'second');// ALIASES\naddUnitAlias('second','s');// PRIORITY\naddUnitPriority('second',15);// PARSING\naddRegexToken('s',match1to2);addRegexToken('ss',match1to2,match2);addParseToken(['s','ss'],SECOND);// MOMENTS\nvar getSetSecond=makeGetSet('Seconds',false);// FORMATTING\naddFormatToken('S',0,0,function(){return~~(this.millisecond()/100);});addFormatToken(0,['SS',2],0,function(){return~~(this.millisecond()/10);});addFormatToken(0,['SSS',3],0,'millisecond');addFormatToken(0,['SSSS',4],0,function(){return this.millisecond()*10;});addFormatToken(0,['SSSSS',5],0,function(){return this.millisecond()*100;});addFormatToken(0,['SSSSSS',6],0,function(){return this.millisecond()*1000;});addFormatToken(0,['SSSSSSS',7],0,function(){return this.millisecond()*10000;});addFormatToken(0,['SSSSSSSS',8],0,function(){return this.millisecond()*100000;});addFormatToken(0,['SSSSSSSSS',9],0,function(){return this.millisecond()*1000000;});// ALIASES\naddUnitAlias('millisecond','ms');// PRIORITY\naddUnitPriority('millisecond',16);// PARSING\naddRegexToken('S',match1to3,match1);addRegexToken('SS',match1to3,match2);addRegexToken('SSS',match1to3,match3);var token,getSetMillisecond;for(token='SSSS';token.length<=9;token+='S'){addRegexToken(token,matchUnsigned);}function parseMs(input,array){array[MILLISECOND]=toInt(('0.'+input)*1000);}for(token='S';token.length<=9;token+='S'){addParseToken(token,parseMs);}getSetMillisecond=makeGetSet('Milliseconds',false);// FORMATTING\naddFormatToken('z',0,0,'zoneAbbr');addFormatToken('zz',0,0,'zoneName');// MOMENTS\nfunction getZoneAbbr(){return this._isUTC?'UTC':'';}function getZoneName(){return this._isUTC?'Coordinated Universal Time':'';}var proto=Moment.prototype;proto.add=add;proto.calendar=calendar$1;proto.clone=clone;proto.diff=diff;proto.endOf=endOf;proto.format=format;proto.from=from;proto.fromNow=fromNow;proto.to=to;proto.toNow=toNow;proto.get=stringGet;proto.invalidAt=invalidAt;proto.isAfter=isAfter;proto.isBefore=isBefore;proto.isBetween=isBetween;proto.isSame=isSame;proto.isSameOrAfter=isSameOrAfter;proto.isSameOrBefore=isSameOrBefore;proto.isValid=isValid$2;proto.lang=lang;proto.locale=locale;proto.localeData=localeData;proto.max=prototypeMax;proto.min=prototypeMin;proto.parsingFlags=parsingFlags;proto.set=stringSet;proto.startOf=startOf;proto.subtract=subtract;proto.toArray=toArray;proto.toObject=toObject;proto.toDate=toDate;proto.toISOString=toISOString;proto.inspect=inspect;if(typeof Symbol!=='undefined'&&Symbol[\"for\"]!=null){proto[Symbol[\"for\"]('nodejs.util.inspect.custom')]=function(){return'Moment<'+this.format()+'>';};}proto.toJSON=toJSON;proto.toString=toString;proto.unix=unix;proto.valueOf=valueOf;proto.creationData=creationData;proto.eraName=getEraName;proto.eraNarrow=getEraNarrow;proto.eraAbbr=getEraAbbr;proto.eraYear=getEraYear;proto.year=getSetYear;proto.isLeapYear=getIsLeapYear;proto.weekYear=getSetWeekYear;proto.isoWeekYear=getSetISOWeekYear;proto.quarter=proto.quarters=getSetQuarter;proto.month=getSetMonth;proto.daysInMonth=getDaysInMonth;proto.week=proto.weeks=getSetWeek;proto.isoWeek=proto.isoWeeks=getSetISOWeek;proto.weeksInYear=getWeeksInYear;proto.weeksInWeekYear=getWeeksInWeekYear;proto.isoWeeksInYear=getISOWeeksInYear;proto.isoWeeksInISOWeekYear=getISOWeeksInISOWeekYear;proto.date=getSetDayOfMonth;proto.day=proto.days=getSetDayOfWeek;proto.weekday=getSetLocaleDayOfWeek;proto.isoWeekday=getSetISODayOfWeek;proto.dayOfYear=getSetDayOfYear;proto.hour=proto.hours=getSetHour;proto.minute=proto.minutes=getSetMinute;proto.second=proto.seconds=getSetSecond;proto.millisecond=proto.milliseconds=getSetMillisecond;proto.utcOffset=getSetOffset;proto.utc=setOffsetToUTC;proto.local=setOffsetToLocal;proto.parseZone=setOffsetToParsedOffset;proto.hasAlignedHourOffset=hasAlignedHourOffset;proto.isDST=isDaylightSavingTime;proto.isLocal=isLocal;proto.isUtcOffset=isUtcOffset;proto.isUtc=isUtc;proto.isUTC=isUtc;proto.zoneAbbr=getZoneAbbr;proto.zoneName=getZoneName;proto.dates=deprecate('dates accessor is deprecated. Use date instead.',getSetDayOfMonth);proto.months=deprecate('months accessor is deprecated. Use month instead',getSetMonth);proto.years=deprecate('years accessor is deprecated. Use year instead',getSetYear);proto.zone=deprecate('moment().zone is deprecated, use moment().utcOffset instead. http://momentjs.com/guides/#/warnings/zone/',getSetZone);proto.isDSTShifted=deprecate('isDSTShifted is deprecated. See http://momentjs.com/guides/#/warnings/dst-shifted/ for more information',isDaylightSavingTimeShifted);function createUnix(input){return createLocal(input*1000);}function createInZone(){return createLocal.apply(null,arguments).parseZone();}function preParsePostFormat(string){return string;}var proto$1=Locale.prototype;proto$1.calendar=calendar;proto$1.longDateFormat=longDateFormat;proto$1.invalidDate=invalidDate;proto$1.ordinal=ordinal;proto$1.preparse=preParsePostFormat;proto$1.postformat=preParsePostFormat;proto$1.relativeTime=relativeTime;proto$1.pastFuture=pastFuture;proto$1.set=set;proto$1.eras=localeEras;proto$1.erasParse=localeErasParse;proto$1.erasConvertYear=localeErasConvertYear;proto$1.erasAbbrRegex=erasAbbrRegex;proto$1.erasNameRegex=erasNameRegex;proto$1.erasNarrowRegex=erasNarrowRegex;proto$1.months=localeMonths;proto$1.monthsShort=localeMonthsShort;proto$1.monthsParse=localeMonthsParse;proto$1.monthsRegex=monthsRegex;proto$1.monthsShortRegex=monthsShortRegex;proto$1.week=localeWeek;proto$1.firstDayOfYear=localeFirstDayOfYear;proto$1.firstDayOfWeek=localeFirstDayOfWeek;proto$1.weekdays=localeWeekdays;proto$1.weekdaysMin=localeWeekdaysMin;proto$1.weekdaysShort=localeWeekdaysShort;proto$1.weekdaysParse=localeWeekdaysParse;proto$1.weekdaysRegex=weekdaysRegex;proto$1.weekdaysShortRegex=weekdaysShortRegex;proto$1.weekdaysMinRegex=weekdaysMinRegex;proto$1.isPM=localeIsPM;proto$1.meridiem=localeMeridiem;function get$1(format,index,field,setter){var locale=getLocale(),utc=createUTC().set(setter,index);return locale[field](utc,format);}function listMonthsImpl(format,index,field){if(isNumber(format)){index=format;format=undefined;}format=format||'';if(index!=null){return get$1(format,index,field,'month');}var i,out=[];for(i=0;i<12;i++){out[i]=get$1(format,i,field,'month');}return out;}// ()\n// (5)\n// (fmt, 5)\n// (fmt)\n// (true)\n// (true, 5)\n// (true, fmt, 5)\n// (true, fmt)\nfunction listWeekdaysImpl(localeSorted,format,index,field){if(typeof localeSorted==='boolean'){if(isNumber(format)){index=format;format=undefined;}format=format||'';}else{format=localeSorted;index=format;localeSorted=false;if(isNumber(format)){index=format;format=undefined;}format=format||'';}var locale=getLocale(),shift=localeSorted?locale._week.dow:0,i,out=[];if(index!=null){return get$1(format,(index+shift)%7,field,'day');}for(i=0;i<7;i++){out[i]=get$1(format,(i+shift)%7,field,'day');}return out;}function listMonths(format,index){return listMonthsImpl(format,index,'months');}function listMonthsShort(format,index){return listMonthsImpl(format,index,'monthsShort');}function listWeekdays(localeSorted,format,index){return listWeekdaysImpl(localeSorted,format,index,'weekdays');}function listWeekdaysShort(localeSorted,format,index){return listWeekdaysImpl(localeSorted,format,index,'weekdaysShort');}function listWeekdaysMin(localeSorted,format,index){return listWeekdaysImpl(localeSorted,format,index,'weekdaysMin');}getSetGlobalLocale('en',{eras:[{since:'0001-01-01',until:+Infinity,offset:1,name:'Anno Domini',narrow:'AD',abbr:'AD'},{since:'0000-12-31',until:-Infinity,offset:1,name:'Before Christ',narrow:'BC',abbr:'BC'}],dayOfMonthOrdinalParse:/\\d{1,2}(th|st|nd|rd)/,ordinal:function ordinal(number){var b=number%10,output=toInt(number%100/10)===1?'th':b===1?'st':b===2?'nd':b===3?'rd':'th';return number+output;}});// Side effect imports\nhooks.lang=deprecate('moment.lang is deprecated. Use moment.locale instead.',getSetGlobalLocale);hooks.langData=deprecate('moment.langData is deprecated. Use moment.localeData instead.',getLocale);var mathAbs=Math.abs;function abs(){var data=this._data;this._milliseconds=mathAbs(this._milliseconds);this._days=mathAbs(this._days);this._months=mathAbs(this._months);data.milliseconds=mathAbs(data.milliseconds);data.seconds=mathAbs(data.seconds);data.minutes=mathAbs(data.minutes);data.hours=mathAbs(data.hours);data.months=mathAbs(data.months);data.years=mathAbs(data.years);return this;}function addSubtract$1(duration,input,value,direction){var other=createDuration(input,value);duration._milliseconds+=direction*other._milliseconds;duration._days+=direction*other._days;duration._months+=direction*other._months;return duration._bubble();}// supports only 2.0-style add(1, 's') or add(duration)\nfunction add$1(input,value){return addSubtract$1(this,input,value,1);}// supports only 2.0-style subtract(1, 's') or subtract(duration)\nfunction subtract$1(input,value){return addSubtract$1(this,input,value,-1);}function absCeil(number){if(number<0){return Math.floor(number);}else{return Math.ceil(number);}}function bubble(){var milliseconds=this._milliseconds,days=this._days,months=this._months,data=this._data,seconds,minutes,hours,years,monthsFromDays;// if we have a mix of positive and negative values, bubble down first\n// check: https://github.com/moment/moment/issues/2166\nif(!(milliseconds>=0&&days>=0&&months>=0||milliseconds<=0&&days<=0&&months<=0)){milliseconds+=absCeil(monthsToDays(months)+days)*864e5;days=0;months=0;}// The following code bubbles up values, see the tests for\n// examples of what that means.\ndata.milliseconds=milliseconds%1000;seconds=absFloor(milliseconds/1000);data.seconds=seconds%60;minutes=absFloor(seconds/60);data.minutes=minutes%60;hours=absFloor(minutes/60);data.hours=hours%24;days+=absFloor(hours/24);// convert days to months\nmonthsFromDays=absFloor(daysToMonths(days));months+=monthsFromDays;days-=absCeil(monthsToDays(monthsFromDays));// 12 months -> 1 year\nyears=absFloor(months/12);months%=12;data.days=days;data.months=months;data.years=years;return this;}function daysToMonths(days){// 400 years have 146097 days (taking into account leap year rules)\n// 400 years have 12 months === 4800\nreturn days*4800/146097;}function monthsToDays(months){// the reverse of daysToMonths\nreturn months*146097/4800;}function as(units){if(!this.isValid()){return NaN;}var days,months,milliseconds=this._milliseconds;units=normalizeUnits(units);if(units==='month'||units==='quarter'||units==='year'){days=this._days+milliseconds/864e5;months=this._months+daysToMonths(days);switch(units){case'month':return months;case'quarter':return months/3;case'year':return months/12;}}else{// handle milliseconds separately because of floating point math errors (issue #1867)\ndays=this._days+Math.round(monthsToDays(this._months));switch(units){case'week':return days/7+milliseconds/6048e5;case'day':return days+milliseconds/864e5;case'hour':return days*24+milliseconds/36e5;case'minute':return days*1440+milliseconds/6e4;case'second':return days*86400+milliseconds/1000;// Math.floor prevents floating point math errors here\ncase'millisecond':return Math.floor(days*864e5)+milliseconds;default:throw new Error('Unknown unit '+units);}}}// TODO: Use this.as('ms')?\nfunction valueOf$1(){if(!this.isValid()){return NaN;}return this._milliseconds+this._days*864e5+this._months%12*2592e6+toInt(this._months/12)*31536e6;}function makeAs(alias){return function(){return this.as(alias);};}var asMilliseconds=makeAs('ms'),asSeconds=makeAs('s'),asMinutes=makeAs('m'),asHours=makeAs('h'),asDays=makeAs('d'),asWeeks=makeAs('w'),asMonths=makeAs('M'),asQuarters=makeAs('Q'),asYears=makeAs('y');function clone$1(){return createDuration(this);}function get$2(units){units=normalizeUnits(units);return this.isValid()?this[units+'s']():NaN;}function makeGetter(name){return function(){return this.isValid()?this._data[name]:NaN;};}var milliseconds=makeGetter('milliseconds'),seconds=makeGetter('seconds'),minutes=makeGetter('minutes'),hours=makeGetter('hours'),days=makeGetter('days'),months=makeGetter('months'),years=makeGetter('years');function weeks(){return absFloor(this.days()/7);}var round=Math.round,thresholds={ss:44,// a few seconds to seconds\ns:45,// seconds to minute\nm:45,// minutes to hour\nh:22,// hours to day\nd:26,// days to month/week\nw:null,// weeks to month\nM:11// months to year\n};// helper function for moment.fn.from, moment.fn.fromNow, and moment.duration.fn.humanize\nfunction substituteTimeAgo(string,number,withoutSuffix,isFuture,locale){return locale.relativeTime(number||1,!!withoutSuffix,string,isFuture);}function relativeTime$1(posNegDuration,withoutSuffix,thresholds,locale){var duration=createDuration(posNegDuration).abs(),seconds=round(duration.as('s')),minutes=round(duration.as('m')),hours=round(duration.as('h')),days=round(duration.as('d')),months=round(duration.as('M')),weeks=round(duration.as('w')),years=round(duration.as('y')),a=seconds<=thresholds.ss&&['s',seconds]||seconds<thresholds.s&&['ss',seconds]||minutes<=1&&['m']||minutes<thresholds.m&&['mm',minutes]||hours<=1&&['h']||hours<thresholds.h&&['hh',hours]||days<=1&&['d']||days<thresholds.d&&['dd',days];if(thresholds.w!=null){a=a||weeks<=1&&['w']||weeks<thresholds.w&&['ww',weeks];}a=a||months<=1&&['M']||months<thresholds.M&&['MM',months]||years<=1&&['y']||['yy',years];a[2]=withoutSuffix;a[3]=+posNegDuration>0;a[4]=locale;return substituteTimeAgo.apply(null,a);}// This function allows you to set the rounding function for relative time strings\nfunction getSetRelativeTimeRounding(roundingFunction){if(roundingFunction===undefined){return round;}if(typeof roundingFunction==='function'){round=roundingFunction;return true;}return false;}// This function allows you to set a threshold for relative time strings\nfunction getSetRelativeTimeThreshold(threshold,limit){if(thresholds[threshold]===undefined){return false;}if(limit===undefined){return thresholds[threshold];}thresholds[threshold]=limit;if(threshold==='s'){thresholds.ss=limit-1;}return true;}function humanize(argWithSuffix,argThresholds){if(!this.isValid()){return this.localeData().invalidDate();}var withSuffix=false,th=thresholds,locale,output;if(_typeof2(argWithSuffix)==='object'){argThresholds=argWithSuffix;argWithSuffix=false;}if(typeof argWithSuffix==='boolean'){withSuffix=argWithSuffix;}if(_typeof2(argThresholds)==='object'){th=Object.assign({},thresholds,argThresholds);if(argThresholds.s!=null&&argThresholds.ss==null){th.ss=argThresholds.s-1;}}locale=this.localeData();output=relativeTime$1(this,!withSuffix,th,locale);if(withSuffix){output=locale.pastFuture(+this,output);}return locale.postformat(output);}var abs$1=Math.abs;function sign(x){return(x>0)-(x<0)||+x;}function toISOString$1(){// for ISO strings we do not use the normal bubbling rules:\n//  * milliseconds bubble up until they become hours\n//  * days do not bubble at all\n//  * months bubble up until they become years\n// This is because there is no context-free conversion between hours and days\n// (think of clock changes)\n// and also not between days and months (28-31 days per month)\nif(!this.isValid()){return this.localeData().invalidDate();}var seconds=abs$1(this._milliseconds)/1000,days=abs$1(this._days),months=abs$1(this._months),minutes,hours,years,s,total=this.asSeconds(),totalSign,ymSign,daysSign,hmsSign;if(!total){// this is the same as C#'s (Noda) and python (isodate)...\n// but not other JS (goog.date)\nreturn'P0D';}// 3600 seconds -> 60 minutes -> 1 hour\nminutes=absFloor(seconds/60);hours=absFloor(minutes/60);seconds%=60;minutes%=60;// 12 months -> 1 year\nyears=absFloor(months/12);months%=12;// inspired by https://github.com/dordille/moment-isoduration/blob/master/moment.isoduration.js\ns=seconds?seconds.toFixed(3).replace(/\\.?0+$/,''):'';totalSign=total<0?'-':'';ymSign=sign(this._months)!==sign(total)?'-':'';daysSign=sign(this._days)!==sign(total)?'-':'';hmsSign=sign(this._milliseconds)!==sign(total)?'-':'';return totalSign+'P'+(years?ymSign+years+'Y':'')+(months?ymSign+months+'M':'')+(days?daysSign+days+'D':'')+(hours||minutes||seconds?'T':'')+(hours?hmsSign+hours+'H':'')+(minutes?hmsSign+minutes+'M':'')+(seconds?hmsSign+s+'S':'');}var proto$2=Duration.prototype;proto$2.isValid=isValid$1;proto$2.abs=abs;proto$2.add=add$1;proto$2.subtract=subtract$1;proto$2.as=as;proto$2.asMilliseconds=asMilliseconds;proto$2.asSeconds=asSeconds;proto$2.asMinutes=asMinutes;proto$2.asHours=asHours;proto$2.asDays=asDays;proto$2.asWeeks=asWeeks;proto$2.asMonths=asMonths;proto$2.asQuarters=asQuarters;proto$2.asYears=asYears;proto$2.valueOf=valueOf$1;proto$2._bubble=bubble;proto$2.clone=clone$1;proto$2.get=get$2;proto$2.milliseconds=milliseconds;proto$2.seconds=seconds;proto$2.minutes=minutes;proto$2.hours=hours;proto$2.days=days;proto$2.weeks=weeks;proto$2.months=months;proto$2.years=years;proto$2.humanize=humanize;proto$2.toISOString=toISOString$1;proto$2.toString=toISOString$1;proto$2.toJSON=toISOString$1;proto$2.locale=locale;proto$2.localeData=localeData;proto$2.toIsoString=deprecate('toIsoString() is deprecated. Please use toISOString() instead (notice the capitals)',toISOString$1);proto$2.lang=lang;// FORMATTING\naddFormatToken('X',0,0,'unix');addFormatToken('x',0,0,'valueOf');// PARSING\naddRegexToken('x',matchSigned);addRegexToken('X',matchTimestamp);addParseToken('X',function(input,array,config){config._d=new Date(parseFloat(input)*1000);});addParseToken('x',function(input,array,config){config._d=new Date(toInt(input));});//! moment.js\nhooks.version='2.27.0';setHookCallback(createLocal);hooks.fn=proto;hooks.min=min;hooks.max=max;hooks.now=now;hooks.utc=createUTC;hooks.unix=createUnix;hooks.months=listMonths;hooks.isDate=isDate;hooks.locale=getSetGlobalLocale;hooks.invalid=createInvalid;hooks.duration=createDuration;hooks.isMoment=isMoment;hooks.weekdays=listWeekdays;hooks.parseZone=createInZone;hooks.localeData=getLocale;hooks.isDuration=isDuration;hooks.monthsShort=listMonthsShort;hooks.weekdaysMin=listWeekdaysMin;hooks.defineLocale=defineLocale;hooks.updateLocale=updateLocale;hooks.locales=listLocales;hooks.weekdaysShort=listWeekdaysShort;hooks.normalizeUnits=normalizeUnits;hooks.relativeTimeRounding=getSetRelativeTimeRounding;hooks.relativeTimeThreshold=getSetRelativeTimeThreshold;hooks.calendarFormat=getCalendarFormat;hooks.prototype=proto;// currently HTML5 input type only supports 24-hour formats\nhooks.HTML5_FMT={DATETIME_LOCAL:'YYYY-MM-DDTHH:mm',// <input type=\"datetime-local\" />\nDATETIME_LOCAL_SECONDS:'YYYY-MM-DDTHH:mm:ss',// <input type=\"datetime-local\" step=\"1\" />\nDATETIME_LOCAL_MS:'YYYY-MM-DDTHH:mm:ss.SSS',// <input type=\"datetime-local\" step=\"0.001\" />\nDATE:'YYYY-MM-DD',// <input type=\"date\" />\nTIME:'HH:mm',// <input type=\"time\" />\nTIME_SECONDS:'HH:mm:ss',// <input type=\"time\" step=\"1\" />\nTIME_MS:'HH:mm:ss.SSS',// <input type=\"time\" step=\"0.001\" />\nWEEK:'GGGG-[W]WW',// <input type=\"week\" />\nMONTH:'YYYY-MM'// <input type=\"month\" />\n};return hooks;});/* WEBPACK VAR INJECTION */}).call(this,__webpack_require__(\"62e4\")(module));/***/},/***/\"c7aa\":/***/function c7aa(module,exports,__webpack_require__){//! moment.js locale configuration\n//! locale : Hebrew [he]\n//! author : Tomer Cohen : https://github.com/tomer\n//! author : Moshe Simantov : https://github.com/DevelopmentIL\n//! author : Tal Ater : https://github.com/TalAter\n;(function(global,factory){true?factory(__webpack_require__(\"c1df\")):undefined;})(this,function(moment){'use strict';//! moment.js locale configuration\nvar he=moment.defineLocale('he',{months:'ינואר_פברואר_מרץ_אפריל_מאי_יוני_יולי_אוגוסט_ספטמבר_אוקטובר_נובמבר_דצמבר'.split('_'),monthsShort:'ינו׳_פבר׳_מרץ_אפר׳_מאי_יוני_יולי_אוג׳_ספט׳_אוק׳_נוב׳_דצמ׳'.split('_'),weekdays:'ראשון_שני_שלישי_רביעי_חמישי_שישי_שבת'.split('_'),weekdaysShort:'א׳_ב׳_ג׳_ד׳_ה׳_ו׳_ש׳'.split('_'),weekdaysMin:'א_ב_ג_ד_ה_ו_ש'.split('_'),longDateFormat:{LT:'HH:mm',LTS:'HH:mm:ss',L:'DD/MM/YYYY',LL:'D [ב]MMMM YYYY',LLL:'D [ב]MMMM YYYY HH:mm',LLLL:'dddd, D [ב]MMMM YYYY HH:mm',l:'D/M/YYYY',ll:'D MMM YYYY',lll:'D MMM YYYY HH:mm',llll:'ddd, D MMM YYYY HH:mm'},calendar:{sameDay:'[היום ב־]LT',nextDay:'[מחר ב־]LT',nextWeek:'dddd [בשעה] LT',lastDay:'[אתמול ב־]LT',lastWeek:'[ביום] dddd [האחרון בשעה] LT',sameElse:'L'},relativeTime:{future:'בעוד %s',past:'לפני %s',s:'מספר שניות',ss:'%d שניות',m:'דקה',mm:'%d דקות',h:'שעה',hh:function hh(number){if(number===2){return'שעתיים';}return number+' שעות';},d:'יום',dd:function dd(number){if(number===2){return'יומיים';}return number+' ימים';},M:'חודש',MM:function MM(number){if(number===2){return'חודשיים';}return number+' חודשים';},y:'שנה',yy:function yy(number){if(number===2){return'שנתיים';}else if(number%10===0&&number!==10){return number+' שנה';}return number+' שנים';}},meridiemParse:/אחה\"צ|לפנה\"צ|אחרי הצהריים|לפני הצהריים|לפנות בוקר|בבוקר|בערב/i,isPM:function isPM(input){return /^(אחה\"צ|אחרי הצהריים|בערב)$/.test(input);},meridiem:function meridiem(hour,minute,isLower){if(hour<5){return'לפנות בוקר';}else if(hour<10){return'בבוקר';}else if(hour<12){return isLower?'לפנה\"צ':'לפני הצהריים';}else if(hour<18){return isLower?'אחה\"צ':'אחרי הצהריים';}else{return'בערב';}}});return he;});/***/},/***/\"c8f3\":/***/function c8f3(module,exports,__webpack_require__){//! moment.js locale configuration\n//! locale : Albanian [sq]\n//! author : Flakërim Ismani : https://github.com/flakerimi\n//! author : Menelion Elensúle : https://github.com/Oire\n//! author : Oerd Cukalla : https://github.com/oerd\n;(function(global,factory){true?factory(__webpack_require__(\"c1df\")):undefined;})(this,function(moment){'use strict';//! moment.js locale configuration\nvar sq=moment.defineLocale('sq',{months:'Janar_Shkurt_Mars_Prill_Maj_Qershor_Korrik_Gusht_Shtator_Tetor_Nëntor_Dhjetor'.split('_'),monthsShort:'Jan_Shk_Mar_Pri_Maj_Qer_Kor_Gus_Sht_Tet_Nën_Dhj'.split('_'),weekdays:'E Diel_E Hënë_E Martë_E Mërkurë_E Enjte_E Premte_E Shtunë'.split('_'),weekdaysShort:'Die_Hën_Mar_Mër_Enj_Pre_Sht'.split('_'),weekdaysMin:'D_H_Ma_Më_E_P_Sh'.split('_'),weekdaysParseExact:true,meridiemParse:/PD|MD/,isPM:function isPM(input){return input.charAt(0)==='M';},meridiem:function meridiem(hours,minutes,isLower){return hours<12?'PD':'MD';},longDateFormat:{LT:'HH:mm',LTS:'HH:mm:ss',L:'DD/MM/YYYY',LL:'D MMMM YYYY',LLL:'D MMMM YYYY HH:mm',LLLL:'dddd, D MMMM YYYY HH:mm'},calendar:{sameDay:'[Sot në] LT',nextDay:'[Nesër në] LT',nextWeek:'dddd [në] LT',lastDay:'[Dje në] LT',lastWeek:'dddd [e kaluar në] LT',sameElse:'L'},relativeTime:{future:'në %s',past:'%s më parë',s:'disa sekonda',ss:'%d sekonda',m:'një minutë',mm:'%d minuta',h:'një orë',hh:'%d orë',d:'një ditë',dd:'%d ditë',M:'një muaj',MM:'%d muaj',y:'një vit',yy:'%d vite'},dayOfMonthOrdinalParse:/\\d{1,2}\\./,ordinal:'%d.',week:{dow:1,// Monday is the first day of the week.\ndoy:4// The week that contains Jan 4th is the first week of the year.\n}});return sq;});/***/},/***/\"cf1e\":/***/function cf1e(module,exports,__webpack_require__){//! moment.js locale configuration\n//! locale : Serbian [sr]\n//! author : Milan Janačković<milanjanackovic@gmail.com> : https://github.com/milan-j\n;(function(global,factory){true?factory(__webpack_require__(\"c1df\")):undefined;})(this,function(moment){'use strict';//! moment.js locale configuration\nvar translator={words:{//Different grammatical cases\nss:['sekunda','sekunde','sekundi'],m:['jedan minut','jedne minute'],mm:['minut','minute','minuta'],h:['jedan sat','jednog sata'],hh:['sat','sata','sati'],dd:['dan','dana','dana'],MM:['mesec','meseca','meseci'],yy:['godina','godine','godina']},correctGrammaticalCase:function correctGrammaticalCase(number,wordKey){return number===1?wordKey[0]:number>=2&&number<=4?wordKey[1]:wordKey[2];},translate:function translate(number,withoutSuffix,key){var wordKey=translator.words[key];if(key.length===1){return withoutSuffix?wordKey[0]:wordKey[1];}else{return number+' '+translator.correctGrammaticalCase(number,wordKey);}}};var sr=moment.defineLocale('sr',{months:'januar_februar_mart_april_maj_jun_jul_avgust_septembar_oktobar_novembar_decembar'.split('_'),monthsShort:'jan._feb._mar._apr._maj_jun_jul_avg._sep._okt._nov._dec.'.split('_'),monthsParseExact:true,weekdays:'nedelja_ponedeljak_utorak_sreda_četvrtak_petak_subota'.split('_'),weekdaysShort:'ned._pon._uto._sre._čet._pet._sub.'.split('_'),weekdaysMin:'ne_po_ut_sr_če_pe_su'.split('_'),weekdaysParseExact:true,longDateFormat:{LT:'H:mm',LTS:'H:mm:ss',L:'DD.MM.YYYY',LL:'D. MMMM YYYY',LLL:'D. MMMM YYYY H:mm',LLLL:'dddd, D. MMMM YYYY H:mm'},calendar:{sameDay:'[danas u] LT',nextDay:'[sutra u] LT',nextWeek:function nextWeek(){switch(this.day()){case 0:return'[u] [nedelju] [u] LT';case 3:return'[u] [sredu] [u] LT';case 6:return'[u] [subotu] [u] LT';case 1:case 2:case 4:case 5:return'[u] dddd [u] LT';}},lastDay:'[juče u] LT',lastWeek:function lastWeek(){var lastWeekDays=['[prošle] [nedelje] [u] LT','[prošlog] [ponedeljka] [u] LT','[prošlog] [utorka] [u] LT','[prošle] [srede] [u] LT','[prošlog] [četvrtka] [u] LT','[prošlog] [petka] [u] LT','[prošle] [subote] [u] LT'];return lastWeekDays[this.day()];},sameElse:'L'},relativeTime:{future:'za %s',past:'pre %s',s:'nekoliko sekundi',ss:translator.translate,m:translator.translate,mm:translator.translate,h:translator.translate,hh:translator.translate,d:'dan',dd:translator.translate,M:'mesec',MM:translator.translate,y:'godinu',yy:translator.translate},dayOfMonthOrdinalParse:/\\d{1,2}\\./,ordinal:'%d.',week:{dow:1,// Monday is the first day of the week.\ndoy:7// The week that contains Jan 7th is the first week of the year.\n}});return sr;});/***/},/***/\"cf51\":/***/function cf51(module,exports,__webpack_require__){//! moment.js locale configuration\n//! locale : Talossan [tzl]\n//! author : Robin van der Vliet : https://github.com/robin0van0der0v\n//! author : Iustì Canun\n;(function(global,factory){true?factory(__webpack_require__(\"c1df\")):undefined;})(this,function(moment){'use strict';//! moment.js locale configuration\n// After the year there should be a slash and the amount of years since December 26, 1979 in Roman numerals.\n// This is currently too difficult (maybe even impossible) to add.\nvar tzl=moment.defineLocale('tzl',{months:'Januar_Fevraglh_Març_Avrïu_Mai_Gün_Julia_Guscht_Setemvar_Listopäts_Noemvar_Zecemvar'.split('_'),monthsShort:'Jan_Fev_Mar_Avr_Mai_Gün_Jul_Gus_Set_Lis_Noe_Zec'.split('_'),weekdays:'Súladi_Lúneçi_Maitzi_Márcuri_Xhúadi_Viénerçi_Sáturi'.split('_'),weekdaysShort:'Súl_Lún_Mai_Már_Xhú_Vié_Sát'.split('_'),weekdaysMin:'Sú_Lú_Ma_Má_Xh_Vi_Sá'.split('_'),longDateFormat:{LT:'HH.mm',LTS:'HH.mm.ss',L:'DD.MM.YYYY',LL:'D. MMMM [dallas] YYYY',LLL:'D. MMMM [dallas] YYYY HH.mm',LLLL:'dddd, [li] D. MMMM [dallas] YYYY HH.mm'},meridiemParse:/d\\'o|d\\'a/i,isPM:function isPM(input){return\"d'o\"===input.toLowerCase();},meridiem:function meridiem(hours,minutes,isLower){if(hours>11){return isLower?\"d'o\":\"D'O\";}else{return isLower?\"d'a\":\"D'A\";}},calendar:{sameDay:'[oxhi à] LT',nextDay:'[demà à] LT',nextWeek:'dddd [à] LT',lastDay:'[ieiri à] LT',lastWeek:'[sür el] dddd [lasteu à] LT',sameElse:'L'},relativeTime:{future:'osprei %s',past:'ja%s',s:processRelativeTime,ss:processRelativeTime,m:processRelativeTime,mm:processRelativeTime,h:processRelativeTime,hh:processRelativeTime,d:processRelativeTime,dd:processRelativeTime,M:processRelativeTime,MM:processRelativeTime,y:processRelativeTime,yy:processRelativeTime},dayOfMonthOrdinalParse:/\\d{1,2}\\./,ordinal:'%d.',week:{dow:1,// Monday is the first day of the week.\ndoy:4// The week that contains Jan 4th is the first week of the year.\n}});function processRelativeTime(number,withoutSuffix,key,isFuture){var format={s:['viensas secunds',\"'iensas secunds\"],ss:[number+' secunds',''+number+' secunds'],m:[\"'n míut\",\"'iens míut\"],mm:[number+' míuts',''+number+' míuts'],h:[\"'n þora\",\"'iensa þora\"],hh:[number+' þoras',''+number+' þoras'],d:[\"'n ziua\",\"'iensa ziua\"],dd:[number+' ziuas',''+number+' ziuas'],M:[\"'n mes\",\"'iens mes\"],MM:[number+' mesen',''+number+' mesen'],y:[\"'n ar\",\"'iens ar\"],yy:[number+' ars',''+number+' ars']};return isFuture?format[key][0]:withoutSuffix?format[key][0]:format[key][1];}return tzl;});/***/},/***/\"cf75\":/***/function cf75(module,exports,__webpack_require__){//! moment.js locale configuration\n//! locale : Klingon [tlh]\n//! author : Dominika Kruk : https://github.com/amaranthrose\n;(function(global,factory){true?factory(__webpack_require__(\"c1df\")):undefined;})(this,function(moment){'use strict';//! moment.js locale configuration\nvar numbersNouns='pagh_wa’_cha’_wej_loS_vagh_jav_Soch_chorgh_Hut'.split('_');function translateFuture(output){var time=output;time=output.indexOf('jaj')!==-1?time.slice(0,-3)+'leS':output.indexOf('jar')!==-1?time.slice(0,-3)+'waQ':output.indexOf('DIS')!==-1?time.slice(0,-3)+'nem':time+' pIq';return time;}function translatePast(output){var time=output;time=output.indexOf('jaj')!==-1?time.slice(0,-3)+'Hu’':output.indexOf('jar')!==-1?time.slice(0,-3)+'wen':output.indexOf('DIS')!==-1?time.slice(0,-3)+'ben':time+' ret';return time;}function translate(number,withoutSuffix,string,isFuture){var numberNoun=numberAsNoun(number);switch(string){case'ss':return numberNoun+' lup';case'mm':return numberNoun+' tup';case'hh':return numberNoun+' rep';case'dd':return numberNoun+' jaj';case'MM':return numberNoun+' jar';case'yy':return numberNoun+' DIS';}}function numberAsNoun(number){var hundred=Math.floor(number%1000/100),ten=Math.floor(number%100/10),one=number%10,word='';if(hundred>0){word+=numbersNouns[hundred]+'vatlh';}if(ten>0){word+=(word!==''?' ':'')+numbersNouns[ten]+'maH';}if(one>0){word+=(word!==''?' ':'')+numbersNouns[one];}return word===''?'pagh':word;}var tlh=moment.defineLocale('tlh',{months:'tera’ jar wa’_tera’ jar cha’_tera’ jar wej_tera’ jar loS_tera’ jar vagh_tera’ jar jav_tera’ jar Soch_tera’ jar chorgh_tera’ jar Hut_tera’ jar wa’maH_tera’ jar wa’maH wa’_tera’ jar wa’maH cha’'.split('_'),monthsShort:'jar wa’_jar cha’_jar wej_jar loS_jar vagh_jar jav_jar Soch_jar chorgh_jar Hut_jar wa’maH_jar wa’maH wa’_jar wa’maH cha’'.split('_'),monthsParseExact:true,weekdays:'lojmItjaj_DaSjaj_povjaj_ghItlhjaj_loghjaj_buqjaj_ghInjaj'.split('_'),weekdaysShort:'lojmItjaj_DaSjaj_povjaj_ghItlhjaj_loghjaj_buqjaj_ghInjaj'.split('_'),weekdaysMin:'lojmItjaj_DaSjaj_povjaj_ghItlhjaj_loghjaj_buqjaj_ghInjaj'.split('_'),longDateFormat:{LT:'HH:mm',LTS:'HH:mm:ss',L:'DD.MM.YYYY',LL:'D MMMM YYYY',LLL:'D MMMM YYYY HH:mm',LLLL:'dddd, D MMMM YYYY HH:mm'},calendar:{sameDay:'[DaHjaj] LT',nextDay:'[wa’leS] LT',nextWeek:'LLL',lastDay:'[wa’Hu’] LT',lastWeek:'LLL',sameElse:'L'},relativeTime:{future:translateFuture,past:translatePast,s:'puS lup',ss:translate,m:'wa’ tup',mm:translate,h:'wa’ rep',hh:translate,d:'wa’ jaj',dd:translate,M:'wa’ jar',MM:translate,y:'wa’ DIS',yy:translate},dayOfMonthOrdinalParse:/\\d{1,2}\\./,ordinal:'%d.',week:{dow:1,// Monday is the first day of the week.\ndoy:4// The week that contains Jan 4th is the first week of the year.\n}});return tlh;});/***/},/***/\"d26a\":/***/function d26a(module,exports,__webpack_require__){//! moment.js locale configuration\n//! locale : Tibetan [bo]\n//! author : Thupten N. Chakrishar : https://github.com/vajradog\n;(function(global,factory){true?factory(__webpack_require__(\"c1df\")):undefined;})(this,function(moment){'use strict';//! moment.js locale configuration\nvar symbolMap={'1':'༡','2':'༢','3':'༣','4':'༤','5':'༥','6':'༦','7':'༧','8':'༨','9':'༩','0':'༠'},numberMap={'༡':'1','༢':'2','༣':'3','༤':'4','༥':'5','༦':'6','༧':'7','༨':'8','༩':'9','༠':'0'};var bo=moment.defineLocale('bo',{months:'ཟླ་བ་དང་པོ_ཟླ་བ་གཉིས་པ_ཟླ་བ་གསུམ་པ_ཟླ་བ་བཞི་པ_ཟླ་བ་ལྔ་པ_ཟླ་བ་དྲུག་པ_ཟླ་བ་བདུན་པ_ཟླ་བ་བརྒྱད་པ_ཟླ་བ་དགུ་པ_ཟླ་བ་བཅུ་པ_ཟླ་བ་བཅུ་གཅིག་པ_ཟླ་བ་བཅུ་གཉིས་པ'.split('_'),monthsShort:'ཟླ་1_ཟླ་2_ཟླ་3_ཟླ་4_ཟླ་5_ཟླ་6_ཟླ་7_ཟླ་8_ཟླ་9_ཟླ་10_ཟླ་11_ཟླ་12'.split('_'),monthsShortRegex:/^(ཟླ་\\d{1,2})/,monthsParseExact:true,weekdays:'གཟའ་ཉི་མ་_གཟའ་ཟླ་བ་_གཟའ་མིག་དམར་_གཟའ་ལྷག་པ་_གཟའ་ཕུར་བུ_གཟའ་པ་སངས་_གཟའ་སྤེན་པ་'.split('_'),weekdaysShort:'ཉི་མ་_ཟླ་བ་_མིག་དམར་_ལྷག་པ་_ཕུར་བུ_པ་སངས་_སྤེན་པ་'.split('_'),weekdaysMin:'ཉི_ཟླ_མིག_ལྷག_ཕུར_སངས_སྤེན'.split('_'),longDateFormat:{LT:'A h:mm',LTS:'A h:mm:ss',L:'DD/MM/YYYY',LL:'D MMMM YYYY',LLL:'D MMMM YYYY, A h:mm',LLLL:'dddd, D MMMM YYYY, A h:mm'},calendar:{sameDay:'[དི་རིང] LT',nextDay:'[སང་ཉིན] LT',nextWeek:'[བདུན་ཕྲག་རྗེས་མ], LT',lastDay:'[ཁ་སང] LT',lastWeek:'[བདུན་ཕྲག་མཐའ་མ] dddd, LT',sameElse:'L'},relativeTime:{future:'%s ལ་',past:'%s སྔན་ལ',s:'ལམ་སང',ss:'%d སྐར་ཆ།',m:'སྐར་མ་གཅིག',mm:'%d སྐར་མ',h:'ཆུ་ཚོད་གཅིག',hh:'%d ཆུ་ཚོད',d:'ཉིན་གཅིག',dd:'%d ཉིན་',M:'ཟླ་བ་གཅིག',MM:'%d ཟླ་བ',y:'ལོ་གཅིག',yy:'%d ལོ'},preparse:function preparse(string){return string.replace(/[༡༢༣༤༥༦༧༨༩༠]/g,function(match){return numberMap[match];});},postformat:function postformat(string){return string.replace(/\\d/g,function(match){return symbolMap[match];});},meridiemParse:/མཚན་མོ|ཞོགས་ཀས|ཉིན་གུང|དགོང་དག|མཚན་མོ/,meridiemHour:function meridiemHour(hour,meridiem){if(hour===12){hour=0;}if(meridiem==='མཚན་མོ'&&hour>=4||meridiem==='ཉིན་གུང'&&hour<5||meridiem==='དགོང་དག'){return hour+12;}else{return hour;}},meridiem:function meridiem(hour,minute,isLower){if(hour<4){return'མཚན་མོ';}else if(hour<10){return'ཞོགས་ཀས';}else if(hour<17){return'ཉིན་གུང';}else if(hour<20){return'དགོང་དག';}else{return'མཚན་མོ';}},week:{dow:0,// Sunday is the first day of the week.\ndoy:6// The week that contains Jan 6th is the first week of the year.\n}});return bo;});/***/},/***/\"d2d4\":/***/function d2d4(module,exports,__webpack_require__){//! moment.js locale configuration\n//! locale : Portuguese (Brazil) [pt-br]\n//! author : Caio Ribeiro Pereira : https://github.com/caio-ribeiro-pereira\n;(function(global,factory){true?factory(__webpack_require__(\"c1df\")):undefined;})(this,function(moment){'use strict';//! moment.js locale configuration\nvar ptBr=moment.defineLocale('pt-br',{months:'janeiro_fevereiro_março_abril_maio_junho_julho_agosto_setembro_outubro_novembro_dezembro'.split('_'),monthsShort:'jan_fev_mar_abr_mai_jun_jul_ago_set_out_nov_dez'.split('_'),weekdays:'domingo_segunda-feira_terça-feira_quarta-feira_quinta-feira_sexta-feira_sábado'.split('_'),weekdaysShort:'dom_seg_ter_qua_qui_sex_sáb'.split('_'),weekdaysMin:'do_2ª_3ª_4ª_5ª_6ª_sá'.split('_'),weekdaysParseExact:true,longDateFormat:{LT:'HH:mm',LTS:'HH:mm:ss',L:'DD/MM/YYYY',LL:'D [de] MMMM [de] YYYY',LLL:'D [de] MMMM [de] YYYY [às] HH:mm',LLLL:'dddd, D [de] MMMM [de] YYYY [às] HH:mm'},calendar:{sameDay:'[Hoje às] LT',nextDay:'[Amanhã às] LT',nextWeek:'dddd [às] LT',lastDay:'[Ontem às] LT',lastWeek:function lastWeek(){return this.day()===0||this.day()===6?'[Último] dddd [às] LT'// Saturday + Sunday\n:'[Última] dddd [às] LT';// Monday - Friday\n},sameElse:'L'},relativeTime:{future:'em %s',past:'há %s',s:'poucos segundos',ss:'%d segundos',m:'um minuto',mm:'%d minutos',h:'uma hora',hh:'%d horas',d:'um dia',dd:'%d dias',M:'um mês',MM:'%d meses',y:'um ano',yy:'%d anos'},dayOfMonthOrdinalParse:/\\d{1,2}º/,ordinal:'%dº'});return ptBr;});/***/},/***/\"d69a\":/***/function d69a(module,exports,__webpack_require__){//! moment.js locale configuration\n//! locale : Filipino [fil]\n//! author : Dan Hagman : https://github.com/hagmandan\n//! author : Matthew Co : https://github.com/matthewdeeco\n;(function(global,factory){true?factory(__webpack_require__(\"c1df\")):undefined;})(this,function(moment){'use strict';//! moment.js locale configuration\nvar fil=moment.defineLocale('fil',{months:'Enero_Pebrero_Marso_Abril_Mayo_Hunyo_Hulyo_Agosto_Setyembre_Oktubre_Nobyembre_Disyembre'.split('_'),monthsShort:'Ene_Peb_Mar_Abr_May_Hun_Hul_Ago_Set_Okt_Nob_Dis'.split('_'),weekdays:'Linggo_Lunes_Martes_Miyerkules_Huwebes_Biyernes_Sabado'.split('_'),weekdaysShort:'Lin_Lun_Mar_Miy_Huw_Biy_Sab'.split('_'),weekdaysMin:'Li_Lu_Ma_Mi_Hu_Bi_Sab'.split('_'),longDateFormat:{LT:'HH:mm',LTS:'HH:mm:ss',L:'MM/D/YYYY',LL:'MMMM D, YYYY',LLL:'MMMM D, YYYY HH:mm',LLLL:'dddd, MMMM DD, YYYY HH:mm'},calendar:{sameDay:'LT [ngayong araw]',nextDay:'[Bukas ng] LT',nextWeek:'LT [sa susunod na] dddd',lastDay:'LT [kahapon]',lastWeek:'LT [noong nakaraang] dddd',sameElse:'L'},relativeTime:{future:'sa loob ng %s',past:'%s ang nakalipas',s:'ilang segundo',ss:'%d segundo',m:'isang minuto',mm:'%d minuto',h:'isang oras',hh:'%d oras',d:'isang araw',dd:'%d araw',M:'isang buwan',MM:'%d buwan',y:'isang taon',yy:'%d taon'},dayOfMonthOrdinalParse:/\\d{1,2}/,ordinal:function ordinal(number){return number;},week:{dow:1,// Monday is the first day of the week.\ndoy:4// The week that contains Jan 4th is the first week of the year.\n}});return fil;});/***/},/***/\"d6b6\":/***/function d6b6(module,exports,__webpack_require__){//! moment.js locale configuration\n//! locale : Armenian [hy-am]\n//! author : Armendarabyan : https://github.com/armendarabyan\n;(function(global,factory){true?factory(__webpack_require__(\"c1df\")):undefined;})(this,function(moment){'use strict';//! moment.js locale configuration\nvar hyAm=moment.defineLocale('hy-am',{months:{format:'հունվարի_փետրվարի_մարտի_ապրիլի_մայիսի_հունիսի_հուլիսի_օգոստոսի_սեպտեմբերի_հոկտեմբերի_նոյեմբերի_դեկտեմբերի'.split('_'),standalone:'հունվար_փետրվար_մարտ_ապրիլ_մայիս_հունիս_հուլիս_օգոստոս_սեպտեմբեր_հոկտեմբեր_նոյեմբեր_դեկտեմբեր'.split('_')},monthsShort:'հնվ_փտր_մրտ_ապր_մյս_հնս_հլս_օգս_սպտ_հկտ_նմբ_դկտ'.split('_'),weekdays:'կիրակի_երկուշաբթի_երեքշաբթի_չորեքշաբթի_հինգշաբթի_ուրբաթ_շաբաթ'.split('_'),weekdaysShort:'կրկ_երկ_երք_չրք_հնգ_ուրբ_շբթ'.split('_'),weekdaysMin:'կրկ_երկ_երք_չրք_հնգ_ուրբ_շբթ'.split('_'),longDateFormat:{LT:'HH:mm',LTS:'HH:mm:ss',L:'DD.MM.YYYY',LL:'D MMMM YYYY թ.',LLL:'D MMMM YYYY թ., HH:mm',LLLL:'dddd, D MMMM YYYY թ., HH:mm'},calendar:{sameDay:'[այսօր] LT',nextDay:'[վաղը] LT',lastDay:'[երեկ] LT',nextWeek:function nextWeek(){return'dddd [օրը ժամը] LT';},lastWeek:function lastWeek(){return'[անցած] dddd [օրը ժամը] LT';},sameElse:'L'},relativeTime:{future:'%s հետո',past:'%s առաջ',s:'մի քանի վայրկյան',ss:'%d վայրկյան',m:'րոպե',mm:'%d րոպե',h:'ժամ',hh:'%d ժամ',d:'օր',dd:'%d օր',M:'ամիս',MM:'%d ամիս',y:'տարի',yy:'%d տարի'},meridiemParse:/գիշերվա|առավոտվա|ցերեկվա|երեկոյան/,isPM:function isPM(input){return /^(ցերեկվա|երեկոյան)$/.test(input);},meridiem:function meridiem(hour){if(hour<4){return'գիշերվա';}else if(hour<12){return'առավոտվա';}else if(hour<17){return'ցերեկվա';}else{return'երեկոյան';}},dayOfMonthOrdinalParse:/\\d{1,2}|\\d{1,2}-(ին|րդ)/,ordinal:function ordinal(number,period){switch(period){case'DDD':case'w':case'W':case'DDDo':if(number===1){return number+'-ին';}return number+'-րդ';default:return number;}},week:{dow:1,// Monday is the first day of the week.\ndoy:7// The week that contains Jan 7th is the first week of the year.\n}});return hyAm;});/***/},/***/\"d716\":/***/function d716(module,exports,__webpack_require__){//! moment.js locale configuration\n//! locale : Catalan [ca]\n//! author : Juan G. Hurtado : https://github.com/juanghurtado\n;(function(global,factory){true?factory(__webpack_require__(\"c1df\")):undefined;})(this,function(moment){'use strict';//! moment.js locale configuration\nvar ca=moment.defineLocale('ca',{months:{standalone:'gener_febrer_març_abril_maig_juny_juliol_agost_setembre_octubre_novembre_desembre'.split('_'),format:\"de gener_de febrer_de març_d'abril_de maig_de juny_de juliol_d'agost_de setembre_d'octubre_de novembre_de desembre\".split('_'),isFormat:/D[oD]?(\\s)+MMMM/},monthsShort:'gen._febr._març_abr._maig_juny_jul._ag._set._oct._nov._des.'.split('_'),monthsParseExact:true,weekdays:'diumenge_dilluns_dimarts_dimecres_dijous_divendres_dissabte'.split('_'),weekdaysShort:'dg._dl._dt._dc._dj._dv._ds.'.split('_'),weekdaysMin:'dg_dl_dt_dc_dj_dv_ds'.split('_'),weekdaysParseExact:true,longDateFormat:{LT:'H:mm',LTS:'H:mm:ss',L:'DD/MM/YYYY',LL:'D MMMM [de] YYYY',ll:'D MMM YYYY',LLL:'D MMMM [de] YYYY [a les] H:mm',lll:'D MMM YYYY, H:mm',LLLL:'dddd D MMMM [de] YYYY [a les] H:mm',llll:'ddd D MMM YYYY, H:mm'},calendar:{sameDay:function sameDay(){return'[avui a '+(this.hours()!==1?'les':'la')+'] LT';},nextDay:function nextDay(){return'[demà a '+(this.hours()!==1?'les':'la')+'] LT';},nextWeek:function nextWeek(){return'dddd [a '+(this.hours()!==1?'les':'la')+'] LT';},lastDay:function lastDay(){return'[ahir a '+(this.hours()!==1?'les':'la')+'] LT';},lastWeek:function lastWeek(){return'[el] dddd [passat a '+(this.hours()!==1?'les':'la')+'] LT';},sameElse:'L'},relativeTime:{future:\"d'aquí %s\",past:'fa %s',s:'uns segons',ss:'%d segons',m:'un minut',mm:'%d minuts',h:'una hora',hh:'%d hores',d:'un dia',dd:'%d dies',M:'un mes',MM:'%d mesos',y:'un any',yy:'%d anys'},dayOfMonthOrdinalParse:/\\d{1,2}(r|n|t|è|a)/,ordinal:function ordinal(number,period){var output=number===1?'r':number===2?'n':number===3?'r':number===4?'t':'è';if(period==='w'||period==='W'){output='a';}return number+output;},week:{dow:1,// Monday is the first day of the week.\ndoy:4// The week that contains Jan 4th is the first week of the year.\n}});return ca;});/***/},/***/\"d9f8\":/***/function d9f8(module,exports,__webpack_require__){//! moment.js locale configuration\n//! locale : French (Canada) [fr-ca]\n//! author : Jonathan Abourbih : https://github.com/jonbca\n;(function(global,factory){true?factory(__webpack_require__(\"c1df\")):undefined;})(this,function(moment){'use strict';//! moment.js locale configuration\nvar frCa=moment.defineLocale('fr-ca',{months:'janvier_février_mars_avril_mai_juin_juillet_août_septembre_octobre_novembre_décembre'.split('_'),monthsShort:'janv._févr._mars_avr._mai_juin_juil._août_sept._oct._nov._déc.'.split('_'),monthsParseExact:true,weekdays:'dimanche_lundi_mardi_mercredi_jeudi_vendredi_samedi'.split('_'),weekdaysShort:'dim._lun._mar._mer._jeu._ven._sam.'.split('_'),weekdaysMin:'di_lu_ma_me_je_ve_sa'.split('_'),weekdaysParseExact:true,longDateFormat:{LT:'HH:mm',LTS:'HH:mm:ss',L:'YYYY-MM-DD',LL:'D MMMM YYYY',LLL:'D MMMM YYYY HH:mm',LLLL:'dddd D MMMM YYYY HH:mm'},calendar:{sameDay:'[Aujourd’hui à] LT',nextDay:'[Demain à] LT',nextWeek:'dddd [à] LT',lastDay:'[Hier à] LT',lastWeek:'dddd [dernier à] LT',sameElse:'L'},relativeTime:{future:'dans %s',past:'il y a %s',s:'quelques secondes',ss:'%d secondes',m:'une minute',mm:'%d minutes',h:'une heure',hh:'%d heures',d:'un jour',dd:'%d jours',M:'un mois',MM:'%d mois',y:'un an',yy:'%d ans'},dayOfMonthOrdinalParse:/\\d{1,2}(er|e)/,ordinal:function ordinal(number,period){switch(period){// Words with masculine grammatical gender: mois, trimestre, jour\ndefault:case'M':case'Q':case'D':case'DDD':case'd':return number+(number===1?'er':'e');// Words with feminine grammatical gender: semaine\ncase'w':case'W':return number+(number===1?'re':'e');}}});return frCa;});/***/},/***/\"db29\":/***/function db29(module,exports,__webpack_require__){//! moment.js locale configuration\n//! locale : Dutch (Belgium) [nl-be]\n//! author : Joris Röling : https://github.com/jorisroling\n//! author : Jacob Middag : https://github.com/middagj\n;(function(global,factory){true?factory(__webpack_require__(\"c1df\")):undefined;})(this,function(moment){'use strict';//! moment.js locale configuration\nvar monthsShortWithDots='jan._feb._mrt._apr._mei_jun._jul._aug._sep._okt._nov._dec.'.split('_'),monthsShortWithoutDots='jan_feb_mrt_apr_mei_jun_jul_aug_sep_okt_nov_dec'.split('_'),monthsParse=[/^jan/i,/^feb/i,/^maart|mrt.?$/i,/^apr/i,/^mei$/i,/^jun[i.]?$/i,/^jul[i.]?$/i,/^aug/i,/^sep/i,/^okt/i,/^nov/i,/^dec/i],monthsRegex=/^(januari|februari|maart|april|mei|ju[nl]i|augustus|september|oktober|november|december|jan\\.?|feb\\.?|mrt\\.?|apr\\.?|ju[nl]\\.?|aug\\.?|sep\\.?|okt\\.?|nov\\.?|dec\\.?)/i;var nlBe=moment.defineLocale('nl-be',{months:'januari_februari_maart_april_mei_juni_juli_augustus_september_oktober_november_december'.split('_'),monthsShort:function monthsShort(m,format){if(!m){return monthsShortWithDots;}else if(/-MMM-/.test(format)){return monthsShortWithoutDots[m.month()];}else{return monthsShortWithDots[m.month()];}},monthsRegex:monthsRegex,monthsShortRegex:monthsRegex,monthsStrictRegex:/^(januari|februari|maart|april|mei|ju[nl]i|augustus|september|oktober|november|december)/i,monthsShortStrictRegex:/^(jan\\.?|feb\\.?|mrt\\.?|apr\\.?|mei|ju[nl]\\.?|aug\\.?|sep\\.?|okt\\.?|nov\\.?|dec\\.?)/i,monthsParse:monthsParse,longMonthsParse:monthsParse,shortMonthsParse:monthsParse,weekdays:'zondag_maandag_dinsdag_woensdag_donderdag_vrijdag_zaterdag'.split('_'),weekdaysShort:'zo._ma._di._wo._do._vr._za.'.split('_'),weekdaysMin:'zo_ma_di_wo_do_vr_za'.split('_'),weekdaysParseExact:true,longDateFormat:{LT:'HH:mm',LTS:'HH:mm:ss',L:'DD/MM/YYYY',LL:'D MMMM YYYY',LLL:'D MMMM YYYY HH:mm',LLLL:'dddd D MMMM YYYY HH:mm'},calendar:{sameDay:'[vandaag om] LT',nextDay:'[morgen om] LT',nextWeek:'dddd [om] LT',lastDay:'[gisteren om] LT',lastWeek:'[afgelopen] dddd [om] LT',sameElse:'L'},relativeTime:{future:'over %s',past:'%s geleden',s:'een paar seconden',ss:'%d seconden',m:'één minuut',mm:'%d minuten',h:'één uur',hh:'%d uur',d:'één dag',dd:'%d dagen',M:'één maand',MM:'%d maanden',y:'één jaar',yy:'%d jaar'},dayOfMonthOrdinalParse:/\\d{1,2}(ste|de)/,ordinal:function ordinal(number){return number+(number===1||number===8||number>=20?'ste':'de');},week:{dow:1,// Monday is the first day of the week.\ndoy:4// The week that contains Jan 4th is the first week of the year.\n}});return nlBe;});/***/},/***/\"dc4d\":/***/function dc4d(module,exports,__webpack_require__){//! moment.js locale configuration\n//! locale : Hindi [hi]\n//! author : Mayank Singhal : https://github.com/mayanksinghal\n;(function(global,factory){true?factory(__webpack_require__(\"c1df\")):undefined;})(this,function(moment){'use strict';//! moment.js locale configuration\nvar symbolMap={'1':'१','2':'२','3':'३','4':'४','5':'५','6':'६','7':'७','8':'८','9':'९','0':'०'},numberMap={'१':'1','२':'2','३':'3','४':'4','५':'5','६':'6','७':'7','८':'8','९':'9','०':'0'};var hi=moment.defineLocale('hi',{months:'जनवरी_फ़रवरी_मार्च_अप्रैल_मई_जून_जुलाई_अगस्त_सितम्बर_अक्टूबर_नवम्बर_दिसम्बर'.split('_'),monthsShort:'जन._फ़र._मार्च_अप्रै._मई_जून_जुल._अग._सित._अक्टू._नव._दिस.'.split('_'),monthsParseExact:true,weekdays:'रविवार_सोमवार_मंगलवार_बुधवार_गुरूवार_शुक्रवार_शनिवार'.split('_'),weekdaysShort:'रवि_सोम_मंगल_बुध_गुरू_शुक्र_शनि'.split('_'),weekdaysMin:'र_सो_मं_बु_गु_शु_श'.split('_'),longDateFormat:{LT:'A h:mm बजे',LTS:'A h:mm:ss बजे',L:'DD/MM/YYYY',LL:'D MMMM YYYY',LLL:'D MMMM YYYY, A h:mm बजे',LLLL:'dddd, D MMMM YYYY, A h:mm बजे'},calendar:{sameDay:'[आज] LT',nextDay:'[कल] LT',nextWeek:'dddd, LT',lastDay:'[कल] LT',lastWeek:'[पिछले] dddd, LT',sameElse:'L'},relativeTime:{future:'%s में',past:'%s पहले',s:'कुछ ही क्षण',ss:'%d सेकंड',m:'एक मिनट',mm:'%d मिनट',h:'एक घंटा',hh:'%d घंटे',d:'एक दिन',dd:'%d दिन',M:'एक महीने',MM:'%d महीने',y:'एक वर्ष',yy:'%d वर्ष'},preparse:function preparse(string){return string.replace(/[१२३४५६७८९०]/g,function(match){return numberMap[match];});},postformat:function postformat(string){return string.replace(/\\d/g,function(match){return symbolMap[match];});},// Hindi notation for meridiems are quite fuzzy in practice. While there exists\n// a rigid notion of a 'Pahar' it is not used as rigidly in modern Hindi.\nmeridiemParse:/रात|सुबह|दोपहर|शाम/,meridiemHour:function meridiemHour(hour,meridiem){if(hour===12){hour=0;}if(meridiem==='रात'){return hour<4?hour:hour+12;}else if(meridiem==='सुबह'){return hour;}else if(meridiem==='दोपहर'){return hour>=10?hour:hour+12;}else if(meridiem==='शाम'){return hour+12;}},meridiem:function meridiem(hour,minute,isLower){if(hour<4){return'रात';}else if(hour<10){return'सुबह';}else if(hour<17){return'दोपहर';}else if(hour<20){return'शाम';}else{return'रात';}},week:{dow:0,// Sunday is the first day of the week.\ndoy:6// The week that contains Jan 6th is the first week of the year.\n}});return hi;});/***/},/***/\"e0c5\":/***/function e0c5(module,exports,__webpack_require__){//! moment.js locale configuration\n//! locale : Gujarati [gu]\n//! author : Kaushik Thanki : https://github.com/Kaushik1987\n;(function(global,factory){true?factory(__webpack_require__(\"c1df\")):undefined;})(this,function(moment){'use strict';//! moment.js locale configuration\nvar symbolMap={'1':'૧','2':'૨','3':'૩','4':'૪','5':'૫','6':'૬','7':'૭','8':'૮','9':'૯','0':'૦'},numberMap={'૧':'1','૨':'2','૩':'3','૪':'4','૫':'5','૬':'6','૭':'7','૮':'8','૯':'9','૦':'0'};var gu=moment.defineLocale('gu',{months:'જાન્યુઆરી_ફેબ્રુઆરી_માર્ચ_એપ્રિલ_મે_જૂન_જુલાઈ_ઑગસ્ટ_સપ્ટેમ્બર_ઑક્ટ્બર_નવેમ્બર_ડિસેમ્બર'.split('_'),monthsShort:'જાન્યુ._ફેબ્રુ._માર્ચ_એપ્રિ._મે_જૂન_જુલા._ઑગ._સપ્ટે._ઑક્ટ્._નવે._ડિસે.'.split('_'),monthsParseExact:true,weekdays:'રવિવાર_સોમવાર_મંગળવાર_બુધ્વાર_ગુરુવાર_શુક્રવાર_શનિવાર'.split('_'),weekdaysShort:'રવિ_સોમ_મંગળ_બુધ્_ગુરુ_શુક્ર_શનિ'.split('_'),weekdaysMin:'ર_સો_મં_બુ_ગુ_શુ_શ'.split('_'),longDateFormat:{LT:'A h:mm વાગ્યે',LTS:'A h:mm:ss વાગ્યે',L:'DD/MM/YYYY',LL:'D MMMM YYYY',LLL:'D MMMM YYYY, A h:mm વાગ્યે',LLLL:'dddd, D MMMM YYYY, A h:mm વાગ્યે'},calendar:{sameDay:'[આજ] LT',nextDay:'[કાલે] LT',nextWeek:'dddd, LT',lastDay:'[ગઇકાલે] LT',lastWeek:'[પાછલા] dddd, LT',sameElse:'L'},relativeTime:{future:'%s મા',past:'%s પહેલા',s:'અમુક પળો',ss:'%d સેકંડ',m:'એક મિનિટ',mm:'%d મિનિટ',h:'એક કલાક',hh:'%d કલાક',d:'એક દિવસ',dd:'%d દિવસ',M:'એક મહિનો',MM:'%d મહિનો',y:'એક વર્ષ',yy:'%d વર્ષ'},preparse:function preparse(string){return string.replace(/[૧૨૩૪૫૬૭૮૯૦]/g,function(match){return numberMap[match];});},postformat:function postformat(string){return string.replace(/\\d/g,function(match){return symbolMap[match];});},// Gujarati notation for meridiems are quite fuzzy in practice. While there exists\n// a rigid notion of a 'Pahar' it is not used as rigidly in modern Gujarati.\nmeridiemParse:/રાત|બપોર|સવાર|સાંજ/,meridiemHour:function meridiemHour(hour,meridiem){if(hour===12){hour=0;}if(meridiem==='રાત'){return hour<4?hour:hour+12;}else if(meridiem==='સવાર'){return hour;}else if(meridiem==='બપોર'){return hour>=10?hour:hour+12;}else if(meridiem==='સાંજ'){return hour+12;}},meridiem:function meridiem(hour,minute,isLower){if(hour<4){return'રાત';}else if(hour<10){return'સવાર';}else if(hour<17){return'બપોર';}else if(hour<20){return'સાંજ';}else{return'રાત';}},week:{dow:0,// Sunday is the first day of the week.\ndoy:6// The week that contains Jan 6th is the first week of the year.\n}});return gu;});/***/},/***/\"e10c\":/***/function e10c(module,exports,__webpack_require__){// style-loader: Adds some css to the DOM by adding a <style> tag\n// load the styles\nvar content=__webpack_require__(\"392c\");if(typeof content==='string')content=[[module.i,content,'']];if(content.locals)module.exports=content.locals;// add the styles to the DOM\nvar add=__webpack_require__(\"499e\")[\"default\"];var update=add(\"0ae97a53\",content,true,{\"sourceMap\":false,\"shadowMode\":false});/***/},/***/\"e1d3\":/***/function e1d3(module,exports,__webpack_require__){//! moment.js locale configuration\n//! locale : English (Ireland) [en-ie]\n//! author : Chris Cartlidge : https://github.com/chriscartlidge\n;(function(global,factory){true?factory(__webpack_require__(\"c1df\")):undefined;})(this,function(moment){'use strict';//! moment.js locale configuration\nvar enIe=moment.defineLocale('en-ie',{months:'January_February_March_April_May_June_July_August_September_October_November_December'.split('_'),monthsShort:'Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec'.split('_'),weekdays:'Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday'.split('_'),weekdaysShort:'Sun_Mon_Tue_Wed_Thu_Fri_Sat'.split('_'),weekdaysMin:'Su_Mo_Tu_We_Th_Fr_Sa'.split('_'),longDateFormat:{LT:'HH:mm',LTS:'HH:mm:ss',L:'DD/MM/YYYY',LL:'D MMMM YYYY',LLL:'D MMMM YYYY HH:mm',LLLL:'dddd D MMMM YYYY HH:mm'},calendar:{sameDay:'[Today at] LT',nextDay:'[Tomorrow at] LT',nextWeek:'dddd [at] LT',lastDay:'[Yesterday at] LT',lastWeek:'[Last] dddd [at] LT',sameElse:'L'},relativeTime:{future:'in %s',past:'%s ago',s:'a few seconds',ss:'%d seconds',m:'a minute',mm:'%d minutes',h:'an hour',hh:'%d hours',d:'a day',dd:'%d days',M:'a month',MM:'%d months',y:'a year',yy:'%d years'},dayOfMonthOrdinalParse:/\\d{1,2}(st|nd|rd|th)/,ordinal:function ordinal(number){var b=number%10,output=~~(number%100/10)===1?'th':b===1?'st':b===2?'nd':b===3?'rd':'th';return number+output;},week:{dow:1,// Monday is the first day of the week.\ndoy:4// The week that contains Jan 4th is the first week of the year.\n}});return enIe;});/***/},/***/\"e81d\":/***/function e81d(module,exports,__webpack_require__){//! moment.js locale configuration\n//! locale : Cambodian [km]\n//! author : Kruy Vanna : https://github.com/kruyvanna\n;(function(global,factory){true?factory(__webpack_require__(\"c1df\")):undefined;})(this,function(moment){'use strict';//! moment.js locale configuration\nvar symbolMap={'1':'១','2':'២','3':'៣','4':'៤','5':'៥','6':'៦','7':'៧','8':'៨','9':'៩','0':'០'},numberMap={'១':'1','២':'2','៣':'3','៤':'4','៥':'5','៦':'6','៧':'7','៨':'8','៩':'9','០':'0'};var km=moment.defineLocale('km',{months:'មករា_កុម្ភៈ_មីនា_មេសា_ឧសភា_មិថុនា_កក្កដា_សីហា_កញ្ញា_តុលា_វិច្ឆិកា_ធ្នូ'.split('_'),monthsShort:'មករា_កុម្ភៈ_មីនា_មេសា_ឧសភា_មិថុនា_កក្កដា_សីហា_កញ្ញា_តុលា_វិច្ឆិកា_ធ្នូ'.split('_'),weekdays:'អាទិត្យ_ច័ន្ទ_អង្គារ_ពុធ_ព្រហស្បតិ៍_សុក្រ_សៅរ៍'.split('_'),weekdaysShort:'អា_ច_អ_ព_ព្រ_សុ_ស'.split('_'),weekdaysMin:'អា_ច_អ_ព_ព្រ_សុ_ស'.split('_'),weekdaysParseExact:true,longDateFormat:{LT:'HH:mm',LTS:'HH:mm:ss',L:'DD/MM/YYYY',LL:'D MMMM YYYY',LLL:'D MMMM YYYY HH:mm',LLLL:'dddd, D MMMM YYYY HH:mm'},meridiemParse:/ព្រឹក|ល្ងាច/,isPM:function isPM(input){return input==='ល្ងាច';},meridiem:function meridiem(hour,minute,isLower){if(hour<12){return'ព្រឹក';}else{return'ល្ងាច';}},calendar:{sameDay:'[ថ្ងៃនេះ ម៉ោង] LT',nextDay:'[ស្អែក ម៉ោង] LT',nextWeek:'dddd [ម៉ោង] LT',lastDay:'[ម្សិលមិញ ម៉ោង] LT',lastWeek:'dddd [សប្តាហ៍មុន] [ម៉ោង] LT',sameElse:'L'},relativeTime:{future:'%sទៀត',past:'%sមុន',s:'ប៉ុន្មានវិនាទី',ss:'%d វិនាទី',m:'មួយនាទី',mm:'%d នាទី',h:'មួយម៉ោង',hh:'%d ម៉ោង',d:'មួយថ្ងៃ',dd:'%d ថ្ងៃ',M:'មួយខែ',MM:'%d ខែ',y:'មួយឆ្នាំ',yy:'%d ឆ្នាំ'},dayOfMonthOrdinalParse:/ទី\\d{1,2}/,ordinal:'ទី%d',preparse:function preparse(string){return string.replace(/[១២៣៤៥៦៧៨៩០]/g,function(match){return numberMap[match];});},postformat:function postformat(string){return string.replace(/\\d/g,function(match){return symbolMap[match];});},week:{dow:1,// Monday is the first day of the week.\ndoy:4// The week that contains Jan 4th is the first week of the year.\n}});return km;});/***/},/***/\"ebe4\":/***/function ebe4(module,exports,__webpack_require__){//! moment.js locale configuration\n//! locale : Malay [ms]\n//! author : Weldan Jamili : https://github.com/weldan\n;(function(global,factory){true?factory(__webpack_require__(\"c1df\")):undefined;})(this,function(moment){'use strict';//! moment.js locale configuration\nvar ms=moment.defineLocale('ms',{months:'Januari_Februari_Mac_April_Mei_Jun_Julai_Ogos_September_Oktober_November_Disember'.split('_'),monthsShort:'Jan_Feb_Mac_Apr_Mei_Jun_Jul_Ogs_Sep_Okt_Nov_Dis'.split('_'),weekdays:'Ahad_Isnin_Selasa_Rabu_Khamis_Jumaat_Sabtu'.split('_'),weekdaysShort:'Ahd_Isn_Sel_Rab_Kha_Jum_Sab'.split('_'),weekdaysMin:'Ah_Is_Sl_Rb_Km_Jm_Sb'.split('_'),longDateFormat:{LT:'HH.mm',LTS:'HH.mm.ss',L:'DD/MM/YYYY',LL:'D MMMM YYYY',LLL:'D MMMM YYYY [pukul] HH.mm',LLLL:'dddd, D MMMM YYYY [pukul] HH.mm'},meridiemParse:/pagi|tengahari|petang|malam/,meridiemHour:function meridiemHour(hour,meridiem){if(hour===12){hour=0;}if(meridiem==='pagi'){return hour;}else if(meridiem==='tengahari'){return hour>=11?hour:hour+12;}else if(meridiem==='petang'||meridiem==='malam'){return hour+12;}},meridiem:function meridiem(hours,minutes,isLower){if(hours<11){return'pagi';}else if(hours<15){return'tengahari';}else if(hours<19){return'petang';}else{return'malam';}},calendar:{sameDay:'[Hari ini pukul] LT',nextDay:'[Esok pukul] LT',nextWeek:'dddd [pukul] LT',lastDay:'[Kelmarin pukul] LT',lastWeek:'dddd [lepas pukul] LT',sameElse:'L'},relativeTime:{future:'dalam %s',past:'%s yang lepas',s:'beberapa saat',ss:'%d saat',m:'seminit',mm:'%d minit',h:'sejam',hh:'%d jam',d:'sehari',dd:'%d hari',M:'sebulan',MM:'%d bulan',y:'setahun',yy:'%d tahun'},week:{dow:1,// Monday is the first day of the week.\ndoy:7// The week that contains Jan 7th is the first week of the year.\n}});return ms;});/***/},/***/\"ec18\":/***/function ec18(module,exports,__webpack_require__){//! moment.js locale configuration\n//! locale : Estonian [et]\n//! author : Henry Kehlmann : https://github.com/madhenry\n//! improvements : Illimar Tambek : https://github.com/ragulka\n;(function(global,factory){true?factory(__webpack_require__(\"c1df\")):undefined;})(this,function(moment){'use strict';//! moment.js locale configuration\nfunction processRelativeTime(number,withoutSuffix,key,isFuture){var format={s:['mõne sekundi','mõni sekund','paar sekundit'],ss:[number+'sekundi',number+'sekundit'],m:['ühe minuti','üks minut'],mm:[number+' minuti',number+' minutit'],h:['ühe tunni','tund aega','üks tund'],hh:[number+' tunni',number+' tundi'],d:['ühe päeva','üks päev'],M:['kuu aja','kuu aega','üks kuu'],MM:[number+' kuu',number+' kuud'],y:['ühe aasta','aasta','üks aasta'],yy:[number+' aasta',number+' aastat']};if(withoutSuffix){return format[key][2]?format[key][2]:format[key][1];}return isFuture?format[key][0]:format[key][1];}var et=moment.defineLocale('et',{months:'jaanuar_veebruar_märts_aprill_mai_juuni_juuli_august_september_oktoober_november_detsember'.split('_'),monthsShort:'jaan_veebr_märts_apr_mai_juuni_juuli_aug_sept_okt_nov_dets'.split('_'),weekdays:'pühapäev_esmaspäev_teisipäev_kolmapäev_neljapäev_reede_laupäev'.split('_'),weekdaysShort:'P_E_T_K_N_R_L'.split('_'),weekdaysMin:'P_E_T_K_N_R_L'.split('_'),longDateFormat:{LT:'H:mm',LTS:'H:mm:ss',L:'DD.MM.YYYY',LL:'D. MMMM YYYY',LLL:'D. MMMM YYYY H:mm',LLLL:'dddd, D. MMMM YYYY H:mm'},calendar:{sameDay:'[Täna,] LT',nextDay:'[Homme,] LT',nextWeek:'[Järgmine] dddd LT',lastDay:'[Eile,] LT',lastWeek:'[Eelmine] dddd LT',sameElse:'L'},relativeTime:{future:'%s pärast',past:'%s tagasi',s:processRelativeTime,ss:processRelativeTime,m:processRelativeTime,mm:processRelativeTime,h:processRelativeTime,hh:processRelativeTime,d:processRelativeTime,dd:'%d päeva',M:processRelativeTime,MM:processRelativeTime,y:processRelativeTime,yy:processRelativeTime},dayOfMonthOrdinalParse:/\\d{1,2}\\./,ordinal:'%d.',week:{dow:1,// Monday is the first day of the week.\ndoy:4// The week that contains Jan 4th is the first week of the year.\n}});return et;});/***/},/***/\"ec2e\":/***/function ec2e(module,exports,__webpack_require__){//! moment.js locale configuration\n//! locale : English (India) [en-in]\n//! author : Jatin Agrawal : https://github.com/jatinag22\n;(function(global,factory){true?factory(__webpack_require__(\"c1df\")):undefined;})(this,function(moment){'use strict';//! moment.js locale configuration\nvar enIn=moment.defineLocale('en-in',{months:'January_February_March_April_May_June_July_August_September_October_November_December'.split('_'),monthsShort:'Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec'.split('_'),weekdays:'Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday'.split('_'),weekdaysShort:'Sun_Mon_Tue_Wed_Thu_Fri_Sat'.split('_'),weekdaysMin:'Su_Mo_Tu_We_Th_Fr_Sa'.split('_'),longDateFormat:{LT:'h:mm A',LTS:'h:mm:ss A',L:'DD/MM/YYYY',LL:'D MMMM YYYY',LLL:'D MMMM YYYY h:mm A',LLLL:'dddd, D MMMM YYYY h:mm A'},calendar:{sameDay:'[Today at] LT',nextDay:'[Tomorrow at] LT',nextWeek:'dddd [at] LT',lastDay:'[Yesterday at] LT',lastWeek:'[Last] dddd [at] LT',sameElse:'L'},relativeTime:{future:'in %s',past:'%s ago',s:'a few seconds',ss:'%d seconds',m:'a minute',mm:'%d minutes',h:'an hour',hh:'%d hours',d:'a day',dd:'%d days',M:'a month',MM:'%d months',y:'a year',yy:'%d years'},dayOfMonthOrdinalParse:/\\d{1,2}(st|nd|rd|th)/,ordinal:function ordinal(number){var b=number%10,output=~~(number%100/10)===1?'th':b===1?'st':b===2?'nd':b===3?'rd':'th';return number+output;},week:{dow:0,// Sunday is the first day of the week.\ndoy:6// The week that contains Jan 1st is the first week of the year.\n}});return enIn;});/***/},/***/\"eda5\":/***/function eda5(module,exports,__webpack_require__){//! moment.js locale configuration\n//! locale : Sinhalese [si]\n//! author : Sampath Sitinamaluwa : https://github.com/sampathsris\n;(function(global,factory){true?factory(__webpack_require__(\"c1df\")):undefined;})(this,function(moment){'use strict';//! moment.js locale configuration\n/*jshint -W100*/var si=moment.defineLocale('si',{months:'ජනවාරි_පෙබරවාරි_මාර්තු_අප්‍රේල්_මැයි_ජූනි_ජූලි_අගෝස්තු_සැප්තැම්බර්_ඔක්තෝබර්_නොවැම්බර්_දෙසැම්බර්'.split('_'),monthsShort:'ජන_පෙබ_මාර්_අප්_මැයි_ජූනි_ජූලි_අගෝ_සැප්_ඔක්_නොවැ_දෙසැ'.split('_'),weekdays:'ඉරිදා_සඳුදා_අඟහරුවාදා_බදාදා_බ්‍රහස්පතින්දා_සිකුරාදා_සෙනසුරාදා'.split('_'),weekdaysShort:'ඉරි_සඳු_අඟ_බදා_බ්‍රහ_සිකු_සෙන'.split('_'),weekdaysMin:'ඉ_ස_අ_බ_බ්‍ර_සි_සෙ'.split('_'),weekdaysParseExact:true,longDateFormat:{LT:'a h:mm',LTS:'a h:mm:ss',L:'YYYY/MM/DD',LL:'YYYY MMMM D',LLL:'YYYY MMMM D, a h:mm',LLLL:'YYYY MMMM D [වැනි] dddd, a h:mm:ss'},calendar:{sameDay:'[අද] LT[ට]',nextDay:'[හෙට] LT[ට]',nextWeek:'dddd LT[ට]',lastDay:'[ඊයේ] LT[ට]',lastWeek:'[පසුගිය] dddd LT[ට]',sameElse:'L'},relativeTime:{future:'%sකින්',past:'%sකට පෙර',s:'තත්පර කිහිපය',ss:'තත්පර %d',m:'මිනිත්තුව',mm:'මිනිත්තු %d',h:'පැය',hh:'පැය %d',d:'දිනය',dd:'දින %d',M:'මාසය',MM:'මාස %d',y:'වසර',yy:'වසර %d'},dayOfMonthOrdinalParse:/\\d{1,2} වැනි/,ordinal:function ordinal(number){return number+' වැනි';},meridiemParse:/පෙර වරු|පස් වරු|පෙ.ව|ප.ව./,isPM:function isPM(input){return input==='ප.ව.'||input==='පස් වරු';},meridiem:function meridiem(hours,minutes,isLower){if(hours>11){return isLower?'ප.ව.':'පස් වරු';}else{return isLower?'පෙ.ව.':'පෙර වරු';}}});return si;});/***/},/***/\"ee49\":/***/function ee49(module,exports,__webpack_require__){/*!\n  * CoreUI Plugins - Chart.js for CoreUI 3 v2.0.0-beta.0 (https://coreui.io)\n  * Copyright 2019 Łukasz Holeczek\n  * Licensed under MIT (https://coreui.io/plugins/chart.js)\n  */(function(global,factory){true?module.exports=factory(__webpack_require__(\"30ef\")):undefined;})(this,function(chart_js){'use strict';chart_js=chart_js&&chart_js.hasOwnProperty('default')?chart_js['default']:chart_js;/**\n   * --------------------------------------------------------------------------\n   * Custom Tooltips for Chart.js (vv2.0.0-beta.0): custom-tooltips.js\n   * Licensed under MIT (https://coreui.io/plugins/chart.js)\n   * --------------------------------------------------------------------------\n   */function customTooltips(tooltipModel){var _this=this;// Add unique id if not exist\nvar _setCanvasId=function _setCanvasId(){var _idMaker=function _idMaker(){var _hex=16;var _multiplier=0x10000;return((1+Math.random())*_multiplier|0).toString(_hex);};var _canvasId=\"_canvas-\"+(_idMaker()+_idMaker());_this._chart.canvas.id=_canvasId;return _canvasId;};var ClassName={ABOVE:'c-above',BELOW:'c-below',CHARTJS_TOOLTIP:'c-chartjs-tooltip',NO_TRANSFORM:'c-no-transform',TOOLTIP_BODY:'c-tooltip-body',TOOLTIP_BODY_ITEM:'c-tooltip-body-item',TOOLTIP_BODY_ITEM_COLOR:'c-tooltip-body-item-color',TOOLTIP_BODY_ITEM_LABEL:'c-tooltip-body-item-label',TOOLTIP_BODY_ITEM_VALUE:'c-tooltip-body-item-value',TOOLTIP_HEADER:'c-tooltip-header',TOOLTIP_HEADER_ITEM:'c-tooltip-header-item'};var Selector={DIV:'div',SPAN:'span',TOOLTIP:(this._chart.canvas.id||_setCanvasId())+\"-tooltip\"};var tooltip=document.getElementById(Selector.TOOLTIP);if(!tooltip){tooltip=document.createElement('div');tooltip.id=Selector.TOOLTIP;tooltip.className=ClassName.CHARTJS_TOOLTIP;this._chart.canvas.parentNode.appendChild(tooltip);}// Hide if no tooltip\nif(tooltipModel.opacity===0){tooltip.style.opacity=0;return;}// Set caret Position\ntooltip.classList.remove(ClassName.ABOVE,ClassName.BELOW,ClassName.NO_TRANSFORM);if(tooltipModel.yAlign){tooltip.classList.add(tooltipModel.yAlign);}else{tooltip.classList.add(ClassName.NO_TRANSFORM);}// Set Text\nif(tooltipModel.body){var titleLines=tooltipModel.title||[];var tooltipHeader=document.createElement(Selector.DIV);tooltipHeader.className=ClassName.TOOLTIP_HEADER;titleLines.forEach(function(title){var tooltipHeaderTitle=document.createElement(Selector.DIV);tooltipHeaderTitle.className=ClassName.TOOLTIP_HEADER_ITEM;tooltipHeaderTitle.innerHTML=title;tooltipHeader.appendChild(tooltipHeaderTitle);});var tooltipBody=document.createElement(Selector.DIV);tooltipBody.className=ClassName.TOOLTIP_BODY;var tooltipBodyItems=tooltipModel.body.map(function(item){return item.lines;});tooltipBodyItems.forEach(function(item,i){var tooltipBodyItem=document.createElement(Selector.DIV);tooltipBodyItem.className=ClassName.TOOLTIP_BODY_ITEM;var colors=tooltipModel.labelColors[i];var tooltipBodyItemColor=document.createElement(Selector.SPAN);tooltipBodyItemColor.className=ClassName.TOOLTIP_BODY_ITEM_COLOR;tooltipBodyItemColor.style.backgroundColor=colors.backgroundColor;tooltipBodyItem.appendChild(tooltipBodyItemColor);if(item[0].split(':').length>1){var tooltipBodyItemLabel=document.createElement(Selector.SPAN);tooltipBodyItemLabel.className=ClassName.TOOLTIP_BODY_ITEM_LABEL;tooltipBodyItemLabel.innerHTML=item[0].split(': ')[0];tooltipBodyItem.appendChild(tooltipBodyItemLabel);var tooltipBodyItemValue=document.createElement(Selector.SPAN);tooltipBodyItemValue.className=ClassName.TOOLTIP_BODY_ITEM_VALUE;tooltipBodyItemValue.innerHTML=item[0].split(': ').pop();tooltipBodyItem.appendChild(tooltipBodyItemValue);}else{var _tooltipBodyItemValue=document.createElement(Selector.SPAN);_tooltipBodyItemValue.className=ClassName.TOOLTIP_BODY_ITEM_VALUE;_tooltipBodyItemValue.innerHTML=item[0];tooltipBodyItem.appendChild(_tooltipBodyItemValue);}tooltipBody.appendChild(tooltipBodyItem);});tooltip.innerHTML='';tooltip.appendChild(tooltipHeader);tooltip.appendChild(tooltipBody);}var position=this._chart.canvas.getBoundingClientRect();var positionY=this._chart.canvas.offsetTop;var positionX=this._chart.canvas.offsetLeft;var positionLeft=positionX+tooltipModel.caretX;var positionTop=positionY+tooltipModel.caretY;// eslint-disable-next-line\nvar halfWidth=tooltipModel.width/2;if(positionLeft+halfWidth>position.width){positionLeft-=halfWidth;}else if(positionLeft<halfWidth){positionLeft+=halfWidth;}// Display, position, and set styles for font\ntooltip.style.opacity=1;tooltip.style.left=positionLeft+\"px\";tooltip.style.top=positionTop+\"px\";}/**\n   * --------------------------------------------------------------------------\n   * Custom Tooltips for Chart.js (vv2.0.0-beta.0): index.umd.js\n   * Licensed under MIT (https://github.com/@coreui/coreui-chartjs/LICENSE)\n   * --------------------------------------------------------------------------\n   */var index_umd={customTooltips:customTooltips};return index_umd;});/***/},/***/\"f260\":/***/function f260(module,exports,__webpack_require__){//! moment.js locale configuration\n//! locale : Portuguese [pt]\n//! author : Jefferson : https://github.com/jalex79\n;(function(global,factory){true?factory(__webpack_require__(\"c1df\")):undefined;})(this,function(moment){'use strict';//! moment.js locale configuration\nvar pt=moment.defineLocale('pt',{months:'janeiro_fevereiro_março_abril_maio_junho_julho_agosto_setembro_outubro_novembro_dezembro'.split('_'),monthsShort:'jan_fev_mar_abr_mai_jun_jul_ago_set_out_nov_dez'.split('_'),weekdays:'Domingo_Segunda-feira_Terça-feira_Quarta-feira_Quinta-feira_Sexta-feira_Sábado'.split('_'),weekdaysShort:'Dom_Seg_Ter_Qua_Qui_Sex_Sáb'.split('_'),weekdaysMin:'Do_2ª_3ª_4ª_5ª_6ª_Sá'.split('_'),weekdaysParseExact:true,longDateFormat:{LT:'HH:mm',LTS:'HH:mm:ss',L:'DD/MM/YYYY',LL:'D [de] MMMM [de] YYYY',LLL:'D [de] MMMM [de] YYYY HH:mm',LLLL:'dddd, D [de] MMMM [de] YYYY HH:mm'},calendar:{sameDay:'[Hoje às] LT',nextDay:'[Amanhã às] LT',nextWeek:'dddd [às] LT',lastDay:'[Ontem às] LT',lastWeek:function lastWeek(){return this.day()===0||this.day()===6?'[Último] dddd [às] LT'// Saturday + Sunday\n:'[Última] dddd [às] LT';// Monday - Friday\n},sameElse:'L'},relativeTime:{future:'em %s',past:'há %s',s:'segundos',ss:'%d segundos',m:'um minuto',mm:'%d minutos',h:'uma hora',hh:'%d horas',d:'um dia',dd:'%d dias',M:'um mês',MM:'%d meses',y:'um ano',yy:'%d anos'},dayOfMonthOrdinalParse:/\\d{1,2}º/,ordinal:'%dº',week:{dow:1,// Monday is the first day of the week.\ndoy:4// The week that contains Jan 4th is the first week of the year.\n}});return pt;});/***/},/***/\"f3ff\":/***/function f3ff(module,exports,__webpack_require__){//! moment.js locale configuration\n//! locale : Punjabi (India) [pa-in]\n//! author : Harpreet Singh : https://github.com/harpreetkhalsagtbit\n;(function(global,factory){true?factory(__webpack_require__(\"c1df\")):undefined;})(this,function(moment){'use strict';//! moment.js locale configuration\nvar symbolMap={'1':'੧','2':'੨','3':'੩','4':'੪','5':'੫','6':'੬','7':'੭','8':'੮','9':'੯','0':'੦'},numberMap={'੧':'1','੨':'2','੩':'3','੪':'4','੫':'5','੬':'6','੭':'7','੮':'8','੯':'9','੦':'0'};var paIn=moment.defineLocale('pa-in',{// There are months name as per Nanakshahi Calendar but they are not used as rigidly in modern Punjabi.\nmonths:'ਜਨਵਰੀ_ਫ਼ਰਵਰੀ_ਮਾਰਚ_ਅਪ੍ਰੈਲ_ਮਈ_ਜੂਨ_ਜੁਲਾਈ_ਅਗਸਤ_ਸਤੰਬਰ_ਅਕਤੂਬਰ_ਨਵੰਬਰ_ਦਸੰਬਰ'.split('_'),monthsShort:'ਜਨਵਰੀ_ਫ਼ਰਵਰੀ_ਮਾਰਚ_ਅਪ੍ਰੈਲ_ਮਈ_ਜੂਨ_ਜੁਲਾਈ_ਅਗਸਤ_ਸਤੰਬਰ_ਅਕਤੂਬਰ_ਨਵੰਬਰ_ਦਸੰਬਰ'.split('_'),weekdays:'ਐਤਵਾਰ_ਸੋਮਵਾਰ_ਮੰਗਲਵਾਰ_ਬੁਧਵਾਰ_ਵੀਰਵਾਰ_ਸ਼ੁੱਕਰਵਾਰ_ਸ਼ਨੀਚਰਵਾਰ'.split('_'),weekdaysShort:'ਐਤ_ਸੋਮ_ਮੰਗਲ_ਬੁਧ_ਵੀਰ_ਸ਼ੁਕਰ_ਸ਼ਨੀ'.split('_'),weekdaysMin:'ਐਤ_ਸੋਮ_ਮੰਗਲ_ਬੁਧ_ਵੀਰ_ਸ਼ੁਕਰ_ਸ਼ਨੀ'.split('_'),longDateFormat:{LT:'A h:mm ਵਜੇ',LTS:'A h:mm:ss ਵਜੇ',L:'DD/MM/YYYY',LL:'D MMMM YYYY',LLL:'D MMMM YYYY, A h:mm ਵਜੇ',LLLL:'dddd, D MMMM YYYY, A h:mm ਵਜੇ'},calendar:{sameDay:'[ਅਜ] LT',nextDay:'[ਕਲ] LT',nextWeek:'[ਅਗਲਾ] dddd, LT',lastDay:'[ਕਲ] LT',lastWeek:'[ਪਿਛਲੇ] dddd, LT',sameElse:'L'},relativeTime:{future:'%s ਵਿੱਚ',past:'%s ਪਿਛਲੇ',s:'ਕੁਝ ਸਕਿੰਟ',ss:'%d ਸਕਿੰਟ',m:'ਇਕ ਮਿੰਟ',mm:'%d ਮਿੰਟ',h:'ਇੱਕ ਘੰਟਾ',hh:'%d ਘੰਟੇ',d:'ਇੱਕ ਦਿਨ',dd:'%d ਦਿਨ',M:'ਇੱਕ ਮਹੀਨਾ',MM:'%d ਮਹੀਨੇ',y:'ਇੱਕ ਸਾਲ',yy:'%d ਸਾਲ'},preparse:function preparse(string){return string.replace(/[੧੨੩੪੫੬੭੮੯੦]/g,function(match){return numberMap[match];});},postformat:function postformat(string){return string.replace(/\\d/g,function(match){return symbolMap[match];});},// Punjabi notation for meridiems are quite fuzzy in practice. While there exists\n// a rigid notion of a 'Pahar' it is not used as rigidly in modern Punjabi.\nmeridiemParse:/ਰਾਤ|ਸਵੇਰ|ਦੁਪਹਿਰ|ਸ਼ਾਮ/,meridiemHour:function meridiemHour(hour,meridiem){if(hour===12){hour=0;}if(meridiem==='ਰਾਤ'){return hour<4?hour:hour+12;}else if(meridiem==='ਸਵੇਰ'){return hour;}else if(meridiem==='ਦੁਪਹਿਰ'){return hour>=10?hour:hour+12;}else if(meridiem==='ਸ਼ਾਮ'){return hour+12;}},meridiem:function meridiem(hour,minute,isLower){if(hour<4){return'ਰਾਤ';}else if(hour<10){return'ਸਵੇਰ';}else if(hour<17){return'ਦੁਪਹਿਰ';}else if(hour<20){return'ਸ਼ਾਮ';}else{return'ਰਾਤ';}},week:{dow:0,// Sunday is the first day of the week.\ndoy:6// The week that contains Jan 6th is the first week of the year.\n}});return paIn;});/***/},/***/\"f6b4\":/***/function f6b4(module,exports,__webpack_require__){//! moment.js locale configuration\n//! locale : Scottish Gaelic [gd]\n//! author : Jon Ashdown : https://github.com/jonashdown\n;(function(global,factory){true?factory(__webpack_require__(\"c1df\")):undefined;})(this,function(moment){'use strict';//! moment.js locale configuration\nvar months=['Am Faoilleach','An Gearran','Am Màrt','An Giblean','An Cèitean','An t-Ògmhios','An t-Iuchar','An Lùnastal','An t-Sultain','An Dàmhair','An t-Samhain','An Dùbhlachd'],monthsShort=['Faoi','Gear','Màrt','Gibl','Cèit','Ògmh','Iuch','Lùn','Sult','Dàmh','Samh','Dùbh'],weekdays=['Didòmhnaich','Diluain','Dimàirt','Diciadain','Diardaoin','Dihaoine','Disathairne'],weekdaysShort=['Did','Dil','Dim','Dic','Dia','Dih','Dis'],weekdaysMin=['Dò','Lu','Mà','Ci','Ar','Ha','Sa'];var gd=moment.defineLocale('gd',{months:months,monthsShort:monthsShort,monthsParseExact:true,weekdays:weekdays,weekdaysShort:weekdaysShort,weekdaysMin:weekdaysMin,longDateFormat:{LT:'HH:mm',LTS:'HH:mm:ss',L:'DD/MM/YYYY',LL:'D MMMM YYYY',LLL:'D MMMM YYYY HH:mm',LLLL:'dddd, D MMMM YYYY HH:mm'},calendar:{sameDay:'[An-diugh aig] LT',nextDay:'[A-màireach aig] LT',nextWeek:'dddd [aig] LT',lastDay:'[An-dè aig] LT',lastWeek:'dddd [seo chaidh] [aig] LT',sameElse:'L'},relativeTime:{future:'ann an %s',past:'bho chionn %s',s:'beagan diogan',ss:'%d diogan',m:'mionaid',mm:'%d mionaidean',h:'uair',hh:'%d uairean',d:'latha',dd:'%d latha',M:'mìos',MM:'%d mìosan',y:'bliadhna',yy:'%d bliadhna'},dayOfMonthOrdinalParse:/\\d{1,2}(d|na|mh)/,ordinal:function ordinal(number){var output=number===1?'d':number%10===2?'na':'mh';return number+output;},week:{dow:1,// Monday is the first day of the week.\ndoy:4// The week that contains Jan 4th is the first week of the year.\n}});return gd;});/***/},/***/\"facd\":/***/function facd(module,exports,__webpack_require__){//! moment.js locale configuration\n//! locale : Dutch [nl]\n//! author : Joris Röling : https://github.com/jorisroling\n//! author : Jacob Middag : https://github.com/middagj\n;(function(global,factory){true?factory(__webpack_require__(\"c1df\")):undefined;})(this,function(moment){'use strict';//! moment.js locale configuration\nvar monthsShortWithDots='jan._feb._mrt._apr._mei_jun._jul._aug._sep._okt._nov._dec.'.split('_'),monthsShortWithoutDots='jan_feb_mrt_apr_mei_jun_jul_aug_sep_okt_nov_dec'.split('_'),monthsParse=[/^jan/i,/^feb/i,/^maart|mrt.?$/i,/^apr/i,/^mei$/i,/^jun[i.]?$/i,/^jul[i.]?$/i,/^aug/i,/^sep/i,/^okt/i,/^nov/i,/^dec/i],monthsRegex=/^(januari|februari|maart|april|mei|ju[nl]i|augustus|september|oktober|november|december|jan\\.?|feb\\.?|mrt\\.?|apr\\.?|ju[nl]\\.?|aug\\.?|sep\\.?|okt\\.?|nov\\.?|dec\\.?)/i;var nl=moment.defineLocale('nl',{months:'januari_februari_maart_april_mei_juni_juli_augustus_september_oktober_november_december'.split('_'),monthsShort:function monthsShort(m,format){if(!m){return monthsShortWithDots;}else if(/-MMM-/.test(format)){return monthsShortWithoutDots[m.month()];}else{return monthsShortWithDots[m.month()];}},monthsRegex:monthsRegex,monthsShortRegex:monthsRegex,monthsStrictRegex:/^(januari|februari|maart|april|mei|ju[nl]i|augustus|september|oktober|november|december)/i,monthsShortStrictRegex:/^(jan\\.?|feb\\.?|mrt\\.?|apr\\.?|mei|ju[nl]\\.?|aug\\.?|sep\\.?|okt\\.?|nov\\.?|dec\\.?)/i,monthsParse:monthsParse,longMonthsParse:monthsParse,shortMonthsParse:monthsParse,weekdays:'zondag_maandag_dinsdag_woensdag_donderdag_vrijdag_zaterdag'.split('_'),weekdaysShort:'zo._ma._di._wo._do._vr._za.'.split('_'),weekdaysMin:'zo_ma_di_wo_do_vr_za'.split('_'),weekdaysParseExact:true,longDateFormat:{LT:'HH:mm',LTS:'HH:mm:ss',L:'DD-MM-YYYY',LL:'D MMMM YYYY',LLL:'D MMMM YYYY HH:mm',LLLL:'dddd D MMMM YYYY HH:mm'},calendar:{sameDay:'[vandaag om] LT',nextDay:'[morgen om] LT',nextWeek:'dddd [om] LT',lastDay:'[gisteren om] LT',lastWeek:'[afgelopen] dddd [om] LT',sameElse:'L'},relativeTime:{future:'over %s',past:'%s geleden',s:'een paar seconden',ss:'%d seconden',m:'één minuut',mm:'%d minuten',h:'één uur',hh:'%d uur',d:'één dag',dd:'%d dagen',M:'één maand',MM:'%d maanden',y:'één jaar',yy:'%d jaar'},dayOfMonthOrdinalParse:/\\d{1,2}(ste|de)/,ordinal:function ordinal(number){return number+(number===1||number===8||number>=20?'ste':'de');},week:{dow:1,// Monday is the first day of the week.\ndoy:4// The week that contains Jan 4th is the first week of the year.\n}});return nl;});/***/},/***/\"fb15\":/***/function fb15(module,__webpack_exports__,__webpack_require__){\"use strict\";// ESM COMPAT FLAG\n__webpack_require__.r(__webpack_exports__);// EXPORTS\n__webpack_require__.d(__webpack_exports__,\"CChartBar\",function(){return(/* reexport */CChartBar);});__webpack_require__.d(__webpack_exports__,\"CChartHorizontalBar\",function(){return(/* reexport */CChartHorizontalBar);});__webpack_require__.d(__webpack_exports__,\"CChartLine\",function(){return(/* reexport */CChartLine);});__webpack_require__.d(__webpack_exports__,\"CChartDoughnut\",function(){return(/* reexport */CChartDoughnut);});__webpack_require__.d(__webpack_exports__,\"CChartRadar\",function(){return(/* reexport */CChartRadar);});__webpack_require__.d(__webpack_exports__,\"CChartPie\",function(){return(/* reexport */CChartPie);});__webpack_require__.d(__webpack_exports__,\"CChartPolarArea\",function(){return(/* reexport */CChartPolarArea);});// CONCATENATED MODULE: ./node_modules/@vue/cli-service/lib/commands/build/setPublicPath.js\n// This file is imported into lib/wc client bundles.\nif(typeof window!=='undefined'){var currentScript=window.document.currentScript;if(true){var getCurrentScript=__webpack_require__(\"8875\");currentScript=getCurrentScript();// for backward compatibility, because previously we directly included the polyfill\nif(!('currentScript'in document)){Object.defineProperty(document,'currentScript',{get:getCurrentScript});}}var src=currentScript&&currentScript.src.match(/(.+\\/)[^/]+\\.js(\\?.*)?$/);if(src){__webpack_require__.p=src[1];// eslint-disable-line\n}}// Indicate to webpack that this file can be concatenated\n/* harmony default export */var setPublicPath=null;// EXTERNAL MODULE: ./node_modules/chart.js/dist/Chart.js\nvar Chart=__webpack_require__(\"30ef\");var Chart_default=/*#__PURE__*/__webpack_require__.n(Chart);// EXTERNAL MODULE: ./node_modules/@coreui/coreui-chartjs/dist/js/coreui-chartjs.js\nvar coreui_chartjs=__webpack_require__(\"ee49\");// CONCATENATED MODULE: ./node_modules/cache-loader/dist/cjs.js??ref--12-0!./node_modules/thread-loader/dist/cjs.js!./node_modules/babel-loader/lib!./node_modules/cache-loader/dist/cjs.js??ref--0-0!./node_modules/vue-loader/lib??vue-loader-options!./src/Chart.vue?vue&type=script&lang=js&\nfunction _typeof(obj){\"@babel/helpers - typeof\";if(typeof Symbol===\"function\"&&typeof Symbol.iterator===\"symbol\"){_typeof=function _typeof(obj){return typeof obj;};}else{_typeof=function _typeof(obj){return obj&&typeof Symbol===\"function\"&&obj.constructor===Symbol&&obj!==Symbol.prototype?\"symbol\":typeof obj;};}return _typeof(obj);}/* harmony default export */var Chartvue_type_script_lang_js_={name:'',type:'',props:{datasets:Array,labels:[Array,String],options:Object,plugins:Array},months:['January','February','March','April','May','June','July','August','September','October','November','December'],data:function data(){return{chart:undefined};},watch:{chartConfig:function chartConfig(){this.updateChart();}},mounted:function mounted(){this.renderChart();},beforeDestroy:function beforeDestroy(){this.destroyChart();},computed:{safeId:function safeId(){// as long as this._uid() works there is no need to generate the key\nvar key=function key(){return Math.random().toString(36).replace('0.','');};return'__safe_id__'+(this._uid||key());},computedDatasets:function computedDatasets(){return this.datasets;},computedLabels:function computedLabels(){var _this=this;if(this.labels&&typeof this.labels!=='string'){return this.labels;}else if(!this.datasets||!this.datasets[0]||!this.datasets[0].data){return[];}var emptyLabels=Array(this.datasets[0].data.length).fill('');if(this.labels==='indexes'){return emptyLabels.map(function(u,i){return i+1;});}else if(this.labels==='months'){return emptyLabels.map(function(u,i){return _this.$options.months[i%12];});}return emptyLabels;},computedData:function computedData(){return{datasets:this.computedDatasets,labels:this.computedLabels};},customTooltips:function customTooltips(){if(this.options&&this.options.tooltips){return;}return{tooltips:{enabled:false,custom:coreui_chartjs[\"customTooltips\"],intersect:true,mode:'index',position:'nearest',callbacks:{labelColor:function labelColor(tooltipItem,chart){function getValue(prop){return _typeof(prop)==='object'?prop[tooltipItem.index]:prop;}var dataset=chart.data.datasets[tooltipItem.datasetIndex];//tooltipLabelColor is coreUI custom prop used only here\nvar backgroundColor=getValue(dataset.tooltipLabelColor||dataset.pointHoverBackgroundColor||dataset.borderColor||dataset.backgroundColor);return{backgroundColor:backgroundColor};}}}};},computedOptions:function computedOptions(){return Object.assign({},this.options,this.customTooltips||{});},chartConfig:function chartConfig(){return{type:this.$options.type,data:this.computedData,options:this.computedOptions||this.options,plugins:this.plugins};}},methods:{renderChart:function renderChart(){this.destroyChart();this.chart=new Chart_default.a(this.$refs.canvas.getContext('2d'),this.chartConfig);},updateChart:function updateChart(){Object.assign(this.chart,this.chartConfig);this.chart.update();},destroyChart:function destroyChart(){if(this.chart){this.chart.destroy();}}},render:function render(h){return h('div',[h('canvas',{attrs:{id:this.safeId},ref:'canvas'})]);}};// CONCATENATED MODULE: ./src/Chart.vue?vue&type=script&lang=js&\n/* harmony default export */var src_Chartvue_type_script_lang_js_=Chartvue_type_script_lang_js_;// EXTERNAL MODULE: ./src/Chart.vue?vue&type=style&index=0&lang=css&\nvar Chartvue_type_style_index_0_lang_css_=__webpack_require__(\"69ea\");// CONCATENATED MODULE: ./node_modules/vue-loader/lib/runtime/componentNormalizer.js\n/* globals __VUE_SSR_CONTEXT__ */ // IMPORTANT: Do NOT use ES2015 features in this file (except for modules).\n// This module is a runtime utility for cleaner component module output and will\n// be included in the final webpack user bundle.\nfunction normalizeComponent(scriptExports,render,staticRenderFns,functionalTemplate,injectStyles,scopeId,moduleIdentifier,/* server only */shadowMode/* vue-cli only */){// Vue.extend constructor export interop\nvar options=typeof scriptExports==='function'?scriptExports.options:scriptExports;// render functions\nif(render){options.render=render;options.staticRenderFns=staticRenderFns;options._compiled=true;}// functional template\nif(functionalTemplate){options.functional=true;}// scopedId\nif(scopeId){options._scopeId='data-v-'+scopeId;}var hook;if(moduleIdentifier){// server build\nhook=function hook(context){// 2.3 injection\ncontext=context||// cached call\nthis.$vnode&&this.$vnode.ssrContext||// stateful\nthis.parent&&this.parent.$vnode&&this.parent.$vnode.ssrContext;// functional\n// 2.2 with runInNewContext: true\nif(!context&&typeof __VUE_SSR_CONTEXT__!=='undefined'){context=__VUE_SSR_CONTEXT__;}// inject component styles\nif(injectStyles){injectStyles.call(this,context);}// register component module identifier for async chunk inferrence\nif(context&&context._registeredComponents){context._registeredComponents.add(moduleIdentifier);}};// used by ssr in case component is cached and beforeCreate\n// never gets called\noptions._ssrRegister=hook;}else if(injectStyles){hook=shadowMode?function(){injectStyles.call(this,(options.functional?this.parent:this).$root.$options.shadowRoot);}:injectStyles;}if(hook){if(options.functional){// for template-only hot-reload because in that case the render fn doesn't\n// go through the normalizer\noptions._injectStyles=hook;// register for functional component in vue file\nvar originalRender=options.render;options.render=function renderWithStyleInjection(h,context){hook.call(context);return originalRender(h,context);};}else{// inject component registration as beforeCreate hook\nvar existing=options.beforeCreate;options.beforeCreate=existing?[].concat(existing,hook):[hook];}}return{exports:scriptExports,options:options};}// CONCATENATED MODULE: ./src/Chart.vue\nvar render,staticRenderFns;/* normalize component */var component=normalizeComponent(src_Chartvue_type_script_lang_js_,render,staticRenderFns,false,null,null,null);/* harmony default export */var src_Chart=component.exports;// CONCATENATED MODULE: ./src/index.js\nvar CChartBar=Object.assign({},src_Chart,{name:'CChartBar',type:'bar'});var CChartHorizontalBar=Object.assign({},src_Chart,{name:'CChartHorizontalBar',type:'horizontalBar'});var CChartLine=Object.assign({},src_Chart,{name:'CChartLine',type:'line'});var CChartDoughnut=Object.assign({},src_Chart,{name:'CChartDoughnut',type:'doughnut'});var CChartRadar=Object.assign({},src_Chart,{name:'CChartRadar',type:'radar'});var CChartPie=Object.assign({},src_Chart,{name:'CChartPie',type:'pie'});var CChartPolarArea=Object.assign({},src_Chart,{name:'CChartPolarArea',type:'polarArea'});var CoreuiVueCharts={install:function install(Vue){Vue.component('CChartBar',CChartBar);Vue.component('CChartHorizontalBar',CChartHorizontalBar);Vue.component('CChartLine',CChartLine);Vue.component('CChartDoughnut',CChartDoughnut);Vue.component('CChartRadar',CChartRadar);Vue.component('CChartPie',CChartPie);Vue.component('CChartPolarArea',CChartPolarArea);}};// Export library\n/* harmony default export */var src_0=CoreuiVueCharts;// CONCATENATED MODULE: ./node_modules/@vue/cli-service/lib/commands/build/entry-lib.js\n/* harmony default export */var entry_lib=__webpack_exports__[\"default\"]=src_0;/***/},/***/\"fd7e\":/***/function fd7e(module,exports,__webpack_require__){//! moment.js locale configuration\n//! locale : Pseudo [x-pseudo]\n//! author : Andrew Hood : https://github.com/andrewhood125\n;(function(global,factory){true?factory(__webpack_require__(\"c1df\")):undefined;})(this,function(moment){'use strict';//! moment.js locale configuration\nvar xPseudo=moment.defineLocale('x-pseudo',{months:'J~áñúá~rý_F~ébrú~árý_~Márc~h_Áp~ríl_~Máý_~Júñé~_Júl~ý_Áú~gúst~_Sép~témb~ér_Ó~ctób~ér_Ñ~óvém~bér_~Décé~mbér'.split('_'),monthsShort:'J~áñ_~Féb_~Már_~Ápr_~Máý_~Júñ_~Júl_~Áúg_~Sép_~Óct_~Ñóv_~Déc'.split('_'),monthsParseExact:true,weekdays:'S~úñdá~ý_Mó~ñdáý~_Túé~sdáý~_Wéd~ñésd~áý_T~húrs~dáý_~Fríd~áý_S~átúr~dáý'.split('_'),weekdaysShort:'S~úñ_~Móñ_~Túé_~Wéd_~Thú_~Frí_~Sát'.split('_'),weekdaysMin:'S~ú_Mó~_Tú_~Wé_T~h_Fr~_Sá'.split('_'),weekdaysParseExact:true,longDateFormat:{LT:'HH:mm',L:'DD/MM/YYYY',LL:'D MMMM YYYY',LLL:'D MMMM YYYY HH:mm',LLLL:'dddd, D MMMM YYYY HH:mm'},calendar:{sameDay:'[T~ódá~ý át] LT',nextDay:'[T~ómó~rró~w át] LT',nextWeek:'dddd [át] LT',lastDay:'[Ý~ést~érdá~ý át] LT',lastWeek:'[L~ást] dddd [át] LT',sameElse:'L'},relativeTime:{future:'í~ñ %s',past:'%s á~gó',s:'á ~féw ~sécó~ñds',ss:'%d s~écóñ~ds',m:'á ~míñ~úté',mm:'%d m~íñú~tés',h:'á~ñ hó~úr',hh:'%d h~óúrs',d:'á ~dáý',dd:'%d d~áýs',M:'á ~móñ~th',MM:'%d m~óñt~hs',y:'á ~ýéár',yy:'%d ý~éárs'},dayOfMonthOrdinalParse:/\\d{1,2}(th|st|nd|rd)/,ordinal:function ordinal(number){var b=number%10,output=~~(number%100/10)===1?'th':b===1?'st':b===2?'nd':b===3?'rd':'th';return number+output;},week:{dow:1,// Monday is the first day of the week.\ndoy:4// The week that contains Jan 4th is the first week of the year.\n}});return xPseudo;});/***/},/***/\"ffff\":/***/function ffff(module,exports,__webpack_require__){//! moment.js locale configuration\n//! locale : Northern Sami [se]\n//! authors : Bård Rolstad Henriksen : https://github.com/karamell\n;(function(global,factory){true?factory(__webpack_require__(\"c1df\")):undefined;})(this,function(moment){'use strict';//! moment.js locale configuration\nvar se=moment.defineLocale('se',{months:'ođđajagemánnu_guovvamánnu_njukčamánnu_cuoŋománnu_miessemánnu_geassemánnu_suoidnemánnu_borgemánnu_čakčamánnu_golggotmánnu_skábmamánnu_juovlamánnu'.split('_'),monthsShort:'ođđj_guov_njuk_cuo_mies_geas_suoi_borg_čakč_golg_skáb_juov'.split('_'),weekdays:'sotnabeaivi_vuossárga_maŋŋebárga_gaskavahkku_duorastat_bearjadat_lávvardat'.split('_'),weekdaysShort:'sotn_vuos_maŋ_gask_duor_bear_láv'.split('_'),weekdaysMin:'s_v_m_g_d_b_L'.split('_'),longDateFormat:{LT:'HH:mm',LTS:'HH:mm:ss',L:'DD.MM.YYYY',LL:'MMMM D. [b.] YYYY',LLL:'MMMM D. [b.] YYYY [ti.] HH:mm',LLLL:'dddd, MMMM D. [b.] YYYY [ti.] HH:mm'},calendar:{sameDay:'[otne ti] LT',nextDay:'[ihttin ti] LT',nextWeek:'dddd [ti] LT',lastDay:'[ikte ti] LT',lastWeek:'[ovddit] dddd [ti] LT',sameElse:'L'},relativeTime:{future:'%s geažes',past:'maŋit %s',s:'moadde sekunddat',ss:'%d sekunddat',m:'okta minuhta',mm:'%d minuhtat',h:'okta diimmu',hh:'%d diimmut',d:'okta beaivi',dd:'%d beaivvit',M:'okta mánnu',MM:'%d mánut',y:'okta jahki',yy:'%d jagit'},dayOfMonthOrdinalParse:/\\d{1,2}\\./,ordinal:'%d.',week:{dow:1,// Monday is the first day of the week.\ndoy:4// The week that contains Jan 4th is the first week of the year.\n}});return se;});/***/}/******/});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/@coreui/vue-chartjs/dist/coreui-vue-chartjs.common.js\n");

/***/ })

}]);